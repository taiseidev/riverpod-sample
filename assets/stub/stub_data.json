[
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:22\">pubspec.yaml に記述</p>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>dependencies:\n  just_audio: ^0.9.30           #オーディオ\n  intl: ^0.17.0                 #時刻系\n  shared_preferences: ^2.0.15   #設定保存・ロード系\n  google_mobile_ads: ^0.13.2+1  #広告\n  flutter_screenutil: ^5.3.1    #表示の統一\n  firebase_core: ^1.13.1        #Firebase\n  cloud_firestore: ^3.1.10      #Fire Storage\n  bordered_text: ^2.0.0         #テキストの縁取り\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>//================================================================\n//util.dart\n//便利関数群\n//================================================================\nimport 'dart:math';\nimport 'package:just_audio/just_audio.dart';\nimport 'package:audio_session/audio_session.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'package:intl/intl.dart';\n</code></pre></div></div>\n",
    "body": "pubspec.yaml に記述\n\n<pre>dependencies:\n  just_audio: ^0.9.30           #オーディオ\n  intl: ^0.17.0                 #時刻系\n  shared_preferences: ^2.0.15   #設定保存・ロード系\n  google_mobile_ads: ^0.13.2+1  #広告\n  flutter_screenutil: ^5.3.1    #表示の統一\n  firebase_core: ^1.13.1        #Firebase\n  cloud_firestore: ^3.1.10      #Fire Storage\n  bordered_text: ^2.0.0         #テキストの縁取り\n</pre>\n\n<pre>//================================================================\n//util.dart\n//便利関数群\n//================================================================\nimport 'dart:math';\nimport 'package:just_audio/just_audio.dart';\nimport 'package:audio_session/audio_session.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'package:intl/intl.dart';\n</pre>\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-05T21:19:07+09:00",
    "group": null,
    "id": "519ca363332a531fc15c",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "個人的によく使うDartのライブラリ群",
    "updated_at": "2022-12-05T21:29:19+09:00",
    "url": "https://qiita.com/wata_tp/items/519ca363332a531fc15c",
    "user": {
      "description": "技術的な備忘録です。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "wata_tp",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "Wata",
      "organization": "",
      "permanent_id": 951019,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/951019/35acfbc72e9e8a3588f22e57bda9fc8a0352f40b/large.png?1670242939",
      "team_only": false,
      "twitter_screen_name": "wata_tp",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:38\">\n<span id=\"エンジニアカフェについて\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%82%AB%E3%83%95%E3%82%A7%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>エンジニアカフェについて</h1>\n<p data-sourcepos=\"2:1-4:42\">エンジニアカフェとは,エンジニアがより先鋭的なチャレンジやスキルの幅を広げることができるようにという想いから、官民一体で生まれたエンジニアのための施設です。<br>\n普段はコワーキングスペースとして無料で開放しており、他にもエンジニアに関わる方、エンジニアを目指す方からの相談・サポートやエンジニア同士が交流したり知見を深めあうことができるイベント等を開催しております。<br>\nエンジニアカフェの施設ですが</p>\n<ul data-sourcepos=\"5:1-10:0\">\n<li data-sourcepos=\"5:1-5:62\">開放的な空間で作業できる「メインホール」</li>\n<li data-sourcepos=\"6:1-6:74\">静かな空間で集中される方のための「集中スペース」</li>\n<li data-sourcepos=\"7:1-7:73\">リラックスできる空間で作業できる「underスペース」</li>\n<li data-sourcepos=\"8:1-8:66\">加工機を使った工作ができる「Maker'sスペース」</li>\n<li data-sourcepos=\"9:1-10:0\">少人数で会議ができる「ミーティングスペース」</li>\n</ul>\n<p data-sourcepos=\"11:1-13:27\">と様々なシーンで使用できるスペースが用意されています。<br>\nぜひお立ち寄りください！<br>\n<a href=\"https://engineercafe.jp/ja/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://engineercafe.jp/ja/</a></p>\n<h1 data-sourcepos=\"15:1-15:8\">\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n<p data-sourcepos=\"16:1-16:111\">今回はエンジニアカフェのスペース利用者を一括管理できるサイトを作りました。</p>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/pJK6BVYyrUE\" frameborder=\"0\" allowfullscreen></iframe>\n<h1 data-sourcepos=\"20:1-20:20\">\n<span id=\"当初の仕組み\" class=\"fragment\"></span><a href=\"#%E5%BD%93%E5%88%9D%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>当初の仕組み</h1>\n<p data-sourcepos=\"21:1-23:60\">元々エンジニアカフェでは利用者情報はGoogle Form とGoogle Spreadsheetを使って登録していました。<br>\n会員番号,利用時間,利用人数,利用時間をFormに入力し、その情報がSpreadsheet上に記録されていくものです。<br>\nしかしこの方法では以下の点で不便でした。</p>\n<ul data-sourcepos=\"24:1-28:0\">\n<li data-sourcepos=\"24:1-24:91\">データの書き換え、削除ができない(誤入力した時がめんどくさい)</li>\n<li data-sourcepos=\"25:1-25:133\">誰がどこを使っているのかすぐに把握できない。(スプレッドシートから参照しなければいけない)</li>\n<li data-sourcepos=\"26:1-28:0\">入力に 20~30s/ユーザー ほどかかる。(入力項目が無駄に多い)<br>\n<a href=\"https://camo.qiitausercontent.com/d75f89bea8d98e197e5929c823b528e72c09b507/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f63666232656532342d396564642d396463382d643034652d3331316632343338393039362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2Fcfb2ee24-9edd-9dc8-d04e-311f24389096.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=675ce8f83f267d329edd934147f938e0\" alt=\"年間10000人の来館者を管理するEC Systemの秘密.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/cfb2ee24-9edd-9dc8-d04e-311f24389096.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2Fcfb2ee24-9edd-9dc8-d04e-311f24389096.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0d8a12f684923567387312fc989f0188 1x\" loading=\"lazy\"></a>\n</li>\n</ul>\n<p data-sourcepos=\"29:1-29:186\">そこで普段Flurtterを使ったモバイルアプリ開発を行っているので、Flutterで上記を解決できるプラットフォームが作れないか検討しました。</p>\n<h1 data-sourcepos=\"31:1-31:15\">\n<span id=\"flutterとは\" class=\"fragment\"></span><a href=\"#flutter%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Flutterとは</h1>\n<p data-sourcepos=\"32:1-33:159\">Flutterは、2018年にGoogleによって開発されたオープンソースのUIのSDKで,単一のコードベースから、Android、iOS、向けのアプリケーションを開発することができます。その後バージョン2系になってWeb版もリリースすることができるようになり、現在(2022)のバージョン3系 ではLinux、macOS、Windows、にも対応するようになりました。<br>\nFlutter webでどこまでのことができるのか気になり,「試しに作ってみよう」というそんな軽い気持ちで作りはじました。</p>\n<h1 data-sourcepos=\"35:1-35:10\">\n<span id=\"version1\" class=\"fragment\"></span><a href=\"#version1\"><i class=\"fa fa-link\"></i></a>version1</h1>\n<p data-sourcepos=\"36:1-36:211\">まずはFlutterで以下のように「利用登録画面」と「利用延長・利用スペースの変更」画面を構成し、スプレッドシートから読み書きができるようにしました。</p>\n<h4 data-sourcepos=\"37:1-37:29\">\n<span id=\"利用登録画面\" class=\"fragment\"></span><a href=\"#%E5%88%A9%E7%94%A8%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2\"><i class=\"fa fa-link\"></i></a>「利用登録画面」</h4>\n<p data-sourcepos=\"38:1-39:163\">会員番号と利用スペースを入力するとスプレッドシートに利用状況が書き込まれる<br>\n<a href=\"https://camo.qiitausercontent.com/f485e27ea8681540e187e612975e48e187372b42/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f37373764303235352d303834302d363531322d386635642d6231323766356165663462612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F777d0255-0840-6512-8f5d-b127f5aef4ba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=92f85ddee860b070ada8ef7046a9da03\" alt=\"スクリーンショット 2022-12-05 14.06.16.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/777d0255-0840-6512-8f5d-b127f5aef4ba.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F777d0255-0840-6512-8f5d-b127f5aef4ba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e7c3b8dbe4c43bc75a076e68ef74f9fd 1x\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"40:1-40:59\">\n<span id=\"利用延長利用スペースの変更画面\" class=\"fragment\"></span><a href=\"#%E5%88%A9%E7%94%A8%E5%BB%B6%E9%95%B7%E5%88%A9%E7%94%A8%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%AE%E5%A4%89%E6%9B%B4%E7%94%BB%E9%9D%A2\"><i class=\"fa fa-link\"></i></a>「利用延長・利用スペースの変更画面」</h4>\n<p data-sourcepos=\"41:1-43:163\">スペース別に利用状況が閲覧できるようにし、そこから利用延長・利用スペースの変更に対応できる。<br>\n＊基本的に施設利用は2時間となっており、利用時間が2時間を超えると利用者は延長申請をする必要があるため。<br>\n<a href=\"https://camo.qiitausercontent.com/59c331c7191312e10592797667b6e3163d199c7f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f63303265346536622d336438372d343761372d376438362d6334613561353162633436642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2Fc02e4e6b-3d87-47a7-7d86-c4a5a51bc46d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=74b48b0c26a11cbff457c7a5060a5381\" alt=\"スクリーンショット 2022-12-05 14.07.28.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/c02e4e6b-3d87-47a7-7d86-c4a5a51bc46d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2Fc02e4e6b-3d87-47a7-7d86-c4a5a51bc46d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f3e17d09d85a40277d2993a7c253399 1x\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"44:1-44:26\">\n<span id=\"改善されたこと\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E5%96%84%E3%81%95%E3%82%8C%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>改善されたこと</h4>\n<ul data-sourcepos=\"45:1-46:74\">\n<li data-sourcepos=\"45:1-45:89\">入力項目が激減、入力時間が1/3以下に抑えられるようになった！</li>\n<li data-sourcepos=\"46:1-46:74\">誰が使っているかスペース別にわかるようになった！</li>\n</ul>\n<h4 data-sourcepos=\"47:1-47:11\">\n<span id=\"課題\" class=\"fragment\"></span><a href=\"#%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>課題</h4>\n<ul data-sourcepos=\"48:1-51:0\">\n<li data-sourcepos=\"48:1-48:64\">画面が2つあり,画面遷移をしなくてはならない</li>\n<li data-sourcepos=\"49:1-49:130\">「利用延長・利用スペースの変更画面」が見づらい(ぱっと見誰が何を使っているかわからない)</li>\n<li data-sourcepos=\"50:1-51:0\">スプレッドシートへの読み書きが遅い(スプレッドシート側の問題？)</li>\n</ul>\n<h1 data-sourcepos=\"52:1-52:10\">\n<span id=\"version2\" class=\"fragment\"></span><a href=\"#version2\"><i class=\"fa fa-link\"></i></a>version2</h1>\n<p data-sourcepos=\"53:1-56:163\">2つあったページを1つにまとめ、どこに誰がいるのか一括でわかるようにUIを変更<br>\nセルをタップすると入力画面が出てきて登録できます。<br>\n<a href=\"https://camo.qiitausercontent.com/2a15772be080d0d50f3be67bcacb32df02a79a7d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f30303964663164312d323033612d303836352d623466362d3234356465333663336366612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F009df1d1-203a-0865-b4f6-245de36c3cfa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15c49b4d21adf060348ea11735679cfc\" alt=\"スクリーンショット 2022-12-05 15.22.16.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/009df1d1-203a-0865-b4f6-245de36c3cfa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F009df1d1-203a-0865-b4f6-245de36c3cfa.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c0c6c3d0b494e2efc956404b7cb0bc12 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/010cf1d5134f40373d79083563e400bb1464451d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f36666530316464642d663563392d646535362d376232332d6239386439376337663932642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F6fe01ddd-f5c9-de56-7b23-b98d97c7f92d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5b46a26d620a254fd68e366a8fdedfe4\" alt=\"スクリーンショット 2022-12-05 15.30.12.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/6fe01ddd-f5c9-de56-7b23-b98d97c7f92d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F6fe01ddd-f5c9-de56-7b23-b98d97c7f92d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9adeb2626502e6788f2035fdf7b4ccc5 1x\" loading=\"lazy\"></a></p>\n<h4 data-sourcepos=\"57:1-57:26\">\n<span id=\"改善されたこと-1\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E5%96%84%E3%81%95%E3%82%8C%E3%81%9F%E3%81%93%E3%81%A8-1\"><i class=\"fa fa-link\"></i></a>改善されたこと</h4>\n<ul data-sourcepos=\"58:1-60:0\">\n<li data-sourcepos=\"58:1-58:43\">ページが1つになりシンプルに!</li>\n<li data-sourcepos=\"59:1-60:0\">利用状況が一目でわかるようになりました！</li>\n</ul>\n<h4 data-sourcepos=\"61:1-61:11\">\n<span id=\"課題-1\" class=\"fragment\"></span><a href=\"#%E8%AA%B2%E9%A1%8C-1\"><i class=\"fa fa-link\"></i></a>課題</h4>\n<ul data-sourcepos=\"62:1-63:0\">\n<li data-sourcepos=\"62:1-63:0\">UIに統一感がなく、入力ミスを誘発させてしまっている</li>\n</ul>\n<h1 data-sourcepos=\"64:1-64:10\">\n<span id=\"version3\" class=\"fragment\"></span><a href=\"#version3\"><i class=\"fa fa-link\"></i></a>version3</h1>\n<p data-sourcepos=\"65:1-68:163\">さらにUI・UXを突き詰めていきました。<br>\nバラバラだったボタンを属性や配置に気をつけながら,無駄のないUIへ仕上げていきました<br>\n<a href=\"https://camo.qiitausercontent.com/5a213d15062f2f05b611489cea69c5f4fa7c1f4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f33343065396261352d643036312d633230332d323136362d6132336432323761633962342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F340e9ba5-d061-c203-2166-a23d227ac9b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b306f5adca205d03f71f1ba2bd65931\" alt=\"スクリーンショット 2022-12-05 15.36.08.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/340e9ba5-d061-c203-2166-a23d227ac9b4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F340e9ba5-d061-c203-2166-a23d227ac9b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=813672e6f5d61a17f95e7b35a742653a 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/b7b6a131c66d5d713839399eca39dd72fd9c1003/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f38376239613864662d363838302d386562392d333462382d3335373133626163666639312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F87b9a8df-6880-8eb9-34b8-35713bacff91.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e37c4a0494e45fc40790a18fddc92bd2\" alt=\"スクリーンショット 2022-12-05 15.36.16.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/87b9a8df-6880-8eb9-34b8-35713bacff91.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F87b9a8df-6880-8eb9-34b8-35713bacff91.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=97ee45f75c930fcf07adb8a462cbf0b2 1x\" loading=\"lazy\"></a></p>\n<h1 data-sourcepos=\"70:1-70:10\">\n<span id=\"version4\" class=\"fragment\"></span><a href=\"#version4\"><i class=\"fa fa-link\"></i></a>version4</h1>\n<p data-sourcepos=\"71:1-74:115\">スプレットシートをDBとして扱うのに限界を感じてきたため、Firebaseを新たに導入し、スプレットシート・Firestore両方へ同時に描き出せるようにしました。<br>\n<a href=\"https://camo.qiitausercontent.com/3932cf589c9aadfd90e3bdec8c870a278f4aac9a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3534343833392f32623365653436612d636530352d653462302d626662312d6664386630386533666132382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F2b3ee46a-ce05-e4b0-bfb1-fd8f08e3fa28.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=96152c9cac8ab98fd11619dfc492f78e\" alt=\"スクリーンショット 2022-12-05 15.41.14.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/2b3ee46a-ce05-e4b0-bfb1-fd8f08e3fa28.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F544839%2F2b3ee46a-ce05-e4b0-bfb1-fd8f08e3fa28.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=bcc0c3a7e1543ea8d7448a0bb5768698 1x\" loading=\"lazy\"></a><br>\nFirebaseから読み込み書きこみをメインにさせることで、データ反映の速度は格段にあがり入力修正機能や利用者検索機能などを導入することができるようになりました。<br>\nまたFirebase Authを利用することでセキュリティーを強化させることにも成功しました。</p>\n<h1 data-sourcepos=\"76:1-76:31\">\n<span id=\"flutter-webが良かった点\" class=\"fragment\"></span><a href=\"#flutter-web%E3%81%8C%E8%89%AF%E3%81%8B%E3%81%A3%E3%81%9F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>Flutter webが良かった点</h1>\n<ul data-sourcepos=\"77:1-80:0\">\n<li data-sourcepos=\"77:1-77:62\">マテリアルデザインはモバイルと同様に動く</li>\n<li data-sourcepos=\"78:1-78:89\">css書かなくていい！(元々Flutterを使っていたのもあって楽でした)</li>\n<li data-sourcepos=\"79:1-80:0\">go_routerパッケージで認証の有無から画面遷移させることができる(未ログインだったらlogin画面に遷移するように)</li>\n</ul>\n<h1 data-sourcepos=\"81:1-81:40\">\n<span id=\"flutter-webがビミョーだった点\" class=\"fragment\"></span><a href=\"#flutter-web%E3%81%8C%E3%83%93%E3%83%9F%E3%83%A7%E3%83%BC%E3%81%A0%E3%81%A3%E3%81%9F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>Flutter webがビミョーだった点</h1>\n<ul data-sourcepos=\"82:1-84:0\">\n<li data-sourcepos=\"82:1-82:61\">CanvasKitがいまいち(文字化けをたまに起こす)</li>\n<li data-sourcepos=\"83:1-84:0\">パフォーマンスがいまいち(開くのに時間がかかったりなど)</li>\n</ul>\n<p data-sourcepos=\"85:1-86:142\">Flutterはバージョンがすざましい速度で上がってきているので,現状課題になってきていることも気づいたら解決されていそうで今後も期待です。<br>\nうとうとしていたらすぐに取り残させるので今後もFlutterの新機能、技術をキャッチアップしていきます！</p>\n<h1 data-sourcepos=\"88:1-88:23\">\n<span id=\"好きなラーメン\" class=\"fragment\"></span><a href=\"#%E5%A5%BD%E3%81%8D%E3%81%AA%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3\"><i class=\"fa fa-link\"></i></a>好きなラーメン</h1>\n<h3 data-sourcepos=\"89:1-89:102\">\n<span id=\"トマトラーメン元祖トマトラーメンと辛麺と元祖トマトもつ鍋-三味333\" class=\"fragment\"></span><a href=\"#%E3%83%88%E3%83%9E%E3%83%88%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3%E5%85%83%E7%A5%96%E3%83%88%E3%83%9E%E3%83%88%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3%E3%81%A8%E8%BE%9B%E9%BA%BA%E3%81%A8%E5%85%83%E7%A5%96%E3%83%88%E3%83%9E%E3%83%88%E3%82%82%E3%81%A4%E9%8D%8B-%E4%B8%89%E5%91%B3333\"><i class=\"fa fa-link\"></i></a>トマトラーメン[元祖トマトラーメンと辛麺と元祖トマトもつ鍋 三味(333)]</h3>\n<p data-sourcepos=\"90:1-91:161\">麺は細麺ぽいラーメン麺で食べやすくトマトの酸味とスープの旨みが程よい感じに合わさってとても美味しかったです。残ったスープでチーズリゾット(+¥200くらい)を作ってくれるのでおすすめです。<br>\nhaooy hour(14:00~19:00)になると「餃子食べ放題」もしくは「ドリンク(アルコール含め)飲み放題」を1時間500円でやってます！</p>\n<p data-sourcepos=\"93:1-93:25\"><a href=\"\" target=\"_blank\"><img src=\"\" alt=\"Something went wrong\" loading=\"lazy\"></a></p>\n",
    "body": "# エンジニアカフェについて\nエンジニアカフェとは,エンジニアがより先鋭的なチャレンジやスキルの幅を広げることができるようにという想いから、官民一体で生まれたエンジニアのための施設です。\n普段はコワーキングスペースとして無料で開放しており、他にもエンジニアに関わる方、エンジニアを目指す方からの相談・サポートやエンジニア同士が交流したり知見を深めあうことができるイベント等を開催しております。\nエンジニアカフェの施設ですが\n- 開放的な空間で作業できる「メインホール」\n- 静かな空間で集中される方のための「集中スペース」\n- リラックスできる空間で作業できる「underスペース」\n- 加工機を使った工作ができる「Maker'sスペース」\n- 少人数で会議ができる「ミーティングスペース」\n\nと様々なシーンで使用できるスペースが用意されています。\nぜひお立ち寄りください！\nhttps://engineercafe.jp/ja/\n\n# 概要\n今回はエンジニアカフェのスペース利用者を一括管理できるサイトを作りました。\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pJK6BVYyrUE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n# 当初の仕組み\n元々エンジニアカフェでは利用者情報はGoogle Form とGoogle Spreadsheetを使って登録していました。\n会員番号,利用時間,利用人数,利用時間をFormに入力し、その情報がSpreadsheet上に記録されていくものです。\nしかしこの方法では以下の点で不便でした。\n- データの書き換え、削除ができない(誤入力した時がめんどくさい)\n- 誰がどこを使っているのかすぐに把握できない。(スプレッドシートから参照しなければいけない)\n- 入力に 20~30s/ユーザー ほどかかる。(入力項目が無駄に多い)\n![年間10000人の来館者を管理するEC Systemの秘密.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/cfb2ee24-9edd-9dc8-d04e-311f24389096.png)\n\nそこで普段Flurtterを使ったモバイルアプリ開発を行っているので、Flutterで上記を解決できるプラットフォームが作れないか検討しました。\n\n# Flutterとは\nFlutterは、2018年にGoogleによって開発されたオープンソースのUIのSDKで,単一のコードベースから、Android、iOS、向けのアプリケーションを開発することができます。その後バージョン2系になってWeb版もリリースすることができるようになり、現在(2022)のバージョン3系 ではLinux、macOS、Windows、にも対応するようになりました。\nFlutter webでどこまでのことができるのか気になり,「試しに作ってみよう」というそんな軽い気持ちで作りはじました。\n\n# version1\nまずはFlutterで以下のように「利用登録画面」と「利用延長・利用スペースの変更」画面を構成し、スプレッドシートから読み書きができるようにしました。\n#### 「利用登録画面」\n会員番号と利用スペースを入力するとスプレッドシートに利用状況が書き込まれる\n![スクリーンショット 2022-12-05 14.06.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/777d0255-0840-6512-8f5d-b127f5aef4ba.png)\n#### 「利用延長・利用スペースの変更画面」\nスペース別に利用状況が閲覧できるようにし、そこから利用延長・利用スペースの変更に対応できる。\n＊基本的に施設利用は2時間となっており、利用時間が2時間を超えると利用者は延長申請をする必要があるため。\n![スクリーンショット 2022-12-05 14.07.28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/c02e4e6b-3d87-47a7-7d86-c4a5a51bc46d.png)\n#### 改善されたこと\n- 入力項目が激減、入力時間が1/3以下に抑えられるようになった！\n- 誰が使っているかスペース別にわかるようになった！\n#### 課題\n- 画面が2つあり,画面遷移をしなくてはならない\n- 「利用延長・利用スペースの変更画面」が見づらい(ぱっと見誰が何を使っているかわからない)\n- スプレッドシートへの読み書きが遅い(スプレッドシート側の問題？)\n\n# version2\n2つあったページを1つにまとめ、どこに誰がいるのか一括でわかるようにUIを変更\nセルをタップすると入力画面が出てきて登録できます。\n![スクリーンショット 2022-12-05 15.22.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/009df1d1-203a-0865-b4f6-245de36c3cfa.png)\n![スクリーンショット 2022-12-05 15.30.12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/6fe01ddd-f5c9-de56-7b23-b98d97c7f92d.png)\n#### 改善されたこと\n- ページが1つになりシンプルに!\n- 利用状況が一目でわかるようになりました！\n\n#### 課題\n- UIに統一感がなく、入力ミスを誘発させてしまっている\n\n# version3\nさらにUI・UXを突き詰めていきました。\nバラバラだったボタンを属性や配置に気をつけながら,無駄のないUIへ仕上げていきました\n![スクリーンショット 2022-12-05 15.36.08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/340e9ba5-d061-c203-2166-a23d227ac9b4.png)\n![スクリーンショット 2022-12-05 15.36.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/87b9a8df-6880-8eb9-34b8-35713bacff91.png)\n\n# version4\nスプレットシートをDBとして扱うのに限界を感じてきたため、Firebaseを新たに導入し、スプレットシート・Firestore両方へ同時に描き出せるようにしました。\n![スクリーンショット 2022-12-05 15.41.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/544839/2b3ee46a-ce05-e4b0-bfb1-fd8f08e3fa28.png)\nFirebaseから読み込み書きこみをメインにさせることで、データ反映の速度は格段にあがり入力修正機能や利用者検索機能などを導入することができるようになりました。\nまたFirebase Authを利用することでセキュリティーを強化させることにも成功しました。\n\n# Flutter webが良かった点\n- マテリアルデザインはモバイルと同様に動く\n- css書かなくていい！(元々Flutterを使っていたのもあって楽でした)\n- go_routerパッケージで認証の有無から画面遷移させることができる(未ログインだったらlogin画面に遷移するように)\n\n# Flutter webがビミョーだった点\n- CanvasKitがいまいち(文字化けをたまに起こす)\n- パフォーマンスがいまいち(開くのに時間がかかったりなど)\n\nFlutterはバージョンがすざましい速度で上がってきているので,現状課題になってきていることも気づいたら解決されていそうで今後も期待です。\nうとうとしていたらすぐに取り残させるので今後もFlutterの新機能、技術をキャッチアップしていきます！\n\n# 好きなラーメン\n### トマトラーメン[元祖トマトラーメンと辛麺と元祖トマトもつ鍋 三味(333)]\n麺は細麺ぽいラーメン麺で食べやすくトマトの酸味とスープの旨みが程よい感じに合わさってとても美味しかったです。残ったスープでチーズリゾット(+¥200くらい)を作ってくれるのでおすすめです。\nhaooy hour(14:00~19:00)になると「餃子食べ放題」もしくは「ドリンク(アルコール含め)飲み放題」を1時間500円でやってます！\n\n![Something went wrong]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-05T16:23:13+09:00",
    "group": null,
    "id": "163c2a7f2ee578390aa5",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      },
      {
        "name": "flutter_web",
        "versions": []
      }
    ],
    "title": "Flutterでコワーキングスペースの管理画面を作ったお話",
    "updated_at": "2022-12-05T16:42:55+09:00",
    "url": "https://qiita.com/mizuki-chi/items/163c2a7f2ee578390aa5",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "mizuki-viz",
      "id": "mizuki-chi",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 544839,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/544839/b4a0fac554bfa1ab65304c11568b69650509f0d5/large.png?1669871394",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-3:36\">こんにちは、がきけです！<br>\nFlutterでのスマホアプリ開発中になかなか抜けられなかったエラーがあったので、<br>\n備忘としてまとめました！</p>\n<h2 data-sourcepos=\"5:1-5:75\">\n<span id=\"ビルド中に状態変更したらあかんよというエラー\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E4%B8%AD%E3%81%AB%E7%8A%B6%E6%85%8B%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E3%82%89%E3%81%82%E3%81%8B%E3%82%93%E3%82%88%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ビルド中に状態変更したらあかんよ」というエラー</h2>\n<h4 data-sourcepos=\"7:1-7:29\">\n<span id=\"やりたかったこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたかったこと</h4>\n<p data-sourcepos=\"8:1-11:173\">今回作っているのはカレンダーを表示する機能です。<br>\n下の画像で、うっすらグレーの背景になっている日付部分について、<br>\n現在表示している月の日付を自動生成する処理をしたかったんですね。<br>\n<a href=\"https://camo.qiitausercontent.com/218163c17d1a479bf565fd1f3fe9d6a0f5acf476/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313038303632362f61363866613336612d626631642d663263322d323234312d3335616433633862346233312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1080626%2Fa68fa36a-bf1d-f2c2-2241-35ad3c8b4b31.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7ba7c075234bfc0a37ae4bcfcdadce70\" alt=\"Calendar Screen Screen Shot - iPhone SE (3rd generation).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1080626/a68fa36a-bf1d-f2c2-2241-35ad3c8b4b31.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1080626%2Fa68fa36a-bf1d-f2c2-2241-35ad3c8b4b31.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=605939bbe43bd5c3cd639da63296c5dc 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"13:1-16:54\">該当するコードは以下の通りです。（直接関係ないコードは省略しています）<br>\nProviderで日付を生成するメソッドを管理していたので、<br>\n日付生成メソッド（createDisplayedCalendar()）が書かれているProviderをこんにちはして、<br>\nその後日付生成メソッドを呼び出すと。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"17:1-22:3\"><div class=\"highlight\"><pre><code><span class=\"n\">Widget</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"n\">calendarLogic</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">&lt;</span><span class=\"n\">CalendarLogic</span><span class=\"o\">&gt;(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"n\">calendarLogic</span><span class=\"o\">.</span><span class=\"na\">createDisplayedCalendar</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h4 data-sourcepos=\"24:1-24:23\">\n<span id=\"エラーが発生\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F\"><i class=\"fa fa-link\"></i></a>エラーが発生</h4>\n<p data-sourcepos=\"25:1-25:111\">さて、ちゃんと動くかなーということで走らせてみたところ、以下エラーが発生。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"26:1-29:3\"><div class=\"highlight\"><pre><code>The following assertion was thrown while dispatching notifications for CalendarLogic:\nsetState() or markNeedsBuild() called during build.\n</code></pre></div></div>\n<p data-sourcepos=\"30:1-32:141\">ビルド中に日付を生成してしまったことが原因の模様。<br>\n要は「今一生懸命画面作ってるんだから、その最中に画面の中身変えるのやめてくれない？？？」ということですね。<br>\n一生懸命開発しているときに仕様変更されるようなものですから、そりゃ怒られますね。ごめんなさい。</p>\n<p data-sourcepos=\"34:1-37:34\">じゃあ日付を生成するタイミングを変えればいいんだろうけれども、<br>\nどうやって変えればいいの？？？<br>\nということで、色々調べた結果、以下の方法に落ち着きました。<br>\nFuture(() =&gt; ); で囲むだけ。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"38:1-43:3\"><div class=\"highlight\"><pre><code><span class=\"n\">Widget</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"n\">calendarLogic</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">&lt;</span><span class=\"n\">CalendarLogic</span><span class=\"o\">&gt;(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n    <span class=\"n\">Future</span><span class=\"o\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">calendarLogic</span><span class=\"o\">.</span><span class=\"na\">createDisplayedCalendar</span><span class=\"o\">());</span> <span class=\"c1\">// ここ</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"45:1-46:90\">Futureで囲まれた処理は後回しにされるので、<br>\n怒られないタイミングで処理が呼び出されることになるんですね。</p>\n<p data-sourcepos=\"48:1-48:87\">おかげさまで怒られずに無事日付を生成することができました。</p>\n<h2 data-sourcepos=\"50:1-50:18\">\n<span id=\"今後の課題\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>今後の課題</h2>\n<p data-sourcepos=\"51:1-53:48\">そもそもビルド中の処理の順番ってどうなってるの？？？というところや、<br>\nFlutterの状態管理についてのあれこれについてはかなり理解が浅いなーと気づいたので、<br>\n調べてまとめたいなーと思います。</p>\n<p data-sourcepos=\"55:1-58:51\">ただ、現状Flutter公式ドキュメント含め、教材が基本的に英語なので、<br>\n読んでも細かいニュアンスがわからなかったり、内容の理解が合っているのかわからなかったりするのが悩みどころ。<br>\n日本語で状態管理についてわかりやすく解説されている記事などがありましたら、<br>\n教えていただけるとありがたいです。</p>\n<p data-sourcepos=\"60:1-62:63\">また、今回はFutureで囲んで解決！としましたが、<br>\n「もっといい方法があるよー」とか、「こんなんどう？」などありましたら、<br>\nコメント等で教えていただければ嬉しいです。</p>\n",
    "body": "こんにちは、がきけです！\nFlutterでのスマホアプリ開発中になかなか抜けられなかったエラーがあったので、\n備忘としてまとめました！\n\n## 「ビルド中に状態変更したらあかんよ」というエラー\n\n#### やりたかったこと\n今回作っているのはカレンダーを表示する機能です。\n下の画像で、うっすらグレーの背景になっている日付部分について、\n現在表示している月の日付を自動生成する処理をしたかったんですね。\n![Calendar Screen Screen Shot - iPhone SE (3rd generation).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1080626/a68fa36a-bf1d-f2c2-2241-35ad3c8b4b31.png)\n\n該当するコードは以下の通りです。（直接関係ないコードは省略しています）\nProviderで日付を生成するメソッドを管理していたので、\n日付生成メソッド（createDisplayedCalendar()）が書かれているProviderをこんにちはして、\nその後日付生成メソッドを呼び出すと。\n```dart\nWidget build(BuildContext context) {\n    final calendarLogic = Provider.of<CalendarLogic>(context);\n    calendarLogic.createDisplayedCalendar();\n}\n```\n\n#### エラーが発生\nさて、ちゃんと動くかなーということで走らせてみたところ、以下エラーが発生。\n```\nThe following assertion was thrown while dispatching notifications for CalendarLogic:\nsetState() or markNeedsBuild() called during build.\n```\nビルド中に日付を生成してしまったことが原因の模様。\n要は「今一生懸命画面作ってるんだから、その最中に画面の中身変えるのやめてくれない？？？」ということですね。\n一生懸命開発しているときに仕様変更されるようなものですから、そりゃ怒られますね。ごめんなさい。\n\nじゃあ日付を生成するタイミングを変えればいいんだろうけれども、\nどうやって変えればいいの？？？\nということで、色々調べた結果、以下の方法に落ち着きました。\nFuture(() => ); で囲むだけ。\n```dart\nWidget build(BuildContext context) {\n    final calendarLogic = Provider.of<CalendarLogic>(context);\n    Future(() => calendarLogic.createDisplayedCalendar()); // ここ\n}\n```\n\nFutureで囲まれた処理は後回しにされるので、\n怒られないタイミングで処理が呼び出されることになるんですね。\n\nおかげさまで怒られずに無事日付を生成することができました。\n\n## 今後の課題\nそもそもビルド中の処理の順番ってどうなってるの？？？というところや、\nFlutterの状態管理についてのあれこれについてはかなり理解が浅いなーと気づいたので、\n調べてまとめたいなーと思います。\n\nただ、現状Flutter公式ドキュメント含め、教材が基本的に英語なので、\n読んでも細かいニュアンスがわからなかったり、内容の理解が合っているのかわからなかったりするのが悩みどころ。\n日本語で状態管理についてわかりやすく解説されている記事などがありましたら、\n教えていただけるとありがたいです。\n\nまた、今回はFutureで囲んで解決！としましたが、\n「もっといい方法があるよー」とか、「こんなんどう？」などありましたら、\nコメント等で教えていただければ嬉しいです。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-05T15:05:24+09:00",
    "group": null,
    "id": "cfb3af0dcfe64c36b93c",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "【Flutter】「setState() or markNeedsBuild() called during build.」でつまずいたのでメモ書き",
    "updated_at": "2022-12-05T15:05:24+09:00",
    "url": "https://qiita.com/gakike5/items/cfb3af0dcfe64c36b93c",
    "user": {
      "description": "Flutterでスマホアプリを個人開発中",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "gakike5",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 1080626,
      "profile_image_url": "https://pbs.twimg.com/profile_images/1289092939776286720/OKEGEgUm_bigger.jpg",
      "team_only": false,
      "twitter_screen_name": "gakike5",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h2>\n<p data-sourcepos=\"3:1-4:115\">Dartはオブジェクト指向言語で<code>Null</code>(Objectの子孫)以外の全てのオブジェクトがクラスのインスタンスです。<br>\nその為、Dartを学ぶ上でとても大切なクラスについて使い方をざっくりまとめました。</p>\n<p data-sourcepos=\"6:1-6:156\">※概念的な説明(クラスとは・インスタンスとは)はなく、Dartでクラスを使用するメモのようなものになっています。</p>\n<h2 data-sourcepos=\"9:1-9:27\">\n<span id=\"クラスの宣言方法\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%A3%E8%A8%80%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>クラスの宣言方法</h2>\n<p data-sourcepos=\"11:1-11:104\"><code>class</code> キーワードの後に宣言したいクラス名を記載することで宣言できます。</p>\n<p data-sourcepos=\"13:1-13:93\">下記に具体例を示しましたが、大枠このような構成になっています。</p>\n<div class=\"code-frame\" data-lang=\"jsx\" data-sourcepos=\"15:1-21:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nx\">クラスの名前</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// インスタンス変数</span>\n  <span class=\"c1\">// コンストラクタ</span>\n  <span class=\"c1\">// インスタンスメソッド</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"23:1-23:55\">下記が実際のDartのクラスの具体例です。</p>\n<p data-sourcepos=\"25:1-25:126\">インスタンス変数の宣言方法がやや異なっていますが、それぞれコメントで補足しています。</p>\n<ul data-sourcepos=\"27:1-29:0\">\n<li data-sourcepos=\"27:1-27:77\">全てのインスタンス変数は内部的にgetterを与えられます</li>\n<li data-sourcepos=\"28:1-29:0\">finalで宣言されていないインスタンス変数は同じくsetterも与えられます</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"30:1-45:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n  <span class=\"c1\">// インスタンス変数</span>\n  <span class=\"kt\">int</span><span class=\"o\">?</span> <span class=\"n\">age</span><span class=\"o\">;</span> <span class=\"c1\">// null許容型</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span> <span class=\"c1\">// final変数</span>\n  <span class=\"kt\">String</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"s\">'東京都'</span><span class=\"o\">;</span> <span class=\"c1\">// 初期値を設定</span>\n\n  <span class=\"c1\">// コンストラクタ</span>\n  <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n\n  <span class=\"c1\">// インスタンスメソッド</span>\n  <span class=\"kt\">void</span> <span class=\"n\">introduce</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'私は</span><span class=\"si\">$name</span><span class=\"s\">です'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"47:1-47:48\">\n<span id=\"named-factoryredirectingconstructors\" class=\"fragment\"></span><a href=\"#named-factoryredirectingconstructors\"><i class=\"fa fa-link\"></i></a>(Named ・Factory・Redirecting)Constructors</h3>\n<p data-sourcepos=\"49:1-50:137\">Dartには幾つかの種類のコンストラクタが存在しているらしく、<br>\n下記の記事を見るとそれぞれの特徴、実際の使われ方がとても分かりやすく説明されていました🙇🙇</p>\n<p data-sourcepos=\"52:1-52:181\"><a href=\"https://zenn.dev/iwaku/articles/2020-12-07-iwaku#redirecting-constructors\" rel=\"nofollow noopener\" target=\"_blank\">【Dart】簡単なユーザクラスを利用してNamed,Redirecting,Factoryコンストラクタ理解</a></p>\n<h2 data-sourcepos=\"54:1-54:93\">\n<span id=\"インスタンスオブジェクトの作成方法変数関数のアクセス方法\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E6%96%B9%E6%B3%95%E5%A4%89%E6%95%B0%E9%96%A2%E6%95%B0%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>インスタンス(オブジェクト)の作成方法・変数/関数のアクセス方法</h2>\n<p data-sourcepos=\"56:1-56:105\">クラス名とコンストラクタを使用することでインスタンスの作成が可能です。</p>\n<p data-sourcepos=\"58:1-58:84\">上記で作成したPersonクラスのインスタンスを作成してみます。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"60:1-68:3\"><div class=\"highlight\"><pre><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">taro</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"s\">'太郎'</span><span class=\"o\">);</span>\n  <span class=\"n\">taro</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n  <span class=\"n\">taro</span><span class=\"o\">.</span><span class=\"na\">address</span> <span class=\"o\">=</span> <span class=\"s\">'京都府'</span><span class=\"o\">;</span>\n\n  <span class=\"n\">taro</span><span class=\"o\">.</span><span class=\"na\">introduce</span><span class=\"o\">();</span> <span class=\"c1\">// =&gt; 私は太郎です。京都府に住んでいる10歳です。</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"70:1-70:9\">\n<span id=\"継承\" class=\"fragment\"></span><a href=\"#%E7%B6%99%E6%89%BF\"><i class=\"fa fa-link\"></i></a>継承</h2>\n<p data-sourcepos=\"72:1-72:94\"><code>extends</code> キーワードを使用することでクラスを継承することができます</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"74:1-80:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"kd\">extends</span> <span class=\"n\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kt\">String</span> <span class=\"n\">department</span><span class=\"o\">;</span>\n  <span class=\"c1\">// superで親クラスのコンストラクタも呼んでいる</span>\n  <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">department</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"82:1-82:70\">\n<span id=\"親クラスのインスタンス変数メソッドを上書き\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%B8%8A%E6%9B%B8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>親クラスのインスタンス変数・メソッドを上書き</h3>\n<p data-sourcepos=\"84:1-84:147\"><code>@override</code> キーワードを使用することで親クラスのインスタンス変数やメソッドを上書きすることが可能です。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"86:1-97:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"kd\">extends</span> <span class=\"n\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kt\">String</span> <span class=\"n\">department</span><span class=\"o\">;</span>\n\n  <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">department</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"kt\">void</span> <span class=\"n\">introduce</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'私は</span><span class=\"si\">$department</span><span class=\"s\">に所属しています。'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"99:1-99:27\">下記が実行結果です</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"101:1-106:3\"><div class=\"highlight\"><pre><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">employee1</span> <span class=\"o\">=</span> <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"s\">'花子'</span><span class=\"o\">,</span> <span class=\"s\">'営業'</span><span class=\"o\">);</span>\n  <span class=\"n\">employee1</span><span class=\"o\">.</span><span class=\"na\">introduce</span><span class=\"o\">();</span> <span class=\"c1\">//私は営業に所属しています。</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"108:1-108:142\">FlutterでステートレスなWidgetを作成する際に、<code>StatelessWidgets</code>等を継承して<code>build</code>メソッドをoverrideしますね。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"110:1-116:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">MyWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"118:1-118:100\">\n<span id=\"親クラスのインスタンス変数メソッドを継承されたクラスで呼び出す\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E7%B6%99%E6%89%BF%E3%81%95%E3%82%8C%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A7%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\"><i class=\"fa fa-link\"></i></a>親クラスのインスタンス変数・メソッドを継承されたクラスで呼び出す</h3>\n<p data-sourcepos=\"120:1-120:119\"><code>super</code> キーワードで親クラスのインスタンス変数やメソッドを呼び出すことが可能です。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"122:1-134:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"kd\">extends</span> <span class=\"n\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kt\">String</span> <span class=\"n\">department</span><span class=\"o\">;</span>\n\n  <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">department</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"kt\">void</span> <span class=\"n\">introduce</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">introduce</span><span class=\"o\">();</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'私は</span><span class=\"si\">$department</span><span class=\"s\">に所属しています。'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"136:1-136:39\">下記が実行結果になります。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"138:1-147:3\"><div class=\"highlight\"><pre><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">employee1</span> <span class=\"o\">=</span> <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"s\">'花子'</span><span class=\"o\">,</span> <span class=\"s\">'営業'</span><span class=\"o\">);</span>\n  <span class=\"n\">employee1</span><span class=\"o\">.</span><span class=\"na\">age</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">;</span>\n  <span class=\"n\">employee1</span><span class=\"o\">.</span><span class=\"na\">address</span> <span class=\"o\">=</span> <span class=\"s\">'東京都'</span><span class=\"o\">;</span>\n  <span class=\"n\">employee1</span><span class=\"o\">.</span><span class=\"na\">introduce</span><span class=\"o\">();</span> \n  <span class=\"c1\">// 私は花子です。東京都に住んでいる25歳です。</span>\n  <span class=\"c1\">// 私は営業に所属しています。</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"149:1-149:28\">\n<span id=\"abstract抽象クラス\" class=\"fragment\"></span><a href=\"#abstract%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9\"><i class=\"fa fa-link\"></i></a>Abstract(抽象)クラス</h2>\n<p data-sourcepos=\"151:1-151:133\">Abstract(抽象)クラスはインスタンス化することのできない継承されることを前提としたクラスです。</p>\n<p data-sourcepos=\"153:1-153:88\"><code>abstract</code> のキーワードをclassの前につけることで宣言が可能です。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"155:1-165:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">Animal</span> <span class=\"o\">{</span>\n  <span class=\"kt\">void</span> <span class=\"n\">walk</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Dog</span> <span class=\"kd\">extends</span> <span class=\"n\">Animal</span> <span class=\"o\">{</span>\n  <span class=\"kt\">void</span> <span class=\"n\">walk</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'歩けるんだ僕は'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"167:1-168:171\">FlutterのStatelessWidgetもAbstractクラスですね。<br>\n参照: <a href=\"https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/widgets/framework.dart#L520~L570\" rel=\"nofollow noopener\" target=\"_blank\">flutter/packages/flutter/lib/src/widgets/framework.dart</a></p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"170:1-180:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">StatelessWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">Widget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">StatelessWidget</span><span class=\"o\">({</span> <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">key</span> <span class=\"o\">});</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">StatelessElement</span> <span class=\"n\">createElement</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">StatelessElement</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@protected</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"182:1-182:57\">\n<span id=\"implicit-interfaces暗黙的インターフェース\" class=\"fragment\"></span><a href=\"#implicit-interfaces%E6%9A%97%E9%BB%99%E7%9A%84%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>Implicit Interfaces(暗黙的インターフェース)</h2>\n<p data-sourcepos=\"184:1-185:114\">Dartでは<code>Interface</code>といったキーワードは存在しません。<br>\n多言語(Java等)のInterfaceのような役割を行うために、<code>implements</code>キーワードを用います。</p>\n<p data-sourcepos=\"187:1-187:191\"><code>exntends</code>とは異なり、クラスに組み込むとそのクラス(暗黙的インターフェース)にあるメソッドや変数を全て実装(implement)する必要があります。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"190:1-213:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n  <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">introduce</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'私は</span><span class=\"si\">$name</span><span class=\"s\">です。'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// Personの持つ全ての要素を実装(implement)してあげる必要がある</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"kd\">implements</span> <span class=\"n\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n  <span class=\"kt\">String</span> <span class=\"n\">department</span><span class=\"o\">;</span>\n\n  <span class=\"n\">Employee</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">department</span><span class=\"o\">);</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">introduce</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'私は</span><span class=\"si\">$name</span><span class=\"s\">で、</span><span class=\"si\">$department</span><span class=\"s\">に所属しています。'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n<p data-sourcepos=\"216:1-216:134\">この辺の概念的な違い等は私の稚拙な説明より下記を読んで頂けると分かりやすいかと思います<img alt=\":bow:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f647.png\" title=\":bow:\" width=\"20\" loading=\"lazy\"></p>\n<ul data-sourcepos=\"218:1-221:0\">\n<li data-sourcepos=\"218:1-218:123\"><a href=\"https://zenn.dev/iwaku/articles/2020-12-16-iwaku\" rel=\"nofollow noopener\" target=\"_blank\">【Dart】abstract,mixin,extends,implements,with等の使い方基礎</a></li>\n<li data-sourcepos=\"219:1-219:131\"><a href=\"https://stackoverflow.com/questions/55295782/extends-versus-implements-versus-with\" rel=\"nofollow noopener\" target=\"_blank\">\"extends\" versus \"implements\" versus \"with\"</a></li>\n<li data-sourcepos=\"220:1-221:0\"><a href=\"https://www.topcoder.com/thrive/articles/dart-differences-between-extends-implements-and-mixin\" rel=\"nofollow noopener\" target=\"_blank\">DART - DIFFERENCES BETWEEN EXTENDS, IMPLEMENTS AND MIXIN</a></li>\n</ul>\n<h2 data-sourcepos=\"222:1-222:8\">\n<span id=\"mixin\" class=\"fragment\"></span><a href=\"#mixin\"><i class=\"fa fa-link\"></i></a>Mixin</h2>\n<p data-sourcepos=\"224:1-225:110\"><code>mixin</code>キーワードを使用することで拡張するメソッドや状態を定義することが可能です。<br>\n<code>with</code>キーワードを使用することで実際に定義したmixinを使用することができます。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"227:1-243:3\"><div class=\"highlight\"><pre><code><span class=\"n\">mixin</span> <span class=\"n\">Accounting</span> <span class=\"o\">{</span>\n  <span class=\"kt\">void</span> <span class=\"n\">fileTaxies</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'あ、確定申告代わりにしときましたよ'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">askAccountant</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'税理士に聞いてみましょう.....'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"k\">with</span> <span class=\"n\">Accounting</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span> <span class=\"c1\">// finalは初期化後に変更不可</span>\n\n  <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"245:1-245:27\">実行結果は下記です</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"247:1-252:3\"><div class=\"highlight\"><pre><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">taro</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">(</span><span class=\"s\">'太郎'</span><span class=\"o\">);</span>\n  <span class=\"n\">taro</span><span class=\"o\">.</span><span class=\"na\">fileTaxies</span><span class=\"o\">();</span> <span class=\"c1\">//あ、確定申告代わりにしときましたよ</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"254:1-254:217\">実際にmixinが役に立つケースの説明等に関しては<a href=\"https://resocoder.com/2019/07/21/mixins-in-dart-understand-dart-flutter-fundamentals-tutorial/\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>がとても分かりやすかったです。</p>\n<h2 data-sourcepos=\"256:1-256:33\">\n<span id=\"クラスメソッド変数\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%A4%89%E6%95%B0\"><i class=\"fa fa-link\"></i></a>クラスメソッド・変数</h2>\n<p data-sourcepos=\"257:1-257:116\"><code>static</code>キーワードを使用することでクラスメソッド・変数を定義することが可能です。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"259:1-269:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n  <span class=\"kd\">static</span> <span class=\"kd\">const</span> <span class=\"n\">initialAge</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n  <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"n\">printFeature</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">'足が２つ。腕も２つ。'</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"na\">initialAge</span><span class=\"o\">)</span> <span class=\"c1\">//=&gt; 0</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"na\">printFeature</span><span class=\"o\">()</span> <span class=\"c1\">//=&gt; '足が２つ。腕も２つ。'</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"271:1-271:9\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n<ul data-sourcepos=\"273:1-274:142\">\n<li data-sourcepos=\"273:1-273:175\">\n<a href=\"https://dart.dev/guides/language/language-tour#classes\" rel=\"nofollow noopener\" target=\"_blank\">A tour of the Dart languageのclasses</a>を読みながら書いたのでそちらを見て頂くのが正確です。</li>\n<li data-sourcepos=\"274:1-274:142\">さらに細かい正確な情報は<a href=\"https://dart.dev/guides/language/spec\" rel=\"nofollow noopener\" target=\"_blank\">Dart language specification</a>を見て頂ければと思います</li>\n</ul>\n",
    "body": "## 概要\n\nDartはオブジェクト指向言語で`Null`(Objectの子孫)以外の全てのオブジェクトがクラスのインスタンスです。\nその為、Dartを学ぶ上でとても大切なクラスについて使い方をざっくりまとめました。\n\n※概念的な説明(クラスとは・インスタンスとは)はなく、Dartでクラスを使用するメモのようなものになっています。\n\n\n## クラスの宣言方法\n\n`class` キーワードの後に宣言したいクラス名を記載することで宣言できます。\n\n下記に具体例を示しましたが、大枠このような構成になっています。\n\n```jsx\nclass クラスの名前 {\n  // インスタンス変数\n  // コンストラクタ\n  // インスタンスメソッド\n}\n```\n\n下記が実際のDartのクラスの具体例です。\n\nインスタンス変数の宣言方法がやや異なっていますが、それぞれコメントで補足しています。\n\n- 全てのインスタンス変数は内部的にgetterを与えられます\n- finalで宣言されていないインスタンス変数は同じくsetterも与えられます\n\n```dart\nclass Person {\n  // インスタンス変数\n  int? age; // null許容型\n  final String name; // final変数\n  String address = '東京都'; // 初期値を設定\n\n  // コンストラクタ\n  Person(this.name);\n\n  // インスタンスメソッド\n  void introduce() {\n    print('私は$nameです');\n  }\n}\n```\n\n### (Named ・Factory・Redirecting)Constructors\n\nDartには幾つかの種類のコンストラクタが存在しているらしく、\n下記の記事を見るとそれぞれの特徴、実際の使われ方がとても分かりやすく説明されていました🙇🙇\n\n[【Dart】簡単なユーザクラスを利用してNamed,Redirecting,Factoryコンストラクタ理解](https://zenn.dev/iwaku/articles/2020-12-07-iwaku#redirecting-constructors)\n\n## インスタンス(オブジェクト)の作成方法・変数/関数のアクセス方法\n\nクラス名とコンストラクタを使用することでインスタンスの作成が可能です。\n\n上記で作成したPersonクラスのインスタンスを作成してみます。\n\n```dart\nvoid main() {\n  final taro = Person('太郎');\n  taro.age = 10;\n  taro.address = '京都府';\n\n  taro.introduce(); // => 私は太郎です。京都府に住んでいる10歳です。\n}\n```\n\n## 継承\n\n`extends` キーワードを使用することでクラスを継承することができます\n\n```dart\nclass Employee extends Person {\n  String department;\n  // superで親クラスのコンストラクタも呼んでいる\n  Employee(String name, this.department) : super(name);\n}\n```\n\n### 親クラスのインスタンス変数・メソッドを上書き\n\n`@override` キーワードを使用することで親クラスのインスタンス変数やメソッドを上書きすることが可能です。\n\n```dart\nclass Employee extends Person {\n  String department;\n\n  Employee(String name, this.department) : super(name);\n\n  @override\n  void introduce() {\n    print('私は$departmentに所属しています。');\n  }\n}\n```\n\n下記が実行結果です\n\n```dart\nvoid main() {\n  final employee1 = Employee('花子', '営業');\n  employee1.introduce(); //私は営業に所属しています。\n}\n```\n\nFlutterでステートレスなWidgetを作成する際に、`StatelessWidgets`等を継承して`build`メソッドをoverrideしますね。\n\n```dart\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n  }\n}\n```\n\n### 親クラスのインスタンス変数・メソッドを継承されたクラスで呼び出す\n\n`super` キーワードで親クラスのインスタンス変数やメソッドを呼び出すことが可能です。\n\n```dart\nclass Employee extends Person {\n  String department;\n\n  Employee(String name, this.department) : super(name);\n\n  @override\n  void introduce() {\n    super.introduce();\n    print('私は$departmentに所属しています。');\n  }\n}\n```\n\n下記が実行結果になります。\n\n```dart\nvoid main() {\n  final employee1 = Employee('花子', '営業');\n  employee1.age = 25;\n  employee1.address = '東京都';\n  employee1.introduce(); \n  // 私は花子です。東京都に住んでいる25歳です。\n  // 私は営業に所属しています。\n}\n```\n\n## Abstract(抽象)クラス\n\nAbstract(抽象)クラスはインスタンス化することのできない継承されることを前提としたクラスです。\n\n`abstract` のキーワードをclassの前につけることで宣言が可能です。\n\n```dart\nabstract class Animal {\n  void walk();\n}\n\nclass Dog extends Animal {\n  void walk() {\n    print('歩けるんだ僕は');\n  }\n}\n```\n\nFlutterのStatelessWidgetもAbstractクラスですね。\n参照: [flutter/packages/flutter/lib/src/widgets/framework.dart](https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/widgets/framework.dart#L520~L570)\n\n```dart\nabstract class StatelessWidget extends Widget {\n  const StatelessWidget({ super.key });\n\n  @override\n  StatelessElement createElement() => StatelessElement(this);\n\n  @protected\n  Widget build(BuildContext context);\n}\n```\n\n## Implicit Interfaces(暗黙的インターフェース)\n\nDartでは`Interface`といったキーワードは存在しません。\n多言語(Java等)のInterfaceのような役割を行うために、`implements`キーワードを用います。\n\n`exntends`とは異なり、クラスに組み込むとそのクラス(暗黙的インターフェース)にあるメソッドや変数を全て実装(implement)する必要があります。\n\n\n```dart\nclass Person {\n  final String name;\n\n  Person(this.name);\n\n  void introduce() {\n    print('私は$nameです。');\n  }\n}\n\n// Personの持つ全ての要素を実装(implement)してあげる必要がある\nclass Employee implements Person {\n  final String name;\n  String department;\n\n  Employee(this.name, this.department);\n\n  void introduce() {\n    print('私は$nameで、$departmentに所属しています。');\n  }\n}\n\n```\n\n\nこの辺の概念的な違い等は私の稚拙な説明より下記を読んで頂けると分かりやすいかと思います:bow:\n\n- [【Dart】abstract,mixin,extends,implements,with等の使い方基礎](https://zenn.dev/iwaku/articles/2020-12-16-iwaku)\n- [\"extends\" versus \"implements\" versus \"with\"](https://stackoverflow.com/questions/55295782/extends-versus-implements-versus-with)\n- [DART - DIFFERENCES BETWEEN EXTENDS, IMPLEMENTS AND MIXIN](https://www.topcoder.com/thrive/articles/dart-differences-between-extends-implements-and-mixin)\n\n## Mixin\n\n`mixin`キーワードを使用することで拡張するメソッドや状態を定義することが可能です。\n`with`キーワードを使用することで実際に定義したmixinを使用することができます。\n\n```dart\nmixin Accounting {\n  void fileTaxies() {\n    print('あ、確定申告代わりにしときましたよ');\n  }\n\n  void askAccountant() {\n    print('税理士に聞いてみましょう.....');\n  }\n}\n\nclass Person with Accounting {\n  final String name; // finalは初期化後に変更不可\n\n  Person(this.name);\n}\n```\n\n実行結果は下記です\n\n```dart\nvoid main() {\n  final taro = Person('太郎');\n  taro.fileTaxies(); //あ、確定申告代わりにしときましたよ\n}\n```\n\n実際にmixinが役に立つケースの説明等に関しては[こちら](https://resocoder.com/2019/07/21/mixins-in-dart-understand-dart-flutter-fundamentals-tutorial/)がとても分かりやすかったです。\n\n## クラスメソッド・変数\n`static`キーワードを使用することでクラスメソッド・変数を定義することが可能です。\n\n```dart\nclass Person {\n  static const initialAge = 0;\n  static void printFeature() {\n    print('足が２つ。腕も２つ。');\n  }\n}\n\nprint(Person.initialAge) //=> 0\nPerson.printFeature() //=> '足が２つ。腕も２つ。'\n```\n\n## 参考\n\n- [A tour of the Dart languageのclasses](https://dart.dev/guides/language/language-tour#classes)を読みながら書いたのでそちらを見て頂くのが正確です。\n- さらに細かい正確な情報は[Dart language specification](https://dart.dev/guides/language/spec)を見て頂ければと思います\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-05T12:05:38+09:00",
    "group": null,
    "id": "9b227554059876c0da88",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "初心者",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "【Dart】クラスの基本的な使い方",
    "updated_at": "2022-12-05T12:05:38+09:00",
    "url": "https://qiita.com/k-penguin-sato/items/9b227554059876c0da88",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 1666,
      "followers_count": 509,
      "github_login_name": "K-Sato1995",
      "id": "k-penguin-sato",
      "items_count": 58,
      "linkedin_id": "",
      "location": "Tokyo Japan",
      "name": "K Sato",
      "organization": "",
      "permanent_id": 258219,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/258219/profile-images/1532390558",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h2 data-sourcepos=\"1:1-1:15\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n<p data-sourcepos=\"3:1-4:49\">皆さん好きなテキストエディタはなんですか？<br>\nvim？それともvim?もしかしてvimとか？</p>\n<p data-sourcepos=\"6:1-7:145\">私も一番好きなテキストエディタはvimです。<br>\nhjklでのカーソル移動、モード切り替えでの様々な操作。もうこれがないエディタではコードが書けません。</p>\n<p data-sourcepos=\"9:1-11:113\">では日常で一番使っているエディタはなんですか？<br>\n私はVSCodeです。<br>\n普段はFlutterを使っているのでFlutterの公式ドキュメントでもおすすめされているのが</p>\n<ul data-sourcepos=\"13:1-16:0\">\n<li data-sourcepos=\"13:1-13:8\">VSCode</li>\n<li data-sourcepos=\"14:1-14:16\">Android Studio</li>\n<li data-sourcepos=\"15:1-16:0\">Emacs</li>\n</ul>\n<p data-sourcepos=\"17:1-17:278\">なのでプラグインも豊富でvimキーバインドのプラグインもあり、他のフレームワークを使う際にも応用が利きやすいVSCodeを使用しています。(iPresenceでもVSCodeが推奨のエディタです、ペアプロとかしやすので)</p>\n<p data-sourcepos=\"19:1-19:183\">VSCodeのvimキーバインド プラグインはvimrcも読み込ませることができるため基本的なキーマッピングはそのまま持ってくるとができます。</p>\n<p data-sourcepos=\"21:1-22:133\">そう、「基本的なキーマッピングは」 vimキーマッピングのプラグインではvimrcの読み込みには対応しているものの現状キーマッピングのみのサポートとなっており<br>\n「ぼくのかんがえた最強のvimrc」の中にあるfunctionやコマンドはVSCode上では実行できない状態です。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"24:1-26:3\"><div class=\"highlight\"><pre><code> :warning: .vimrc support is currently experimental. Only remaps are supported, and you may experience bugs. Please report them!\n</code></pre></div></div>\n<p data-sourcepos=\"28:1-29:210\">そう、つまりvim scriptで書いたコマンドやfunctionの実行はできない状態です。<br>\nしかしこのままでは不便なのでVSCodeに入れているプラグインのキーボードショートカットをvimのキーバインド、特にLeaderに割り当てて行きたいと思います。</p>\n<h2 data-sourcepos=\"31:1-31:30\">\n<span id=\"vimプラグインの導入\" class=\"fragment\"></span><a href=\"#vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>vimプラグインの導入</h2>\n<p data-sourcepos=\"33:1-33:170\">まずはVSCode上でvimのキーバインドを使えるようにするためvimプラグインを導入します。(すでに入ってる方は飛ばしてください)</p>\n<p data-sourcepos=\"35:1-35:218\">VSCodeの拡張機能の検索窓に「vim」と入れると<a href=\"https://marketplace.visualstudio.com/items?itemName=vscodevim.vim\" rel=\"nofollow noopener\" target=\"_blank\">vimのプラグイン</a>が表示されるのでインストールすれば完了です。</p>\n<h2 data-sourcepos=\"38:1-38:30\">\n<span id=\"vimプラグインの設定\" class=\"fragment\"></span><a href=\"#vim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>vimプラグインの設定</h2>\n<p data-sourcepos=\"40:1-41:121\">VSCodeの左下にある歯車アイコン(管理)から設定をクリック。右上のファイルのアイコンをクリックすることで<br>\nsettings.jsonが開かれます。このjsonファイルにvimの設定(VSCodeの設定)を書き込んで聞きます。</p>\n<p data-sourcepos=\"43:1-43:37\">まず基本の設定からです。c</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"45:1-51:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.leader\"</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"s2\">\",\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">Leaderのキー割り当てです。</span><span class=\"w\"> </span><span class=\"err\">vimrc内で設定していてもこちらで再度設定する必要があります</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.enable\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">vimrcの読み込みを有効化するフラグです。vimrcを使用する際には</span><span class=\"kc\">true</span><span class=\"err\">nにしてください</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"~/dotfiles/.vimrc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">vimrcのパスを指定します。</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<h3 data-sourcepos=\"53:1-53:40\">\n<span id=\"キーショートカットの割当\" class=\"fragment\"></span><a href=\"#%E3%82%AD%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%81%AE%E5%89%B2%E5%BD%93\"><i class=\"fa fa-link\"></i></a>キーショートカットの割当</h3>\n<p data-sourcepos=\"55:1-55:214\">まず割り当てたいキーボード ショートカットを調べるためにVSCode左下の歯車アイコンからキーボードショートカットを選ぶとショートカットが表示されます。</p>\n<p data-sourcepos=\"57:1-57:134\"><a href=\"https://camo.qiitausercontent.com/60db5f5ede66ef6318df249d1eaac96a86646d28/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323834363834382f39326534303633652d376234642d303966652d613433622d3433353264353536336463312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2F92e4063e-7b4d-09fe-a43b-4352d5563dc1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5d816e539651bbf28929f6338590b2b8\" alt=\"keyboard_shortcat.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/92e4063e-7b4d-09fe-a43b-4352d5563dc1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2F92e4063e-7b4d-09fe-a43b-4352d5563dc1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=670cba09e798c96529fe5ac1e893f4bc 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"60:1-61:125\">今回は一例として全テストの実行とFlutterプラグインの機能であるDevToolの呼び出しをLeaderに割り当てたいと思います。<br>\nまず先程のキーボードショートカットの一覧から割り当てたいショートカットを調べます。</p>\n<p data-sourcepos=\"63:1-64:183\">今回はテストなので「test」と入力します。するとテストに関するキーボードショートカットがたくさん表示されるので<br>\n「テスト: すべてのテストを実行する」の項目をvimに割り当てます。コマンドの列にある <code> testing.runAll</code> がVSCode上でのコマンドになります</p>\n<p data-sourcepos=\"66:1-66:128\"><a href=\"https://camo.qiitausercontent.com/9d7db5562bd38f16fa9cde380479f8650381269f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323834363834382f63363262303334632d366637392d626639362d393562312d6235303761323062343236362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2Fc62b034c-6f79-bf96-95b1-b507a20b4266.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ebafc157590dee5372703569979cde43\" alt=\"test_searcg.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/c62b034c-6f79-bf96-95b1-b507a20b4266.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2Fc62b034c-6f79-bf96-95b1-b507a20b4266.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=657507a59319fc6cfdc62f08e0a17401 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"69:1-69:64\">これを先程の setting.jsonに書き込んでいきます。</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"71:1-83:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.leader\"</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"s2\">\",\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.enable\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"~/dotfiles/.vimrc\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.normalModeKeyBindingsNonRecursive\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">ノーマルモードでのキー割り当てを再設定する項目</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"before\"</span><span class=\"p\">:[</span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"t\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">割当るキーバインド</span><span class=\"w\">\n      </span><span class=\"nl\">\"commands\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"testing.runAll\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">実行するキーボードショートカットのコマンド</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">   \n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p data-sourcepos=\"85:1-85:189\">これを書き込むことでVimキーバインドを入れたVSCodeのノーマルモードで <code>, , t</code> と入力するとVSCode上でテストを実行してくるようになります。</p>\n<p data-sourcepos=\"87:1-89:121\">次にFlutterプラグインで入っているキーボードショートカットのコマンドも割り当てていみます。<br>\n先ほどと同じようにキーボードショートカットの検索窓に「flutter」と入れ<br>\n今回入れるDevToolを呼び出すコマンド <code>flutter.openDevTools</code> をsetting.jsonに書き込んでいきます。</p>\n<p data-sourcepos=\"91:1-91:131\"><a href=\"https://camo.qiitausercontent.com/335d7fed892965e93c1a0c8d3cf52e12e6c7d5a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323834363834382f33656336343834352d383961662d306662372d386630662d3561623061653861313962632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2F3ec64845-89af-0fb7-8f0f-5ab0ae8a19bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=758293c25070eb70c29b6063cde8be9f\" alt=\"flutter_search.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/3ec64845-89af-0fb7-8f0f-5ab0ae8a19bc.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2846848%2F3ec64845-89af-0fb7-8f0f-5ab0ae8a19bc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4301be41f576a4951fdc624b6c8acd64 1x\" loading=\"lazy\"></a></p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"94:1-110:3\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.leader\"</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"s2\">\",\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.enable\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.vimrc.path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"~/dotfiles/.vimrc\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"vim.normalModeKeyBindingsNonRecursive\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> \n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"before\"</span><span class=\"p\">:[</span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"t\"</span><span class=\"p\">],</span><span class=\"w\"> \n      </span><span class=\"nl\">\"commands\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"testing.runAll\"</span><span class=\"p\">]</span><span class=\"w\"> \n    </span><span class=\"p\">},</span><span class=\"w\">   \n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"before\"</span><span class=\"p\">:[</span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"leader\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"d\"</span><span class=\"p\">],</span><span class=\"w\">\n      </span><span class=\"nl\">\"commands\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"flutter.openDevTools\"</span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">   \n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p data-sourcepos=\"112:1-112:100\">これでノーマルモードで <code>, , a d</code>と入力するとFlutter のDevToolが開かれます。</p>\n<h2 data-sourcepos=\"114:1-114:15\">\n<span id=\"さいごに\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\"><i class=\"fa fa-link\"></i></a>さいごに</h2>\n<p data-sourcepos=\"116:1-118:117\">これでVSCodeでそこそこ便利にvimのコマンド呼び出しっぽいことができるようになりました。<br>\nやっぱり完全にコマンドやVimScriptの呼び出しができないのは不便ですがVSCodeでも便利な機能があるので<br>\nそれぞれのいいところを補完して自分の使いやすい開発環境を整えていってください。</p>\n",
    "body": "## はじめに\n\n皆さん好きなテキストエディタはなんですか？\nvim？それともvim?もしかしてvimとか？\n\n私も一番好きなテキストエディタはvimです。\nhjklでのカーソル移動、モード切り替えでの様々な操作。もうこれがないエディタではコードが書けません。\n\nでは日常で一番使っているエディタはなんですか？\n私はVSCodeです。\n普段はFlutterを使っているのでFlutterの公式ドキュメントでもおすすめされているのが\n\n- VSCode\n- Android Studio\n- Emacs\n\nなのでプラグインも豊富でvimキーバインドのプラグインもあり、他のフレームワークを使う際にも応用が利きやすいVSCodeを使用しています。(iPresenceでもVSCodeが推奨のエディタです、ペアプロとかしやすので)\n\nVSCodeのvimキーバインド プラグインはvimrcも読み込ませることができるため基本的なキーマッピングはそのまま持ってくるとができます。\n\nそう、「基本的なキーマッピングは」 vimキーマッピングのプラグインではvimrcの読み込みには対応しているものの現状キーマッピングのみのサポートとなっており\n「ぼくのかんがえた最強のvimrc」の中にあるfunctionやコマンドはVSCode上では実行できない状態です。\n\n```\n :warning: .vimrc support is currently experimental. Only remaps are supported, and you may experience bugs. Please report them!\n```\n\nそう、つまりvim scriptで書いたコマンドやfunctionの実行はできない状態です。 \nしかしこのままでは不便なのでVSCodeに入れているプラグインのキーボードショートカットをvimのキーバインド、特にLeaderに割り当てて行きたいと思います。\n\n## vimプラグインの導入\n\nまずはVSCode上でvimのキーバインドを使えるようにするためvimプラグインを導入します。(すでに入ってる方は飛ばしてください)\n\nVSCodeの拡張機能の検索窓に「vim」と入れると[vimのプラグイン](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim)が表示されるのでインストールすれば完了です。  \n\n\n## vimプラグインの設定\n\nVSCodeの左下にある歯車アイコン(管理)から設定をクリック。右上のファイルのアイコンをクリックすることで\nsettings.jsonが開かれます。このjsonファイルにvimの設定(VSCodeの設定)を書き込んで聞きます。\n\nまず基本の設定からです。c\n\n```json\n{\n  \"vim.leader\":  \",\", // Leaderのキー割り当てです。 vimrc内で設定していてもこちらで再度設定する必要があります\n  \"vim.vimrc.enable\": true, // vimrcの読み込みを有効化するフラグです。vimrcを使用する際にはtruenにしてください\n  \"vim.vimrc.path\": \"~/dotfiles/.vimrc\", // vimrcのパスを指定します。\n}\n```\n\n### キーショートカットの割当\n\nまず割り当てたいキーボード ショートカットを調べるためにVSCode左下の歯車アイコンからキーボードショートカットを選ぶとショートカットが表示されます。\n\n![keyboard_shortcat.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/92e4063e-7b4d-09fe-a43b-4352d5563dc1.png)\n\n\n今回は一例として全テストの実行とFlutterプラグインの機能であるDevToolの呼び出しをLeaderに割り当てたいと思います。\nまず先程のキーボードショートカットの一覧から割り当てたいショートカットを調べます。  \n\n今回はテストなので「test」と入力します。するとテストに関するキーボードショートカットがたくさん表示されるので \n「テスト: すべてのテストを実行する」の項目をvimに割り当てます。コマンドの列にある ` testing.runAll` がVSCode上でのコマンドになります\n\n![test_searcg.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/c62b034c-6f79-bf96-95b1-b507a20b4266.png)\n\n\nこれを先程の setting.jsonに書き込んでいきます。\n\n```json\n{\n  \"vim.leader\":  \",\",\n  \"vim.vimrc.enable\": true,\n  \"vim.vimrc.path\": \"~/dotfiles/.vimrc\",\n  \"vim.normalModeKeyBindingsNonRecursive\": [ // ノーマルモードでのキー割り当てを再設定する項目\n    {\n      \"before\":[\"leader\", \"leader\", \"t\"], // 割当るキーバインド\n      \"commands\": [\"testing.runAll\"] // 実行するキーボードショートカットのコマンド\n    },   \n  ]\n}\n```\n\nこれを書き込むことでVimキーバインドを入れたVSCodeのノーマルモードで `, , t` と入力するとVSCode上でテストを実行してくるようになります。\n\n次にFlutterプラグインで入っているキーボードショートカットのコマンドも割り当てていみます。\n先ほどと同じようにキーボードショートカットの検索窓に「flutter」と入れ \n今回入れるDevToolを呼び出すコマンド `flutter.openDevTools` をsetting.jsonに書き込んでいきます。\n\n![flutter_search.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2846848/3ec64845-89af-0fb7-8f0f-5ab0ae8a19bc.png)\n\n\n```json\n{\n  \"vim.leader\":  \",\",\n  \"vim.vimrc.enable\": true,\n  \"vim.vimrc.path\": \"~/dotfiles/.vimrc\",\n  \"vim.normalModeKeyBindingsNonRecursive\": [ \n    {\n      \"before\":[\"leader\", \"leader\", \"t\"], \n      \"commands\": [\"testing.runAll\"] \n    },   \n    {\n      \"before\":[\"leader\", \"leader\", \"a\", \"d\"],\n      \"commands\": [\"flutter.openDevTools\"]\n    },   \n  ]\n}\n```\n\nこれでノーマルモードで `, , a d`と入力するとFlutter のDevToolが開かれます。\n\n## さいごに\n\nこれでVSCodeでそこそこ便利にvimのコマンド呼び出しっぽいことができるようになりました。\nやっぱり完全にコマンドやVimScriptの呼び出しができないのは不便ですがVSCodeでも便利な機能があるので\nそれぞれのいいところを補完して自分の使いやすい開発環境を整えていってください。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-04T13:15:06+09:00",
    "group": null,
    "id": "b89af536b184861cc0c0",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Vim",
        "versions": []
      },
      {
        "name": "VSCode",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "VSCodeのvimキーバインドでVSCodeのキーショートカットコマンドを呼び出す",
    "updated_at": "2022-12-05T07:04:19+09:00",
    "url": "https://qiita.com/ipre_natsumi/items/b89af536b184861cc0c0",
    "user": {
      "description": "Flutter と GCP/Firebaseを主に使っています",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "ipre_natsumi",
      "items_count": 6,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "iPresence",
      "permanent_id": 2846848,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2846848/35c154e16929d7b87caba7d7d068bbd36a7e768d/x_large.png?1663217955",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": "https://ipresence.jp/"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"2:1-2:142\">今回は、TabViewの使い方を２つ紹介しようと思います。使いたい場面に応じて使うことをおすすめします。</p>\n<p data-sourcepos=\"4:1-5:83\">１つ目は、<strong>initStateを何度も読み込みタイプのTabView</strong>です。<br>\n２つ目は、<strong>initStateを初回のみ読み込むタイプのTabView</strong>です。</p>\n<h1 data-sourcepos=\"7:1-7:14\">\n<span id=\"使い方\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>使い方①</h1>\n<p data-sourcepos=\"9:1-10:123\">１つ目は、<strong>initStateを何度も読み込みタイプのTabView</strong>です。<br>\nそれぞれの画面内のinitStateを見てみてください。これが一般的なパターンだと思われます。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"13:1-58:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:flutter/material.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">TabScreen</span> <span class=\"kd\">extends</span> <span class=\"n\">StatefulWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">TabScreen</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">_TabScreenState</span> <span class=\"n\">createState</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">_TabScreenState</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">_TabScreenState</span> <span class=\"kd\">extends</span> <span class=\"n\">State</span><span class=\"o\">&lt;</span><span class=\"n\">TabScreen</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">_onItemTapped</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">selectIndex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">setState</span><span class=\"o\">(()</span> <span class=\"o\">{</span>\n      <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">selectIndex</span><span class=\"o\">;</span>\n    <span class=\"o\">});</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n      <span class=\"nl\">body:</span> <span class=\"o\">[</span>\n        <span class=\"kd\">const</span> <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">red</span><span class=\"o\">),</span>\n        <span class=\"kd\">const</span> <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">),</span>\n        <span class=\"kd\">const</span> <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">green</span><span class=\"o\">),</span>\n      <span class=\"o\">][</span><span class=\"n\">index</span><span class=\"o\">],</span>\n      <span class=\"nl\">bottomNavigationBar:</span> <span class=\"n\">BottomNavigationBar</span><span class=\"o\">(</span>\n        <span class=\"nl\">elevation:</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"nl\">iconSize:</span> <span class=\"mi\">30</span><span class=\"o\">,</span>\n        <span class=\"nl\">showUnselectedLabels:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n        <span class=\"nl\">showSelectedLabels:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n        <span class=\"nl\">currentIndex:</span> <span class=\"n\">index</span><span class=\"o\">,</span>\n        <span class=\"nl\">onTap:</span> <span class=\"n\">_onItemTapped</span><span class=\"o\">,</span>\n        <span class=\"nl\">items:</span> <span class=\"kd\">const</span> <span class=\"o\">&lt;</span><span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">&gt;[</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">home</span><span class=\"o\">)),</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">favorite</span><span class=\"o\">)),</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">notifications</span><span class=\"o\">)),</span>\n        <span class=\"o\">],</span>\n        <span class=\"nl\">type:</span> <span class=\"n\">BottomNavigationBarType</span><span class=\"o\">.</span><span class=\"na\">fixed</span><span class=\"o\">,</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"61:1-61:14\">\n<span id=\"使い方-1\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9-1\"><i class=\"fa fa-link\"></i></a>使い方②</h1>\n<p data-sourcepos=\"63:1-64:220\">２つ目は、<strong>initStateを初回のみ読み込むタイプのTabView</strong>です。<br>\nこの使用例としては、何度も読み込むことを防ぐ効果があります。私の場合は、Mapのピンの読み込みを2回以上行うと消えてしまうエラーを防ぐために行いました。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"67:1-115:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:flutter/material.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">TabScreen</span> <span class=\"kd\">extends</span> <span class=\"n\">StatefulWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">TabScreen</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">_TabScreenState</span> <span class=\"n\">createState</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">_TabScreenState</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">_TabScreenState</span> <span class=\"kd\">extends</span> <span class=\"n\">State</span><span class=\"o\">&lt;</span><span class=\"n\">TabScreen</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">_onItemTapped</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">selectIndex</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">setState</span><span class=\"o\">(()</span> <span class=\"o\">{</span>\n      <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">selectIndex</span><span class=\"o\">;</span>\n    <span class=\"o\">});</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n      <span class=\"nl\">body:</span> <span class=\"n\">IndexedStack</span><span class=\"o\">(</span>\n        <span class=\"nl\">index:</span> <span class=\"n\">index</span><span class=\"o\">,</span>\n        <span class=\"nl\">children:</span> <span class=\"kd\">const</span> <span class=\"o\">[</span>\n          <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">red</span><span class=\"o\">),</span>\n          <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">),</span>\n          <span class=\"n\">ColoredBox</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">green</span><span class=\"o\">),</span>\n        <span class=\"o\">],</span>\n      <span class=\"o\">),</span>\n      <span class=\"nl\">bottomNavigationBar:</span> <span class=\"n\">BottomNavigationBar</span><span class=\"o\">(</span>\n        <span class=\"nl\">elevation:</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"nl\">iconSize:</span> <span class=\"mi\">30</span><span class=\"o\">,</span>\n        <span class=\"nl\">showUnselectedLabels:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n        <span class=\"nl\">showSelectedLabels:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n        <span class=\"nl\">currentIndex:</span> <span class=\"n\">index</span><span class=\"o\">,</span>\n        <span class=\"nl\">onTap:</span> <span class=\"n\">_onItemTapped</span><span class=\"o\">,</span>\n        <span class=\"nl\">items:</span> <span class=\"kd\">const</span> <span class=\"o\">&lt;</span><span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">&gt;[</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">home</span><span class=\"o\">)),</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">favorite</span><span class=\"o\">)),</span>\n          <span class=\"n\">BottomNavigationBarItem</span><span class=\"o\">(</span><span class=\"nl\">icon:</span> <span class=\"n\">Icon</span><span class=\"o\">(</span><span class=\"n\">Icons</span><span class=\"o\">.</span><span class=\"na\">notifications</span><span class=\"o\">)),</span>\n        <span class=\"o\">],</span>\n        <span class=\"nl\">type:</span> <span class=\"n\">BottomNavigationBarType</span><span class=\"o\">.</span><span class=\"na\">fixed</span><span class=\"o\">,</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"117:1-117:11\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n<p data-sourcepos=\"118:1-119:759\"><a href=\"https://camo.qiitausercontent.com/808f15b260616ac6c3e3e493f9d8882685fea3d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3637323630392f38376632613438382d633563642d353439642d663037662d3031623434613133313762382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=057400e6a3ed40534f9d462520abc906\" alt=\"Frame 9 (1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3e50085d1b7cfb81c2e16da92f8518f 1x\" loading=\"lazy\"></a><br>\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。</p>\n<h5 data-sourcepos=\"121:1-121:34\">\n<span id=\"homepage-httpsverooxyz\" class=\"fragment\"></span><a href=\"#homepage-httpsverooxyz\"><i class=\"fa fa-link\"></i></a>Homepage: <a href=\"https://veroo.xyz/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://veroo.xyz/</a>\n</h5>\n<h5 data-sourcepos=\"122:1-122:43\">\n<span id=\"discord-urlhttpstcovot0gpsfla\" class=\"fragment\"></span><a href=\"#discord-urlhttpstcovot0gpsfla\"><i class=\"fa fa-link\"></i></a>Discord URL：<a href=\"https://t.co/VoT0gpsflA\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/VoT0gpsflA</a>\n</h5>\n",
    "body": "\n今回は、TabViewの使い方を２つ紹介しようと思います。使いたい場面に応じて使うことをおすすめします。\n\n１つ目は、**initStateを何度も読み込みタイプのTabView**です。\n２つ目は、**initStateを初回のみ読み込むタイプのTabView**です。\n\n# 使い方①\n\n１つ目は、**initStateを何度も読み込みタイプのTabView**です。\nそれぞれの画面内のinitStateを見てみてください。これが一般的なパターンだと思われます。\n\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass TabScreen extends StatefulWidget {\n  const TabScreen({Key? key}) : super(key: key);\n\n  @override\n  _TabScreenState createState() => _TabScreenState();\n}\n\nclass _TabScreenState extends State<TabScreen> {\n  int index = 0;\n\n  void _onItemTapped(int selectIndex) {\n    setState(() {\n      index = selectIndex;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: [\n        const ColoredBox(color: Colors.red),\n        const ColoredBox(color: Colors.black),\n        const ColoredBox(color: Colors.green),\n      ][index],\n      bottomNavigationBar: BottomNavigationBar(\n        elevation: 0,\n        iconSize: 30,\n        showUnselectedLabels: false,\n        showSelectedLabels: false,\n        currentIndex: index,\n        onTap: _onItemTapped,\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(icon: Icon(Icons.home)),\n          BottomNavigationBarItem(icon: Icon(Icons.favorite)),\n          BottomNavigationBarItem(icon: Icon(Icons.notifications)),\n        ],\n        type: BottomNavigationBarType.fixed,\n      ),\n    );\n  }\n}\n\n```\n\n\n# 使い方②\n\n２つ目は、**initStateを初回のみ読み込むタイプのTabView**です。\nこの使用例としては、何度も読み込むことを防ぐ効果があります。私の場合は、Mapのピンの読み込みを2回以上行うと消えてしまうエラーを防ぐために行いました。\n\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass TabScreen extends StatefulWidget {\n  const TabScreen({Key? key}) : super(key: key);\n\n  @override\n  _TabScreenState createState() => _TabScreenState();\n}\n\nclass _TabScreenState extends State<TabScreen> {\n  int index = 0;\n\n  void _onItemTapped(int selectIndex) {\n    setState(() {\n      index = selectIndex;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: IndexedStack(\n        index: index,\n        children: const [\n          ColoredBox(color: Colors.red),\n          ColoredBox(color: Colors.black),\n          ColoredBox(color: Colors.green),\n        ],\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        elevation: 0,\n        iconSize: 30,\n        showUnselectedLabels: false,\n        showSelectedLabels: false,\n        currentIndex: index,\n        onTap: _onItemTapped,\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(icon: Icon(Icons.home)),\n          BottomNavigationBarItem(icon: Icon(Icons.favorite)),\n          BottomNavigationBarItem(icon: Icon(Icons.notifications)),\n        ],\n        type: BottomNavigationBarType.fixed,\n      ),\n    );\n  }\n}\n\n```\n\n# 最後に\n![Frame 9 (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png)\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。\n\n##### Homepage: https://veroo.xyz/\n##### Discord URL：https://t.co/VoT0gpsflA \n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-11-28T21:31:20+09:00",
    "group": null,
    "id": "f80a5abf216477a83364",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "[Flutter]TabViewの２種類の使い方",
    "updated_at": "2022-12-05T07:03:21+09:00",
    "url": "https://qiita.com/iseruuuuu/items/f80a5abf216477a83364",
    "user": {
      "description": "Flutterを使用した iOS/Android 開発をすることが大好きな文系大学生です✌️\r\n",
      "facebook_id": "",
      "followees_count": 3,
      "followers_count": 7,
      "github_login_name": "iseruuuuu",
      "id": "iseruuuuu",
      "items_count": 42,
      "linkedin_id": "竜太郎-井関-b350ab223/",
      "location": "日本　神奈川県",
      "name": "Ryutaro Iseki",
      "organization": "立正大学",
      "permanent_id": 672609,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/67954894?v=4",
      "team_only": false,
      "twitter_screen_name": "isekiryu",
      "website_url": "https://youtrust.jp/users/iseki"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-2:197\">この記事はand factory.inc Advent Calendar 2022 5日目の記事です。<br>\n昨日は　<a href=\"/myoshita\" class=\"user-mention js-hovercard\" title=\"myoshita\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"myoshita\">@myoshita</a> さんの <a href=\"https://qiita.com/myoshita/items/3120329753cab7033d65\" id=\"reference-3923ac51fe25f11e5159\">[Android] Github Actions + PythonでGoogle Playの段階リリース状態をチェックする</a> でした。</p>\n<hr data-sourcepos=\"4:1-5:0\">\n<p data-sourcepos=\"6:1-6:307\">Flutterの開発時にエラー画面に遭遇したことのない人は少なくないと思います。debugモードで表示される画面は赤く、エラー感の強いあの画面はとても刺激が強いものになっていますが、release版ではグレーの画面で表示されます。</p>\n<table data-sourcepos=\"8:1-10:273\">\n<thead>\n<tr data-sourcepos=\"8:1-8:15\">\n<th data-sourcepos=\"8:1-8:6\">debug</th>\n<th data-sourcepos=\"8:8-8:15\">release</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"10:1-10:273\">\n<td data-sourcepos=\"10:1-10:137\"><a href=\"https://camo.qiitausercontent.com/8bfd9682b5d123084c1c5a87045e0a732ac34547/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3230363136352f38383532383265392d383866352d616639662d623631392d6132636135633366393232382e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/885282e9-88f5-af9f-b619-a2ca5c3f9228.gif\" alt=\"adbeem-20221204195409.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/885282e9-88f5-af9f-b619-a2ca5c3f9228.gif\" loading=\"lazy\"></a></td>\n<td data-sourcepos=\"10:139-10:273\"><a href=\"https://camo.qiitausercontent.com/16b2bf5816a06cbe819aa9ac7c04e027be167ad9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3230363136352f31313163663433322d633735302d663831342d346565372d3637383735633130623030382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F206165%2F111cf432-c750-f814-4ee7-67875c10b008.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3905d64fa191d0cbc260b603278618e9\" alt=\"screen_shot_release.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/111cf432-c750-f814-4ee7-67875c10b008.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F206165%2F111cf432-c750-f814-4ee7-67875c10b008.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1f2af87232ea34e4b0efe9832af00d66 1x\" loading=\"lazy\"></a></td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"12:1-12:333\">debugモードで表示される画面はまだ開発者だけが目にするものですが、releaseモードで表示されるグレーの画面はユーザーに不安を与えてしまいますし、この画面から何をしたらいいのかがわからずアプリの体験を損なってしまう可能性が高いです。</p>\n<p data-sourcepos=\"14:1-14:317\">もちろんこの画面が表示されないようにしっかりとしたQAプロセスをへてリリースされれば良いですが、不具合を１００％起こさないことは難しいため、もしもの時のためにエラー画面をカスタマイズすることができるか調査しました。</p>\n<p data-sourcepos=\"17:1-17:66\">以下のようなコードによって実現していきます。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"19:1-36:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">MyApp</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">MyApp</span><span class=\"o\">({</span><span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">});</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">MaterialApp</span><span class=\"o\">(</span>\n      <span class=\"o\">...</span>\n      <span class=\"nl\">builder:</span> <span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">Widget</span><span class=\"o\">?</span> <span class=\"n\">widget</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ErrorWidget</span><span class=\"o\">.</span><span class=\"na\">builder</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">FlutterErrorDetails</span> <span class=\"n\">errorDetails</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"k\">return</span> <span class=\"n\">MyErrorWidget</span><span class=\"o\">(</span><span class=\"nl\">errorDetails:</span> <span class=\"n\">errorDetails</span><span class=\"o\">);</span>\n        <span class=\"o\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">widget</span><span class=\"o\">!;</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"38:1-39:147\">Widgetのbuild中にエラーが発生した場合<code>ErrorWidget.builder</code>を設定することで、この関数で設定したWidgetを表示することができます。<br>\nErrorWidget.builderではデフォルト値として_defaultErrorWidgetBuilderが実行されエラーメッセージが整形されています。</p>\n<p data-sourcepos=\"41:1-41:14\">framework.dart</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"42:1-54:3\"><div class=\"highlight\"><pre><code>  <span class=\"kd\">static</span> <span class=\"n\">ErrorWidgetBuilder</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">_defaultErrorWidgetBuilder</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">static</span> <span class=\"n\">Widget</span> <span class=\"n\">_defaultErrorWidgetBuilder</span><span class=\"o\">(</span><span class=\"n\">FlutterErrorDetails</span> <span class=\"n\">details</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">String</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">''</span><span class=\"o\">;</span>\n    <span class=\"k\">assert</span><span class=\"o\">(()</span> <span class=\"o\">{</span>\n      <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">'</span><span class=\"si\">${_stringify(details.exception)}</span><span class=\"se\">\\n</span><span class=\"s\">See also: https://flutter.dev/docs/testing/errors'</span><span class=\"o\">;</span>\n      <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}());</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">Object</span> <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">details</span><span class=\"o\">.</span><span class=\"na\">exception</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">ErrorWidget</span><span class=\"o\">.</span><span class=\"na\">withDetails</span><span class=\"o\">(</span><span class=\"nl\">message:</span> <span class=\"n\">message</span><span class=\"o\">,</span> <span class=\"nl\">error:</span> <span class=\"n\">exception</span> <span class=\"k\">is</span> <span class=\"n\">FlutterError</span> <span class=\"o\">?</span> <span class=\"n\">exception</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"57:1-57:129\">結果的に以下のような６４ゴール＊ンアイゲームオーバー風画面を作成することができました。</p>\n<p data-sourcepos=\"59:1-59:137\"><a href=\"https://camo.qiitausercontent.com/75c40b83d6c24caf4b4f3f9778acfd9b42dd63fd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3230363136352f36356232343966352d653530622d363664372d333165642d3635616661383032373062372e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F206165%2F65b249f5-e50b-66d7-31ed-65afa80270b7.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8885006dc4cd62a42abe616a7770d5a3\" alt=\"adbeem-20221204190816.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/65b249f5-e50b-66d7-31ed-65afa80270b7.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F206165%2F65b249f5-e50b-66d7-31ed-65afa80270b7.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=05d43680ab5b4e5bd0a07172f1018f91 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"61:1-61:212\">今回は、CustomPainterを使って、四角形の下辺だけを二次ベジエ曲線による波形のPathを描いて塗りつぶしたものを高さを変更するAnimationによって実装しました。</p>\n<h1 data-sourcepos=\"63:1-63:11\">\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n<p data-sourcepos=\"65:1-65:556\">グレーの画面をカスタマイズし、ユーザーに対してアプリを再起動を促したりすることで多少ユーザーの不安を減らすことができると思います。プロダクションのコードでは<code>kDebugMode</code>などでdebugモードとreleaseモードで表示される画面を分け、開発時には<code>FlutterErrorDetails.summary</code>を表示したり、バグレポートを起票する画面などに遷移させてあげることで開発者、QA担当者の体験を向上することにもつながるでしょう。</p>\n<p data-sourcepos=\"67:1-67:147\">明日の<a href=\"https://qiita.com/advent-calendar/2022/andfactory\">Advent Calendar</a>の記事もよろしければご覧になってください。<img alt=\":santa:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f385.png\" title=\":santa:\" width=\"20\" loading=\"lazy\"></p>\n<p data-sourcepos=\"69:1-69:9\">リンク</p>\n<ul data-sourcepos=\"70:1-73:75\">\n<li data-sourcepos=\"70:1-70:66\"><a href=\"https://api.flutter.dev/flutter/widgets/ErrorWidget/builder.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://api.flutter.dev/flutter/widgets/ErrorWidget/builder.html</a></li>\n<li data-sourcepos=\"71:1-71:41\"><a href=\"https://docs.flutter.dev/testing/errors\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.flutter.dev/testing/errors</a></li>\n<li data-sourcepos=\"72:1-72:51\"><a href=\"https://blog.codemagic.io/flutter-custom-painter/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://blog.codemagic.io/flutter-custom-painter/</a></li>\n<li data-sourcepos=\"73:1-73:75\"><a href=\"https://api.flutter.dev/flutter/foundation/FlutterErrorDetails-class.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://api.flutter.dev/flutter/foundation/FlutterErrorDetails-class.html</a></li>\n</ul>\n",
    "body": "この記事はand factory.inc Advent Calendar 2022 5日目の記事です。\n昨日は　@myoshita さんの [[Android] Github Actions + PythonでGoogle Playの段階リリース状態をチェックする](https://qiita.com/myoshita/items/3120329753cab7033d65) でした。\n\n---\n\nFlutterの開発時にエラー画面に遭遇したことのない人は少なくないと思います。debugモードで表示される画面は赤く、エラー感の強いあの画面はとても刺激が強いものになっていますが、release版ではグレーの画面で表示されます。\n\ndebug | release\n--- | ---\n![adbeem-20221204195409.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/885282e9-88f5-af9f-b619-a2ca5c3f9228.gif)|![screen_shot_release.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/111cf432-c750-f814-4ee7-67875c10b008.png)\n\ndebugモードで表示される画面はまだ開発者だけが目にするものですが、releaseモードで表示されるグレーの画面はユーザーに不安を与えてしまいますし、この画面から何をしたらいいのかがわからずアプリの体験を損なってしまう可能性が高いです。\n\nもちろんこの画面が表示されないようにしっかりとしたQAプロセスをへてリリースされれば良いですが、不具合を１００％起こさないことは難しいため、もしもの時のためにエラー画面をカスタマイズすることができるか調査しました。\n\n\n以下のようなコードによって実現していきます。\n\n```dart\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      ...\n      builder: (BuildContext context, Widget? widget) {\n        ErrorWidget.builder = (FlutterErrorDetails errorDetails) {\n          return MyErrorWidget(errorDetails: errorDetails);\n        };\n        return widget!;\n      },\n    );\n  }\n}\n```\n\nWidgetのbuild中にエラーが発生した場合`ErrorWidget.builder`を設定することで、この関数で設定したWidgetを表示することができます。\nErrorWidget.builderではデフォルト値として_defaultErrorWidgetBuilderが実行されエラーメッセージが整形されています。\n\nframework.dart\n```dart\n  static ErrorWidgetBuilder builder = _defaultErrorWidgetBuilder;\n\n  static Widget _defaultErrorWidgetBuilder(FlutterErrorDetails details) {\n    String message = '';\n    assert(() {\n      message = '${_stringify(details.exception)}\\nSee also: https://flutter.dev/docs/testing/errors';\n      return true;\n    }());\n    final Object exception = details.exception;\n    return ErrorWidget.withDetails(message: message, error: exception is FlutterError ? exception : null);\n  }\n```\n\n\n結果的に以下のような６４ゴール＊ンアイゲームオーバー風画面を作成することができました。\n\n![adbeem-20221204190816.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/65b249f5-e50b-66d7-31ed-65afa80270b7.gif)\n\n今回は、CustomPainterを使って、四角形の下辺だけを二次ベジエ曲線による波形のPathを描いて塗りつぶしたものを高さを変更するAnimationによって実装しました。\n\n# まとめ\n\nグレーの画面をカスタマイズし、ユーザーに対してアプリを再起動を促したりすることで多少ユーザーの不安を減らすことができると思います。プロダクションのコードでは`kDebugMode`などでdebugモードとreleaseモードで表示される画面を分け、開発時には`FlutterErrorDetails.summary`を表示したり、バグレポートを起票する画面などに遷移させてあげることで開発者、QA担当者の体験を向上することにもつながるでしょう。\n\n明日の[Advent Calendar](https://qiita.com/advent-calendar/2022/andfactory)の記事もよろしければご覧になってください。:santa:\n\nリンク\n- https://api.flutter.dev/flutter/widgets/ErrorWidget/builder.html\n- https://docs.flutter.dev/testing/errors\n- https://blog.codemagic.io/flutter-custom-painter/\n- https://api.flutter.dev/flutter/foundation/FlutterErrorDetails-class.html\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-04T21:20:50+09:00",
    "group": null,
    "id": "1648cfc672cb702f8c23",
    "likes_count": 7,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "[Flutter] あの赤いエラー画面をカスタマイズする",
    "updated_at": "2022-12-05T09:42:37+09:00",
    "url": "https://qiita.com/nabetaro_jp/items/1648cfc672cb702f8c23",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 23,
      "followers_count": 13,
      "github_login_name": "nabe90s",
      "id": "nabetaro_jp",
      "items_count": 7,
      "linkedin_id": "",
      "location": "Tokyo",
      "name": "Ryo WATANABE",
      "organization": "and factory.inc",
      "permanent_id": 206165,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/206165/profile-images/1638862820",
      "team_only": false,
      "twitter_screen_name": "nabetaro_jp",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:71\">この記事は鈴鹿高専Advent Calendar 2022 24日目の記事です</p>\n<p data-sourcepos=\"3:1-3:43\"><qiita-embed-ogp src=\"https://qiita.com/advent-calendar/2022/snct\"></qiita-embed-ogp></p>\n<p data-sourcepos=\"5:1-5:185\">今回はPCKに向けたアプリ開発で、DBや画像認識などのユーザーからは直接見えない処理の実装を担当したのでそれについて書いていきます</p>\n<h1 data-sourcepos=\"7:1-7:17\">\n<span id=\"0-はじめに\" class=\"fragment\"></span><a href=\"#0-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>0. はじめに</h1>\n<p data-sourcepos=\"8:1-9:188\">今回は全てをクラスとして実装し、UI側(MVCのView？)では直接パッケージを叩かずに済むよう隠蔽化しました<br>\nこうするとDB設計を変えてもインターフェースを変えずに済んだり、同じ処理を内部で使いまわしたりできるのでとてもやりやすかったです</p>\n<h1 data-sourcepos=\"11:1-11:17\">\n<span id=\"1-firebaseauth\" class=\"fragment\"></span><a href=\"#1-firebaseauth\"><i class=\"fa fa-link\"></i></a>1. firebaseAuth</h1>\n<p data-sourcepos=\"13:1-15:165\">ではまず始めにfirebase authentication、特にgoogleアカウントでの認証の実装についてです<br>\n使うパッケージは<code>firebase_auth</code>と<code>google_sign_in</code>の２つです<br>\n<code>firebase_auth</code>にgoogleSignInの関数が用意されているという浅い考えを持っていたので、実装当初は少しめんどくさく感じました</p>\n<h2 data-sourcepos=\"17:1-17:21\">\n<span id=\"ログイン処理\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>ログイン処理</h2>\n<p data-sourcepos=\"19:1-19:54\">まずはログイン処理の流れを説明します</p>\n<ol data-sourcepos=\"21:1-28:0\">\n<li data-sourcepos=\"21:1-24:0\">\n<p data-sourcepos=\"21:4-23:62\">googleアカウントへのサインイン画面を出してログインするアカウントを選択してもらう<br>\n<a href=\"https://camo.qiitausercontent.com/9b208f3b04e399a38036cd1b2ea8d2453d69998d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313032313435352f66333966333965342d323531302d323436372d313536362d3630613031633738336539382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1021455%2Ff39f39e4-2510-2467-1566-60a01c783e98.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29fca587f60661a4d401561636466ec3\" width=\"360\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1021455/f39f39e4-2510-2467-1566-60a01c783e98.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1021455%2Ff39f39e4-2510-2467-1566-60a01c783e98.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ebf9687766477f867eb5c5bc6b66bb0e 1x\" loading=\"lazy\"></a><br>\nこれは<code>google_sign_in</code>パッケージはを使います</p>\n</li>\n<li data-sourcepos=\"25:1-26:67\">\n<p data-sourcepos=\"25:4-26:67\">どのアカウントでログインしたかの情報が取れるので、そのアカウントのauthentication(認証)を取得し、firebaseにログインするために必要なcredential(資格証明)を取得<br>\nこれは<code>firebase_auth</code>に必要な関数が全てあります</p>\n</li>\n<li data-sourcepos=\"27:1-28:0\">\n<p data-sourcepos=\"27:4-27:100\">最後に取得したcredentialをfirebaseAuthの認証する関数に渡してログイン完了</p>\n</li>\n</ol>\n<p data-sourcepos=\"29:1-29:36\">ここまでのコードを書くと</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"30:1-59:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:firebase_auth/firebase_auth.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:google_sign_in/google_sign_in.dart'</span><span class=\"o\">;</span>\n\n<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">?&gt;</span> <span class=\"n\">signIn</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"n\">GoogleSignInAuthentication</span> <span class=\"n\">googleAuth</span><span class=\"o\">;</span>\n    <span class=\"n\">AuthCredential</span> <span class=\"n\">credential</span><span class=\"o\">;</span>\n    <span class=\"n\">GoogleSignInAccount</span><span class=\"o\">?</span> <span class=\"n\">googleUser</span><span class=\"o\">;</span>\n    <span class=\"kd\">final</span> <span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">instance</span><span class=\"o\">;</span>\n    \n    <span class=\"kd\">final</span> <span class=\"n\">googleSignIn</span> <span class=\"o\">=</span> <span class=\"n\">GoogleSignIn</span><span class=\"o\">(</span><span class=\"nl\">scope:</span> <span class=\"o\">[</span><span class=\"s\">'email'</span><span class=\"o\">]);</span>\n    <span class=\"n\">googleUser</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">googleSignIn</span><span class=\"o\">.</span><span class=\"na\">signIn</span><span class=\"o\">();</span> <span class=\"c1\">//サインインするアカウントを選択してもらう</span>\n    \n    <span class=\"c1\">//アカウントが取得できなかった場合</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">googleUser</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//アカウント情報から認証情報を取得</span>\n    <span class=\"n\">googleAuth</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">googleUser</span><span class=\"o\">!.</span><span class=\"na\">authentication</span><span class=\"o\">;</span>\n    <span class=\"n\">credential</span> <span class=\"o\">=</span> <span class=\"n\">GoogleAuthProvider</span><span class=\"o\">.</span><span class=\"na\">credential</span><span class=\"o\">(</span>\n        <span class=\"nl\">idToken:</span> <span class=\"n\">googleAuth</span><span class=\"o\">.</span><span class=\"na\">idToekn</span><span class=\"o\">,</span>\n        <span class=\"nl\">accessToekn:</span> <span class=\"n\">googleAuth</span><span class=\"o\">.</span><span class=\"na\">accessToken</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n    \n    <span class=\"c1\">//firebaseAuthで認証(サインイン)する</span>\n    <span class=\"kd\">final</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"na\">signInWithCredential</span><span class=\"o\">(</span><span class=\"n\">credential</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">user</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"61:1-61:48\">\n<span id=\"ログイン中のユーザー情報の取得\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E4%B8%AD%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E6%83%85%E5%A0%B1%E3%81%AE%E5%8F%96%E5%BE%97\"><i class=\"fa fa-link\"></i></a>ログイン中のユーザー情報の取得</h2>\n<p data-sourcepos=\"62:1-62:75\">これはとても簡単なのでコードを紹介するだけにします</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"63:1-67:3\"><div class=\"highlight\"><pre><code><span class=\"n\">User</span><span class=\"o\">?</span> <span class=\"n\">currentUser</span><span class=\"o\">(){</span>\n    <span class=\"k\">return</span> <span class=\"n\">FIrebaseAuth</span><span class=\"o\">.</span><span class=\"na\">instance</span><span class=\"o\">.</span><span class=\"na\">currentUser</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h2 data-sourcepos=\"69:1-69:24\">\n<span id=\"ログアウト処理\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>ログアウト処理</h2>\n<p data-sourcepos=\"70:1-72:271\">最後にログアウト処理です<br>\nfirebaseAuthでログアウトすれば良いだけと思っていましたが違いました(ここでバグを生みました...)<br>\n<code>google_sign_in</code>にはログインに用いたgoogleアカウントの情報が、<code>firebase_auth</code>には認証情報でログインしたという情報が保存されています、そのため両方のパッケージでログアウト処理をしないといけません</p>\n<p data-sourcepos=\"74:1-74:36\">処理としてはとても単純で</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"75:1-81:3\"><div class=\"highlight\"><pre><code><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">signOut</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"n\">awiat</span> <span class=\"n\">googleSignIn</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n    <span class=\"n\">await</span> <span class=\"n\">FirebaseAuth</span><span class=\"o\">.</span><span class=\"na\">instance</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n    <span class=\"k\">return</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"82:1-82:45\">これでログアウトが実装できます</p>\n<h2 data-sourcepos=\"84:1-84:36\">\n<span id=\"アプリに実装したクラス\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9\"><i class=\"fa fa-link\"></i></a>アプリに実装したクラス</h2>\n<p data-sourcepos=\"85:1-85:150\">ログイン認証のためのインスタンスが生えまくっても色々めんどうなのでシングルトンパターンを採用しました</p>\n<details><summary>コードはこちら</summary><div>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"88:1-132:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:firebase_auth/firebase_auth.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:google_sign_in/google_sign_in.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Auth</span><span class=\"o\">{</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">Auth</span> <span class=\"n\">_instance</span> <span class=\"o\">=</span> <span class=\"n\">Auth</span><span class=\"o\">.</span><span class=\"na\">_internal</span><span class=\"o\">();</span>\n    <span class=\"kd\">final</span> <span class=\"n\">_auth</span> <span class=\"o\">=</span> <span class=\"n\">FIrebasAuth</span><span class=\"o\">.</span><span class=\"na\">instance</span><span class=\"o\">;</span>\n    <span class=\"n\">Auth</span><span class=\"o\">.</span><span class=\"na\">_internal</span><span class=\"o\">();</span>\n    <span class=\"kd\">factory</span> <span class=\"n\">Auth</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">_instance</span><span class=\"o\">;</span>\n\n    <span class=\"n\">GoogleSignInAccount</span><span class=\"o\">?</span> <span class=\"n\">googleUser</span><span class=\"o\">;</span>\n    \n    <span class=\"kd\">final</span> <span class=\"n\">googleSignIn</span> <span class=\"o\">=</span> <span class=\"n\">GoogleSignIn</span><span class=\"o\">(</span><span class=\"nl\">scope:</span> <span class=\"o\">[</span><span class=\"s\">'email'</span><span class=\"o\">]);</span>\n\n    <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">User</span><span class=\"o\">?&gt;</span> <span class=\"n\">signIn</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n        <span class=\"n\">GoogleSignInAuthentication</span> <span class=\"n\">googleAugh</span><span class=\"o\">;</span>\n        <span class=\"n\">AuthCredential</span> <span class=\"n\">credential</span><span class=\"o\">;</span>\n        \n        <span class=\"n\">googleUser</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">googleSignIn</span><span class=\"o\">.</span><span class=\"na\">signIn</span><span class=\"o\">();</span>\n        \n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">googleUser</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        \n        <span class=\"n\">googleAuth</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">googleUser</span><span class=\"o\">!.</span><span class=\"na\">authentication</span><span class=\"o\">;</span>\n        <span class=\"n\">credential</span> <span class=\"o\">=</span> <span class=\"n\">GoogleAuthProvider</span><span class=\"o\">.</span><span class=\"na\">credential</span><span class=\"o\">(</span>\n            <span class=\"nl\">idToken:</span> <span class=\"n\">googleAuth</span><span class=\"o\">.</span><span class=\"na\">idToekn</span><span class=\"o\">,</span>\n            <span class=\"nl\">accessToekn:</span> <span class=\"n\">googleAuth</span><span class=\"o\">.</span><span class=\"na\">accessToken</span><span class=\"o\">,</span>\n        <span class=\"o\">);</span>\n        \n        <span class=\"kd\">final</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"na\">signInWithCredential</span><span class=\"o\">(</span><span class=\"n\">credential</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">user</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n    <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">signOut</span><span class=\"o\">()</span> <span class=\"n\">async</span><span class=\"o\">{</span>\n        <span class=\"n\">await</span> <span class=\"n\">googleSignIn</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n        <span class=\"n\">await</span> <span class=\"n\">_auth</span><span class=\"o\">.</span><span class=\"na\">signOut</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n    <span class=\"n\">User</span><span class=\"o\">?</span> <span class=\"n\">currentUser</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">_auth</span><span class=\"o\">.</span><span class=\"na\">currentUser</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n</div></details>\n<h1 data-sourcepos=\"136:1-136:14\">\n<span id=\"2-firestore\" class=\"fragment\"></span><a href=\"#2-firestore\"><i class=\"fa fa-link\"></i></a>2. Firestore</h1>\n<p data-sourcepos=\"138:1-138:77\">次はFirestoreです、使うパッケージは<code>cloud_firestore</code>だけです</p>\n<p data-sourcepos=\"140:1-140:191\">Firestoreとは何か、については<a href=\"https://firebase.google.com/docs/firestore?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>を見てください、dart以外の言語で使いたい場合にも参考になります</p>\n<p data-sourcepos=\"142:1-144:203\">データ構造はこのような感じです(Firebaseの公式ドキュメントの画像です)<br>\n<a href=\"https://camo.qiitausercontent.com/9035f1d81f74343a3bf2b553a2589fcb94ad322b/68747470733a2f2f66697265626173652e676f6f676c652e636f6d2f7374617469632f646f63732f6669726573746f72652f696d616765732f7374727563747572652d646174612e706e673f686c3d6a61\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Ffirebase.google.com%2Fstatic%2Fdocs%2Ffirestore%2Fimages%2Fstructure-data.png%3Fhl%3Dja?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3456b6559ddd7fc0d63b4b7e997a927a\" width=\"360\" data-canonical-src=\"https://firebase.google.com/static/docs/firestore/images/structure-data.png?hl=ja\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Ffirebase.google.com%2Fstatic%2Fdocs%2Ffirestore%2Fimages%2Fstructure-data.png%3Fhl%3Dja?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3d57b0068ce2115a6991ae6e59c4c48a 1x\" loading=\"lazy\"></a><br>\ncollection(フォルダ)の中にdocument(データの塊)があり、その中にdataが入っているというものです、documentの中には更にsubCollectionを追加することもできます</p>\n<p data-sourcepos=\"146:1-148:81\">今回のアプリではユーザー情報などのアプリを使うのに必要な情報を全てFirestoreに保存しました<br>\nそのため情報の種類毎にクラスを定義してオブジェクトを生成してUI側に渡すという設計をしています<br>\nオブジェクトの取得のために静的メンバ関数を定義しました</p>\n<p data-sourcepos=\"150:1-150:308\">情報毎にcollectionを作成しdocumentを追加しています、今回は汎用的な例として<code>hoge</code>collectionの中にkeyが<code>fuga</code>で<code>key: string</code> <code>element1: string</code> <code>element2: int</code> <code>element3: array</code>の要素を持ったdocumentの取得(と更新及び登録)についてのコードを示します</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"152:1-209:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:cloud_firestore/cloud_firestore.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Hoge</span><span class=\"o\">{</span>\n    <span class=\"kt\">String</span> <span class=\"n\">key</span><span class=\"o\">;</span>\n    <span class=\"kt\">String</span> <span class=\"n\">element1</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">element2</span><span class=\"o\">;</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kd\">dynamic</span><span class=\"o\">&gt;</span> <span class=\"n\">element3</span><span class=\"o\">;</span>\n\n    <span class=\"n\">Hoge</span><span class=\"o\">({</span>\n          <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">,</span>\n          <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">element1</span><span class=\"o\">,</span>\n          <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">element2</span><span class=\"o\">,</span>\n          <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">element3</span>\n    <span class=\"o\">});</span>\n\n    <span class=\"n\">Hoge</span><span class=\"o\">.</span><span class=\"na\">fromJson</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">Object</span><span class=\"o\">?&gt;</span> <span class=\"n\">json</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">[</span><span class=\"s\">'key'</span><span class=\"o\">]</span> <span class=\"k\">as</span> <span class=\"kt\">String</span><span class=\"o\">,</span>\n          <span class=\"n\">element1</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">[</span><span class=\"s\">'element1'</span><span class=\"o\">]</span> <span class=\"k\">as</span> <span class=\"kt\">String</span><span class=\"o\">,</span>\n          <span class=\"n\">element2</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">[</span><span class=\"s\">'element2'</span><span class=\"o\">]</span> <span class=\"k\">as</span> <span class=\"kt\">int</span><span class=\"o\">,</span>\n          <span class=\"n\">element3</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">[</span><span class=\"s\">'element3'</span><span class=\"o\">]</span> <span class=\"k\">as</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kd\">dynamic</span><span class=\"o\">&gt;;</span>\n    \n    <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">Object</span><span class=\"o\">?&gt;</span> <span class=\"n\">toJson</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"o\">{</span>\n            <span class=\"s\">'key'</span><span class=\"o\">:</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n            <span class=\"s\">'element1'</span><span class=\"o\">:</span> <span class=\"n\">element1</span><span class=\"o\">,</span>\n            <span class=\"s\">'element2'</span><span class=\"o\">:</span> <span class=\"n\">element2</span><span class=\"o\">,</span>\n            <span class=\"s\">'element3'</span><span class=\"o\">:</span> <span class=\"n\">element3</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">DocumentRederence</span><span class=\"o\">&lt;</span><span class=\"n\">Hoge</span><span class=\"o\">&gt;</span> <span class=\"n\">_getRef</span><span class=\"o\">(</span><span class=\"kt\">String</span> <span class=\"n\">key</span><span class=\"o\">){</span>\n        <span class=\"k\">return</span> <span class=\"n\">FirebaseFirestore</span><span class=\"o\">.</span><span class=\"na\">instance</span>\n            <span class=\"o\">.</span><span class=\"na\">collection</span><span class=\"o\">(</span><span class=\"s\">'hoge'</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">doc</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withConverter</span><span class=\"o\">&lt;</span><span class=\"n\">Hoge</span><span class=\"o\">&gt;(</span>\n                <span class=\"nl\">fromFirestore:</span> <span class=\"o\">(</span><span class=\"n\">snapshot</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Hoge</span><span class=\"o\">.</span><span class=\"na\">fromJson</span><span class=\"o\">(</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">()!),</span>\n                <span class=\"nl\">toFirestore:</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">toJson</span><span class=\"o\">()</span>\n            <span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">save</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n        <span class=\"n\">await</span> <span class=\"n\">_getRef</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">).</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Hoge</span><span class=\"o\">?&gt;</span> <span class=\"n\">getHoge</span><span class=\"o\">(</span><span class=\"kt\">String</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">_getRef</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">).</span><span class=\"na\">get</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"na\">data</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">//取得</span>\n<span class=\"kd\">final</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">Hoge</span><span class=\"o\">.</span><span class=\"na\">getHoge</span><span class=\"o\">(</span><span class=\"s\">\"fuga\"</span><span class=\"o\">);</span>\n\n<span class=\"c1\">//更新、登録</span>\n<span class=\"kd\">final</span> <span class=\"n\">newData</span> <span class=\"o\">=</span> <span class=\"n\">Hoge</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s\">\"key\"</span><span class=\"o\">,</span> <span class=\"n\">element1</span><span class=\"o\">=</span><span class=\"s\">\"element1\"</span><span class=\"o\">,</span> <span class=\"n\">element2</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">element3</span><span class=\"o\">=[</span><span class=\"s\">\"hogehoge\"</span><span class=\"o\">]);</span>\n<span class=\"n\">await</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">();</span>\n</code></pre></div></div>\n<p data-sourcepos=\"211:1-212:235\">converterを使うことでDocumentReferenceから直接オブジェクトを生成でき、登録や更新をするときも自分自身のオブジェクトを関数に渡すだけでDBを操作できます<br>\n<code>fromJson</code>の名前付きコンストラクタや<code>toJson</code>などの関数はconverterを使うのに必要な関数です、要素の増減はこの2つの関数を調整してあげるだけでできるのでとても楽になります</p>\n<h1 data-sourcepos=\"214:1-214:34\">\n<span id=\"3-tensorflowliteと画像処理\" class=\"fragment\"></span><a href=\"#3-tensorflowlite%E3%81%A8%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>3. tensorflowLiteと画像処理</h1>\n<p data-sourcepos=\"216:1-218:104\">続いてはtensorflowLiteを用いた画像分類とそのための画像処理(前処理)に関してです<br>\ntensorflowLiteのモデルは自作したtensorflowモデルをtflite形式に変換して実装しました<br>\ntensorflowモデルについては鈴鹿高専Advent Calendar 2022 3日目の記事を見てください</p>\n<h2 data-sourcepos=\"220:1-220:32\">\n<span id=\"tensorflowモデル-to-tflite\" class=\"fragment\"></span><a href=\"#tensorflow%E3%83%A2%E3%83%87%E3%83%AB-to-tflite\"><i class=\"fa fa-link\"></i></a>tensorflowモデル to tflite</h2>\n<p data-sourcepos=\"221:1-222:78\">まずはflutterでtensorflowを使うためにモデルを変換するところを説明します<br>\n変換はpythonで簡単にできるのでコードを示して終わりです</p>\n<div class=\"code-frame\" data-lang=\"py\" data-sourcepos=\"224:1-241:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"n\">tf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">load_model</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow_addons</span> <span class=\"k\">as</span> <span class=\"n\">tfa</span>\n\n<span class=\"n\">modelPath</span> <span class=\"o\">=</span> <span class=\"s\">\"./model.h5\"</span> <span class=\"c1\">#kerasモデルファイルのパス\n</span>\n<span class=\"c1\">#modelの読み込み rrelu関数を使ったモデルだがtfliteには無いのでカスタムオブジェクトとして追加\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">load_model</span><span class=\"p\">(</span><span class=\"n\">modelPath</span><span class=\"p\">,</span> <span class=\"n\">custom_objects</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"rrelu\"</span><span class=\"p\">:</span> <span class=\"n\">tfa</span><span class=\"p\">.</span><span class=\"n\">activations</span><span class=\"p\">.</span><span class=\"n\">rrelu</span><span class=\"p\">})</span>\n\n<span class=\"c1\">#convert\n</span><span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">lite</span><span class=\"p\">.</span><span class=\"n\">TFLiteConverter</span><span class=\"p\">.</span><span class=\"n\">from_keras_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"n\">converter</span><span class=\"p\">.</span><span class=\"n\">optimizations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tf</span><span class=\"p\">.</span><span class=\"n\">lite</span><span class=\"p\">.</span><span class=\"n\">Optimize</span><span class=\"p\">.</span><span class=\"n\">DEFAULT</span><span class=\"p\">]</span>\n<span class=\"n\">tflite_model</span> <span class=\"o\">=</span> <span class=\"n\">converter</span><span class=\"p\">.</span><span class=\"n\">convert</span><span class=\"p\">()</span>\n\n<span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"./model.tflite\"</span><span class=\"p\">,</span> <span class=\"s\">\"wb\"</span><span class=\"p\">).</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">tflite_model</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"243:1-243:24\">これで終わりです</p>\n<h2 data-sourcepos=\"245:1-245:21\">\n<span id=\"前処理と推論\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%87%A6%E7%90%86%E3%81%A8%E6%8E%A8%E8%AB%96\"><i class=\"fa fa-link\"></i></a>前処理と推論</h2>\n<p data-sourcepos=\"247:1-247:218\">前処理と推論では<code>dart:math</code> <code>package:image/image.dart</code> <code>package:tflite_flutter/tflite_flutter.dart</code> <code>package:tflite_flutter_helper/tflite_flutter_helper.dart</code> <code>package:collection/collection.dart</code>を使います</p>\n<h3 data-sourcepos=\"249:1-249:13\">\n<span id=\"前処理\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>前処理</h3>\n<p data-sourcepos=\"250:1-251:205\">前処理では入力画像を推論モデルに入力できる形式に変換します<br>\n今回は推論モデルの入力サイズが(height, width) = (384, 216)だったので、縦横の縮尺率が等しくなるよう計算どちらに合わせるかを計算して変換させています</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"253:1-278:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'dart:math'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:image/image.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:tflite_flutter/tflite_flutter.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:tflite_flutter_helper/tflite_flutter_helper.dart'</span><span class=\"o\">;</span>\n\n<span class=\"n\">TensorImage</span> <span class=\"nf\">_preProcess</span><span class=\"p\">(</span><span class=\"n\">Image</span> <span class=\"n\">_inputImage</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">216</span><span class=\"o\">;</span>\n    <span class=\"kd\">final</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">384</span><span class=\"o\">;</span>\n    <span class=\"c1\">//リサイズする倍率の計算</span>\n    <span class=\"kd\">final</span> <span class=\"n\">resizeRatio</span> <span class=\"o\">=</span>\n        <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">height</span><span class=\"o\">,</span> <span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">width</span><span class=\"o\">);</span>\n    <span class=\"c1\">//リサイズ後のサイズ</span>\n    <span class=\"kd\">final</span> <span class=\"n\">resizedWidth</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">width</span> <span class=\"o\">*</span> <span class=\"n\">resizeRatio</span><span class=\"o\">).</span><span class=\"na\">floor</span><span class=\"o\">();</span>\n    <span class=\"kd\">final</span> <span class=\"n\">resizedHeight</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">height</span> <span class=\"o\">*</span> <span class=\"n\">resizeRatio</span><span class=\"o\">).</span><span class=\"na\">floor</span><span class=\"o\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">ImageProcessorBuilder</span><span class=\"o\">()</span>\n        <span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">ResizeOp</span><span class=\"o\">(</span>\n            <span class=\"n\">resizedHeight</span><span class=\"o\">,</span> <span class=\"n\">resizedWidth</span><span class=\"o\">,</span> <span class=\"n\">ResizeMethod</span><span class=\"o\">.</span><span class=\"na\">NEAREST_NEIGHBOUR</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">ResizeWithCropOrPadOp</span><span class=\"o\">(</span>\n          <span class=\"n\">height</span><span class=\"o\">,</span>\n          <span class=\"n\">width</span><span class=\"o\">,</span>\n        <span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">()</span>\n        <span class=\"o\">.</span><span class=\"na\">process</span><span class=\"o\">(</span><span class=\"n\">_inputImage</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h3 data-sourcepos=\"280:1-280:10\">\n<span id=\"推論\" class=\"fragment\"></span><a href=\"#%E6%8E%A8%E8%AB%96\"><i class=\"fa fa-link\"></i></a>推論</h3>\n<p data-sourcepos=\"281:1-284:69\">これで前処理ができたので推論をさせます<br>\nまずはtfliteのモデルをインポートし、推論するためのオブジェクトのようなものを生成します<br>\n推論モデルのトレーニングで、各ピクセルの値を255で割って正規化していたのでその処理を一緒に埋め込んで読み込みます<br>\n分類ラベルの読み込みもこのタイミングでやります</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"286:1-330:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">// 必要な変数</span>\n<span class=\"kt\">bool</span> <span class=\"n\">_isInited</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"kt\">bool</span> <span class=\"n\">_isModelLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"kt\">bool</span> <span class=\"n\">_isLabelsLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">Interpreter</span> <span class=\"n\">_interpreter</span><span class=\"o\">;</span>\n<span class=\"kd\">final</span> <span class=\"n\">_interpreterOptions</span> <span class=\"o\">=</span> <span class=\"n\">InterpreterOptions</span><span class=\"o\">();</span>\n<span class=\"n\">late</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">_inputShape</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">_outputShape</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">TensorBuffer</span> <span class=\"n\">_outputBuffer</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">TfLiteType</span> <span class=\"n\">_inputType</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">TfLiteType</span> <span class=\"n\">_outputType</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">TensorImage</span> <span class=\"n\">_inputImage</span><span class=\"o\">;</span>\n<span class=\"n\">NormalizeOp</span> <span class=\"kd\">get</span> <span class=\"n\">_postProcessNormalizeOp</span> <span class=\"o\">=&gt;</span> <span class=\"n\">NormalizeOp</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"n\">late</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">labels</span><span class=\"o\">;</span>\n<span class=\"n\">late</span> <span class=\"n\">SequentialProcessor</span><span class=\"o\">&lt;</span><span class=\"n\">TensorBuffer</span><span class=\"o\">&gt;</span> <span class=\"n\">_probabilityProcessor</span><span class=\"o\">;</span>\n\n<span class=\"c1\">/// モデルの読み込み</span>\n<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">loadModel</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">_isModelLoaded</span><span class=\"o\">)</span> <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">_interpreter</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">Interpreter</span><span class=\"o\">.</span><span class=\"na\">fromAsset</span><span class=\"o\">(</span><span class=\"s\">\"model.tflite\"</span><span class=\"o\">,</span>\n            <span class=\"nl\">options:</span> <span class=\"n\">_interpreterOptions</span><span class=\"o\">);</span>\n        <span class=\"n\">_inputShape</span> <span class=\"o\">=</span> <span class=\"n\">_interpreter</span><span class=\"o\">.</span><span class=\"na\">getInputTensor</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">shape</span><span class=\"o\">;</span>\n        <span class=\"n\">_inputType</span> <span class=\"o\">=</span> <span class=\"n\">_interpreter</span><span class=\"o\">.</span><span class=\"na\">getInputTensor</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">type</span><span class=\"o\">;</span>\n        <span class=\"n\">_outputShape</span> <span class=\"o\">=</span> <span class=\"n\">_interpreter</span><span class=\"o\">.</span><span class=\"na\">getOutputTensor</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">shape</span><span class=\"o\">;</span>\n        <span class=\"n\">_outputType</span> <span class=\"o\">=</span> <span class=\"n\">_interpreter</span><span class=\"o\">.</span><span class=\"na\">getOutputTensor</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">type</span><span class=\"o\">;</span>\n        <span class=\"n\">_outputBuffer</span> <span class=\"o\">=</span> <span class=\"n\">TensorBuffer</span><span class=\"o\">.</span><span class=\"na\">createFixedSize</span><span class=\"o\">(</span><span class=\"n\">_outputShape</span><span class=\"o\">,</span> <span class=\"n\">_outputType</span><span class=\"o\">);</span>\n        <span class=\"n\">_probabilityProcessor</span> <span class=\"o\">=</span>\n            <span class=\"n\">TensorProcessorBuilder</span><span class=\"o\">().</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">_postProcessNormalizeOp</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">();</span>\n        <span class=\"n\">_isModelLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"n\">Exception</span><span class=\"o\">(</span><span class=\"s\">\"Failed to load model\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">/// ラベルの読み込み</span>\n<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">loadLabels</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">_isLabelsLoaded</span><span class=\"o\">)</span> <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">FileUtil</span><span class=\"o\">.</span><span class=\"na\">loadLabels</span><span class=\"o\">(</span><span class=\"s\">\"assets/labels.txt\"</span><span class=\"o\">);</span>\n    <span class=\"n\">_isLabelsLoaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"331:1-331:129\">これで読み込みはできたので推論する処理を書きます、変数は上記のものが生きているとします</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"333:1-384:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">/// 推論</span>\n<span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">predict</span><span class=\"o\">(</span><span class=\"kt\">Object</span> <span class=\"n\">image</span><span class=\"o\">)</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">_isInited</span><span class=\"o\">)</span> <span class=\"n\">await</span> <span class=\"n\">init</span><span class=\"o\">();</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"k\">is</span> <span class=\"n\">CameraImage</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">ImageUtils</span><span class=\"o\">.</span><span class=\"na\">convertYUV420ToImage</span><span class=\"o\">(</span><span class=\"n\">image</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"k\">is</span><span class=\"o\">!</span> <span class=\"n\">Image</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"n\">Exception</span><span class=\"o\">(</span><span class=\"s\">\"Invalid image type\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">_inputImage</span> <span class=\"o\">=</span> <span class=\"n\">TensorImage</span><span class=\"o\">(</span><span class=\"n\">_inputType</span><span class=\"o\">);</span>\n    <span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">loadImage</span><span class=\"o\">(</span><span class=\"n\">image</span><span class=\"o\">);</span>\n    <span class=\"n\">_inputImage</span> <span class=\"o\">=</span> <span class=\"n\">_preProcess</span><span class=\"o\">();</span>\n\n    <span class=\"n\">_interpreter</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">(</span><span class=\"n\">_inputImage</span><span class=\"o\">.</span><span class=\"na\">buffer</span><span class=\"o\">,</span> <span class=\"n\">_outputBuffer</span><span class=\"o\">.</span><span class=\"na\">getBuffer</span><span class=\"o\">());</span>\n    <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">labeledProb</span> <span class=\"o\">=</span> <span class=\"n\">TensorLabel</span><span class=\"o\">.</span><span class=\"na\">fromList</span><span class=\"o\">(</span>\n            <span class=\"n\">labels</span><span class=\"o\">,</span> <span class=\"n\">_probabilityProcessor</span><span class=\"o\">.</span><span class=\"na\">process</span><span class=\"o\">(</span><span class=\"n\">_outputBuffer</span><span class=\"o\">))</span>\n        <span class=\"o\">.</span><span class=\"na\">getMapWithFloatValue</span><span class=\"o\">();</span>\n    <span class=\"kd\">final</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">getSortedProbability</span><span class=\"o\">(</span><span class=\"n\">labeledProb</span><span class=\"o\">);</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"o\">&gt;</span> <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"o\">[];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">var</span> <span class=\"n\">result</span> <span class=\"k\">in</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">categories</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">Category</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">categories</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">/// 確率が高い順にソート</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">MapEntry</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">getSortedProbability</span><span class=\"o\">(</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">labeledProb</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kd\">var</span> <span class=\"n\">pq</span> <span class=\"o\">=</span> <span class=\"n\">PriorityQueue</span><span class=\"o\">&lt;</span><span class=\"n\">MapEntry</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;&gt;(</span><span class=\"n\">compare</span><span class=\"o\">);</span>\n    <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"n\">labeledProb</span><span class=\"o\">.</span><span class=\"na\">entries</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">// sort</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">MapEntry</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">sorted</span> <span class=\"o\">=</span> <span class=\"o\">[];</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"na\">isNotEmpty</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sorted</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"na\">removeFirst</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">sorted</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">///　ソートする際の基準</span>\n<span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"n\">MapEntry</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">MapEntry</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">&gt;</span> <span class=\"n\">e2</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">==</span> <span class=\"n\">e2</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"386:1-387:144\">今回は推論結果を扱いやすいよう確率が高い順にソートされた<code>Category</code>クラスの配列を返しています<br>\n<code>Category</code>クラスは<code>tflite_flutter_helper</code>に定義されているクラスで、ラベルと確率をメンバに持っているものです</p>\n<h1 data-sourcepos=\"389:1-389:17\">\n<span id=\"4-おわりに\" class=\"fragment\"></span><a href=\"#4-%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>4. おわりに</h1>\n<p data-sourcepos=\"390:1-391:146\">今回の開発ではDB設計を変更することが何回かありましたが隠蔽化していたおかげでUI側への影響を最小限に抑えることができました<br>\nでも、そもそもDB設計を何回も変更することが良くないので初めにきちんと設計をするべきだったと思います</p>\n<p data-sourcepos=\"393:1-393:185\">去年はRealtime Databaseを使い今年はFirestoreを使いましたが、クエリをそんなに使わないので正直どちらでも良いのではと思ってしまいました</p>\n<p data-sourcepos=\"395:1-396:240\">tfliteを用いた画像分類では、<code>tflite_flutter</code>パッケージの公式がサンプルコードを載せていたので実装自体はすぐに終わりました<br>\nただ、機械学習についての知識が乏しく前処理で何をしているかを理解していなかったので、学習時と推論時で前処理のやり方を統一していないなどというミスをしていました...</p>\n<p data-sourcepos=\"398:1-398:66\">まだまだよわよわだなと改めて感じた開発でした</p>\n",
    "body": "この記事は鈴鹿高専Advent Calendar 2022 24日目の記事です\n\nhttps://qiita.com/advent-calendar/2022/snct\n\n今回はPCKに向けたアプリ開発で、DBや画像認識などのユーザーからは直接見えない処理の実装を担当したのでそれについて書いていきます\n\n# 0. はじめに\n今回は全てをクラスとして実装し、UI側(MVCのView？)では直接パッケージを叩かずに済むよう隠蔽化しました\nこうするとDB設計を変えてもインターフェースを変えずに済んだり、同じ処理を内部で使いまわしたりできるのでとてもやりやすかったです\n\n# 1. firebaseAuth\n\nではまず始めにfirebase authentication、特にgoogleアカウントでの認証の実装についてです\n使うパッケージは`firebase_auth`と`google_sign_in`の２つです\n`firebase_auth`にgoogleSignInの関数が用意されているという浅い考えを持っていたので、実装当初は少しめんどくさく感じました\n\n## ログイン処理\n\nまずはログイン処理の流れを説明します\n\n1. googleアカウントへのサインイン画面を出してログインするアカウントを選択してもらう\n    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1021455/f39f39e4-2510-2467-1566-60a01c783e98.png\" width=\"360\"/>\n    これは`google_sign_in`パッケージはを使います\n\n2. どのアカウントでログインしたかの情報が取れるので、そのアカウントのauthentication(認証)を取得し、firebaseにログインするために必要なcredential(資格証明)を取得\n    これは`firebase_auth`に必要な関数が全てあります\n3. 最後に取得したcredentialをfirebaseAuthの認証する関数に渡してログイン完了\n\nここまでのコードを書くと\n```dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\n\nFuture<User?> signIn() async {\n    GoogleSignInAuthentication googleAuth;\n    AuthCredential credential;\n    GoogleSignInAccount? googleUser;\n    final auth = FirebaseAuth.instance;\n    \n    final googleSignIn = GoogleSignIn(scope: ['email']);\n    googleUser = await googleSignIn.signIn(); //サインインするアカウントを選択してもらう\n    \n    //アカウントが取得できなかった場合\n    if(googleUser == null){\n        return null;\n    }\n\n    //アカウント情報から認証情報を取得\n    googleAuth = await googleUser!.authentication;\n    credential = GoogleAuthProvider.credential(\n        idToken: googleAuth.idToekn,\n        accessToekn: googleAuth.accessToken,\n    );\n    \n    //firebaseAuthで認証(サインイン)する\n    final result = await auth.signInWithCredential(credential);\n    return result.user;\n}\n```\n\n## ログイン中のユーザー情報の取得\nこれはとても簡単なのでコードを紹介するだけにします\n```dart\nUser? currentUser(){\n    return FIrebaseAuth.instance.currentUser;\n}\n```\n\n## ログアウト処理\n最後にログアウト処理です\nfirebaseAuthでログアウトすれば良いだけと思っていましたが違いました(ここでバグを生みました...)\n`google_sign_in`にはログインに用いたgoogleアカウントの情報が、`firebase_auth`には認証情報でログインしたという情報が保存されています、そのため両方のパッケージでログアウト処理をしないといけません\n\n処理としてはとても単純で\n```dart\nFuture<void> signOut() async {\n    awiat googleSignIn.signOut();\n    await FirebaseAuth.instance.signOut();\n    return;\n}\n```\nこれでログアウトが実装できます\n\n## アプリに実装したクラス\nログイン認証のためのインスタンスが生えまくっても色々めんどうなのでシングルトンパターンを採用しました\n<details><summary>コードはこちら</summary><div>\n\n```dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\n\nclass Auth{\n    static final Auth _instance = Auth._internal();\n    final _auth = FIrebasAuth.instance;\n    Auth._internal();\n    factory Auth() => _instance;\n\n    GoogleSignInAccount? googleUser;\n    \n    final googleSignIn = GoogleSignIn(scope: ['email']);\n\n    Future<User?> signIn() async {\n        GoogleSignInAuthentication googleAugh;\n        AuthCredential credential;\n        \n        googleUser = await googleSignIn.signIn();\n        \n        if(googleUser == null){\n            return null;\n        }\n        \n        googleAuth = await googleUser!.authentication;\n        credential = GoogleAuthProvider.credential(\n            idToken: googleAuth.idToekn,\n            accessToekn: googleAuth.accessToken,\n        );\n        \n        final result = await auth.signInWithCredential(credential);\n        return result.user;\n    }\n    \n    Future<void> signOut() async{\n        await googleSignIn.signOut();\n        await _auth.signOut();\n        return;\n    }\n    \n    User? currentUser() {\n        return _auth.currentUser;\n    }\n}\n```\n\n</div></details>\n\n# 2. Firestore\n\n次はFirestoreです、使うパッケージは`cloud_firestore`だけです\n\nFirestoreとは何か、については[こちら](https://firebase.google.com/docs/firestore?hl=ja)を見てください、dart以外の言語で使いたい場合にも参考になります\n\nデータ構造はこのような感じです(Firebaseの公式ドキュメントの画像です)\n<img src=\"https://firebase.google.com/static/docs/firestore/images/structure-data.png?hl=ja\" width=\"360\"/>\ncollection(フォルダ)の中にdocument(データの塊)があり、その中にdataが入っているというものです、documentの中には更にsubCollectionを追加することもできます\n\n今回のアプリではユーザー情報などのアプリを使うのに必要な情報を全てFirestoreに保存しました\nそのため情報の種類毎にクラスを定義してオブジェクトを生成してUI側に渡すという設計をしています\nオブジェクトの取得のために静的メンバ関数を定義しました\n\n情報毎にcollectionを作成しdocumentを追加しています、今回は汎用的な例として`hoge`collectionの中にkeyが`fuga`で`key: string` `element1: string` `element2: int` `element3: array`の要素を持ったdocumentの取得(と更新及び登録)についてのコードを示します\n\n```dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\nclass Hoge{\n    String key;\n    String element1;\n    int element2;\n    List<dynamic> element3;\n\n    Hoge({\n          required this.key,\n          required this.element1,\n          required this.element2,\n          required this.element3\n    });\n\n    Hoge.fromJson(Map<String, Object?> json)\n        : key = json['key'] as String,\n          element1 = json['element1'] as String,\n          element2 = json['element2'] as int,\n          element3 = json['element3'] as List<dynamic>;\n    \n    Map<String, Object?> toJson(){\n        return {\n            'key': key,\n            'element1': element1,\n            'element2': element2,\n            'element3': element3,\n        }\n    }\n\n    static DocumentRederence<Hoge> _getRef(String key){\n        return FirebaseFirestore.instance\n            .collection('hoge')\n            .doc(key)\n            .withConverter<Hoge>(\n                fromFirestore: (snapshot, _) => Hoge.fromJson(snapshot.data()!),\n                toFirestore: (value, _) => value.toJson()\n            );\n    }\n\n    Future<void> save() async {\n        await _getRef(key).set(this);\n    }\n\n    static Future<Hoge?> getHoge(String key) async {\n        final doc = await _getRef(key).get();\n        return doc.data();\n    }\n}\n\n//取得\nfinal data = await Hoge.getHoge(\"fuga\");\n\n//更新、登録\nfinal newData = Hoge(key=\"key\", element1=\"element1\", element2=2, element3=[\"hogehoge\"]);\nawait newData.save();\n```\n\nconverterを使うことでDocumentReferenceから直接オブジェクトを生成でき、登録や更新をするときも自分自身のオブジェクトを関数に渡すだけでDBを操作できます\n`fromJson`の名前付きコンストラクタや`toJson`などの関数はconverterを使うのに必要な関数です、要素の増減はこの2つの関数を調整してあげるだけでできるのでとても楽になります\n\n# 3. tensorflowLiteと画像処理\n\n続いてはtensorflowLiteを用いた画像分類とそのための画像処理(前処理)に関してです\ntensorflowLiteのモデルは自作したtensorflowモデルをtflite形式に変換して実装しました\ntensorflowモデルについては鈴鹿高専Advent Calendar 2022 3日目の記事を見てください\n\n## tensorflowモデル to tflite\nまずはflutterでtensorflowを使うためにモデルを変換するところを説明します\n変換はpythonで簡単にできるのでコードを示して終わりです\n\n```py\nimport tensorflow as tf\nimport os\nfrom keras.models import load_model\nimport tensorflow_addons as tfa\n\nmodelPath = \"./model.h5\" #kerasモデルファイルのパス\n\n#modelの読み込み rrelu関数を使ったモデルだがtfliteには無いのでカスタムオブジェクトとして追加\nmodel = load_model(modelPath, custom_objects={\"rrelu\": tfa.activations.rrelu})\n\n#convert\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\ntflite_model = converter.convert()\n\nopen(\"./model.tflite\", \"wb\").write(tflite_model)\n```\n\nこれで終わりです\n\n## 前処理と推論\n\n前処理と推論では`dart:math` `package:image/image.dart` `package:tflite_flutter/tflite_flutter.dart` `package:tflite_flutter_helper/tflite_flutter_helper.dart` `package:collection/collection.dart`を使います\n\n### 前処理\n前処理では入力画像を推論モデルに入力できる形式に変換します\n今回は推論モデルの入力サイズが(height, width) = (384, 216)だったので、縦横の縮尺率が等しくなるよう計算どちらに合わせるかを計算して変換させています\n\n```dart\nimport 'dart:math';\nimport 'package:image/image.dart';\nimport 'package:tflite_flutter/tflite_flutter.dart';\nimport 'package:tflite_flutter_helper/tflite_flutter_helper.dart';\n\nTensorImage _preProcess(Image _inputImage) {\n    final width = 216;\n    final height = 384;\n    //リサイズする倍率の計算\n    final resizeRatio =\n        max(height / _inputImage.height, width / _inputImage.width);\n    //リサイズ後のサイズ\n    final resizedWidth = (_inputImage.width * resizeRatio).floor();\n    final resizedHeight = (_inputImage.height * resizeRatio).floor();\n    return ImageProcessorBuilder()\n        .add(ResizeOp(\n            resizedHeight, resizedWidth, ResizeMethod.NEAREST_NEIGHBOUR))\n        .add(ResizeWithCropOrPadOp(\n          height,\n          width,\n        ))\n        .build()\n        .process(_inputImage);\n}\n```\n\n### 推論\nこれで前処理ができたので推論をさせます\nまずはtfliteのモデルをインポートし、推論するためのオブジェクトのようなものを生成します\n推論モデルのトレーニングで、各ピクセルの値を255で割って正規化していたのでその処理を一緒に埋め込んで読み込みます\n分類ラベルの読み込みもこのタイミングでやります\n\n```dart\n// 必要な変数\nbool _isInited = false;\nbool _isModelLoaded = false;\nbool _isLabelsLoaded = false;\nlate Interpreter _interpreter;\nfinal _interpreterOptions = InterpreterOptions();\nlate List<int> _inputShape;\nlate List<int> _outputShape;\nlate TensorBuffer _outputBuffer;\nlate TfLiteType _inputType;\nlate TfLiteType _outputType;\nlate TensorImage _inputImage;\nNormalizeOp get _postProcessNormalizeOp => NormalizeOp(0, 1);\nlate List<String> labels;\nlate SequentialProcessor<TensorBuffer> _probabilityProcessor;\n\n/// モデルの読み込み\nFuture<void> loadModel() async {\n    if (_isModelLoaded) return;\n    try {\n        _interpreter = await Interpreter.fromAsset(\"model.tflite\",\n            options: _interpreterOptions);\n        _inputShape = _interpreter.getInputTensor(0).shape;\n        _inputType = _interpreter.getInputTensor(0).type;\n        _outputShape = _interpreter.getOutputTensor(0).shape;\n        _outputType = _interpreter.getOutputTensor(0).type;\n        _outputBuffer = TensorBuffer.createFixedSize(_outputShape, _outputType);\n        _probabilityProcessor =\n            TensorProcessorBuilder().add(_postProcessNormalizeOp).build();\n        _isModelLoaded = true;\n        return;\n    } catch (e) {\n        throw Exception(\"Failed to load model\");\n    }\n}\n\n/// ラベルの読み込み\nFuture<void> loadLabels() async {\n    if (_isLabelsLoaded) return;\n    labels = await FileUtil.loadLabels(\"assets/labels.txt\");\n    _isLabelsLoaded = true;\n    return;\n}\n```\nこれで読み込みはできたので推論する処理を書きます、変数は上記のものが生きているとします\n\n```dart\n/// 推論\nFuture<List<Category>> predict(Object image) async {\n    if (!_isInited) await init();\n    if (image is CameraImage) {\n        image = ImageUtils.convertYUV420ToImage(image);\n    }\n    if (image is! Image) {\n        throw Exception(\"Invalid image type\");\n    }\n    _inputImage = TensorImage(_inputType);\n    _inputImage.loadImage(image);\n    _inputImage = _preProcess();\n\n    _interpreter.run(_inputImage.buffer, _outputBuffer.getBuffer());\n    Map<String, double> labeledProb = TensorLabel.fromList(\n            labels, _probabilityProcessor.process(_outputBuffer))\n        .getMapWithFloatValue();\n    final pred = getSortedProbability(labeledProb);\n    List<Category> categories = [];\n    for (var result in pred) {\n        categories.add(Category(result.key, result.value));\n    }\n    return categories;\n}\n\n/// 確率が高い順にソート\nList<MapEntry<String, double>> getSortedProbability(\n        Map<String, double> labeledProb) {\n    var pq = PriorityQueue<MapEntry<String, double>>(compare);\n    pq.addAll(labeledProb.entries);\n\n    // sort\n    List<MapEntry<String, double>> sorted = [];\n    while (pq.isNotEmpty) {\n        sorted.add(pq.removeFirst());\n    }\n\n    return sorted;\n}\n\n///　ソートする際の基準\nint compare(MapEntry<String, double> e1, MapEntry<String, double> e2) {\n    if (e1.value > e2.value) {\n        return -1;\n    } else if (e1.value == e2.value) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n```\n\n今回は推論結果を扱いやすいよう確率が高い順にソートされた`Category`クラスの配列を返しています\n`Category`クラスは`tflite_flutter_helper`に定義されているクラスで、ラベルと確率をメンバに持っているものです\n\n# 4. おわりに\n今回の開発ではDB設計を変更することが何回かありましたが隠蔽化していたおかげでUI側への影響を最小限に抑えることができました\nでも、そもそもDB設計を何回も変更することが良くないので初めにきちんと設計をするべきだったと思います\n\n去年はRealtime Databaseを使い今年はFirestoreを使いましたが、クエリをそんなに使わないので正直どちらでも良いのではと思ってしまいました\n\ntfliteを用いた画像分類では、`tflite_flutter`パッケージの公式がサンプルコードを載せていたので実装自体はすぐに終わりました\nただ、機械学習についての知識が乏しく前処理で何をしているかを理解していなかったので、学習時と推論時で前処理のやり方を統一していないなどというミスをしていました...\n\nまだまだよわよわだなと改めて感じた開発でした\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-11-11T09:33:23+09:00",
    "group": null,
    "id": "98770edf892175365829",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      },
      {
        "name": "TensorflowLite",
        "versions": []
      }
    ],
    "title": "flutterとfirebaseとtflite",
    "updated_at": "2022-12-04T07:05:16+09:00",
    "url": "https://qiita.com/snct-ukai/items/98770edf892175365829",
    "user": {
      "description": "鈴鹿高専I科\r\nソフトウェア開発を勉強中\r\nパソコン甲子園2021モバイル部門本選出場\r\nパソコン甲子園2022モバイル部門本選出場\r\ntypescript/C++/C#/pythonが少し使える\r\n最近は画像や動画の編集やLive2Dなどでのアニメーション、またblenderで3Dモデリングを学んでいる",
      "facebook_id": "",
      "followees_count": 5,
      "followers_count": 3,
      "github_login_name": "snct-ukai",
      "id": "snct-ukai",
      "items_count": 6,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "Suzuka National College of Technology",
      "permanent_id": 1021455,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/73654679?v=4",
      "team_only": false,
      "twitter_screen_name": "ukai_0417",
      "website_url": "https://snct-ukai.com"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"2:1-2:11\">\n<span id=\"初めに\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>初めに</h1>\n<p data-sourcepos=\"4:1-4:75\">googleMapの基礎的な使い方は以下を参考にしてください。</p>\n<p data-sourcepos=\"6:1-6:54\"><qiita-embed-ogp src=\"https://developers.google.com/maps/documentation?hl=ja\"></qiita-embed-ogp></p>\n<p data-sourcepos=\"8:1-8:54\"><qiita-embed-ogp src=\"https://future-architect.github.io/articles/20211224a/\"></qiita-embed-ogp></p>\n<h1 data-sourcepos=\"10:1-10:26\">\n<span id=\"google_placeについて\" class=\"fragment\"></span><a href=\"#google_place%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>google_placeについて</h1>\n<p data-sourcepos=\"11:1-12:37\">ここのpackageを使用します。<br>\n<a href=\"https://pub.dev/packages/google_place\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/google_place</a></p>\n<h1 data-sourcepos=\"14:1-14:17\">\n<span id=\"解説コード\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>解説コード</h1>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"16:1-35:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'package:google_place/google_place.dart'</span> <span class=\"k\">as</span> <span class=\"n\">google</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:google_place/google_place.dart'</span><span class=\"o\">;</span>\n\n  <span class=\"n\">late</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"na\">GooglePlace</span> <span class=\"n\">googlePlace</span><span class=\"o\">;</span>\n  <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">google</span><span class=\"o\">.</span><span class=\"na\">AutocompletePrediction</span><span class=\"o\">&gt;</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"o\">[];</span>\n  \n  <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">searchPlace</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">word</span> <span class=\"o\">!=</span> <span class=\"s\">''</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"kd\">final</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">googlePlace</span><span class=\"o\">.</span><span class=\"na\">search</span><span class=\"o\">.</span><span class=\"na\">getNearBySearch</span><span class=\"o\">(</span>\n        <span class=\"n\">Location</span><span class=\"o\">(</span><span class=\"nl\">lat:</span> <span class=\"n\">latitude</span><span class=\"o\">,</span> <span class=\"nl\">lng:</span> <span class=\"n\">longitude</span><span class=\"o\">),</span>\n        <span class=\"mi\">10000</span><span class=\"o\">,</span><span class=\"c1\">//TODO 距離</span>\n        <span class=\"nl\">type:</span> <span class=\"s\">'restaurant'</span><span class=\"o\">,</span>\n        <span class=\"nl\">keyword:</span> <span class=\"s\">'吉野家'</span><span class=\"o\">,</span> <span class=\"c1\">//TODO ここに検索したい言葉を入れてください</span>\n      <span class=\"o\">);</span>\n      <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span><span class=\"c1\">//TODO 検索したレストランが出る</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n</code></pre></div></div>\n<p data-sourcepos=\"37:1-37:75\">色々な使い方があると思います。是非試してください。</p>\n<h1 data-sourcepos=\"40:1-40:11\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n<p data-sourcepos=\"41:1-42:759\"><a href=\"https://camo.qiitausercontent.com/808f15b260616ac6c3e3e493f9d8882685fea3d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3637323630392f38376632613438382d633563642d353439642d663037662d3031623434613133313762382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=057400e6a3ed40534f9d462520abc906\" alt=\"Frame 9 (1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3e50085d1b7cfb81c2e16da92f8518f 1x\" loading=\"lazy\"></a><br>\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。</p>\n<h5 data-sourcepos=\"44:1-44:34\">\n<span id=\"homepage-httpsverooxyz\" class=\"fragment\"></span><a href=\"#homepage-httpsverooxyz\"><i class=\"fa fa-link\"></i></a>Homepage: <a href=\"https://veroo.xyz/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://veroo.xyz/</a>\n</h5>\n<h5 data-sourcepos=\"45:1-45:43\">\n<span id=\"discord-urlhttpstcovot0gpsfla\" class=\"fragment\"></span><a href=\"#discord-urlhttpstcovot0gpsfla\"><i class=\"fa fa-link\"></i></a>Discord URL：<a href=\"https://t.co/VoT0gpsflA\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/VoT0gpsflA</a>\n</h5>\n",
    "body": "\n# 初めに\n\ngoogleMapの基礎的な使い方は以下を参考にしてください。\n\nhttps://developers.google.com/maps/documentation?hl=ja\n\nhttps://future-architect.github.io/articles/20211224a/\n\n# google_placeについて\nここのpackageを使用します。\nhttps://pub.dev/packages/google_place\n\n# 解説コード\n\n```dart\nimport 'package:google_place/google_place.dart' as google;\nimport 'package:google_place/google_place.dart';\n\n  late google.GooglePlace googlePlace;\n  List<google.AutocompletePrediction> predictions = [];\n  \n  Future<void> searchPlace() async {\n    if (word != '') {\n      final result = await googlePlace.search.getNearBySearch(\n        Location(lat: latitude, lng: longitude),\n        10000,//TODO 距離\n        type: 'restaurant',\n        keyword: '吉野家', //TODO ここに検索したい言葉を入れてください\n      );\n      print(result);//TODO 検索したレストランが出る\n    }\n  }\n  \n```\n\n色々な使い方があると思います。是非試してください。\n\n\n# 最後に\n![Frame 9 (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png)\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。\n\n##### Homepage: https://veroo.xyz/\n##### Discord URL：https://t.co/VoT0gpsflA \n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-11-28T20:27:36+09:00",
    "group": null,
    "id": "35444618eed463314150",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "GoogleMap",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "[Flutter] google_placeを使って店舗の情報を取得する",
    "updated_at": "2022-12-04T07:03:49+09:00",
    "url": "https://qiita.com/iseruuuuu/items/35444618eed463314150",
    "user": {
      "description": "Flutterを使用した iOS/Android 開発をすることが大好きな文系大学生です✌️\r\n",
      "facebook_id": "",
      "followees_count": 3,
      "followers_count": 7,
      "github_login_name": "iseruuuuu",
      "id": "iseruuuuu",
      "items_count": 42,
      "linkedin_id": "竜太郎-井関-b350ab223/",
      "location": "日本　神奈川県",
      "name": "Ryutaro Iseki",
      "organization": "立正大学",
      "permanent_id": 672609,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/67954894?v=4",
      "team_only": false,
      "twitter_screen_name": "isekiryu",
      "website_url": "https://youtrust.jp/users/iseki"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:167\">本投稿は <a href=\"https://qiita.com/advent-calendar/2022/technology_validation\">テクノロジー検証 Advent Calendar 2022</a> の 4日目として投稿しています。</p>\n<h2 data-sourcepos=\"3:1-5:78\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに　:</h2>\n<p data-sourcepos=\"5:1-6:121\">テクニカルサポート業務に就いている nk-nara と申します。<br>\n1日目も見ていただいていれば、お気づきかもしれませんが、もう一人の中野となります。</p>\n<p data-sourcepos=\"8:1-9:132\">本記事から数回は、Flutter って何だろねというところから始め、<br>\n環境作る時点から悩みつつ、簡単なアプリ実装していく記事を書いていければと考えております。</p>\n<h2 data-sourcepos=\"11:1-13:0\">\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h2>\n<p data-sourcepos=\"14:1-15:74\">私自身は、MS 系の Power Platform 一部 (※2) や<br>\nJavascript を独学で遊んだ程度の知識レベルとなります。</p>\n<p data-sourcepos=\"17:1-17:78\">アプリ開発の経験値がない状態からスタートしています。</p>\n<p data-sourcepos=\"19:1-20:117\">未学習や同様のスキルセットの者による<br>\n感想や意見などからしか得られない栄養素が投稿できれば良いな、と考える次第です。</p>\n<h2 data-sourcepos=\"23:1-25:0\">\n<span id=\"flutter-について--\" class=\"fragment\"></span><a href=\"#flutter-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6--\"><i class=\"fa fa-link\"></i></a>Flutter について  :</h2>\n<p data-sourcepos=\"26:1-28:83\">Flutter は、オープンソースのアプリ開発の環境 (※1) を指します。<br>\n開発およびサポートは Google が行なっており、<br>\n使用する言語はこちらも Google が発表した Dart を利用します。</p>\n<p data-sourcepos=\"30:1-30:86\">Dart の書式は誕生経緯から Javascript に近いものとなっています。</p>\n<p data-sourcepos=\"32:1-32:58\"><strong>◾️初出時期と最新バージョンについて</strong></p>\n<p data-sourcepos=\"34:1-35:79\">参考資料より、下記となります (投稿時点, OSX の場合)<br>\n参考: <a href=\"https://docs.flutter.dev/development/tools/sdk/releases?tab=macos#macos\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.flutter.dev/development/tools/sdk/releases?tab=macos#macos</a></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"37:1-40:3\"><div class=\"highlight\"><pre><code>* Flutter (2018 〜) : 3.3.9\n* Dart (2011 〜) : 2.18.5\n</code></pre></div></div>\n<p data-sourcepos=\"42:1-43:90\">Flutter は 4才、Dart は 11才ということですね。<br>\n※ Flutter と比較して有名な開発環境では、React は2013年の 9才です。</p>\n<p data-sourcepos=\"46:1-47:92\">パッと思い浮かんだ言語とも比較してみました。<br>\n見比べると、フレッシュさがよくわかります ( Wikipedia より雑に参照)</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"49:1-55:3\"><div class=\"highlight\"><pre><code>Javascript 先輩 : 1995年の 27才\nHTML さん : 1997年の 29才\nPython さん : 1991年の 31才\nC 師匠 : 1972年の 50才\nFORTRUN 先生 : 1954年の 68才\n</code></pre></div></div>\n<p data-sourcepos=\"57:1-58:53\">Python が 前二人よりも年上なことや、<br>\nC と FORTRUN の貫禄に圧倒されますねぇ...</p>\n<p data-sourcepos=\"62:1-63:79\"><strong>◾️ Flutter &gt; 開発可能な環境について</strong><br>\niOS と Android のアプリ開発時に、同コードを利用可能です。</p>\n<p data-sourcepos=\"65:1-67:66\">iOS はふわっと Xcode や OSX の環境がいるような話を聞いていましたが、<br>\nそもそも両 OS の処理都合でコードを書き換える必要があるのが一般的です。<br>\nこの点、マルチ環境を想定するなら強いですね。</p>\n<p data-sourcepos=\"69:1-70:66\">その上、Flutter Version 3 はそれまでのバージョン 2.x からの拡張として、<br>\n今年3月の Google I/O conference で発表されています。</p>\n<p data-sourcepos=\"72:1-73:124\">Version 3 による差異について網羅して把握しておりませんが、<br>\n大きな点として、6つの異なるプラットフォームで実行することができるようになりました。</p>\n<p data-sourcepos=\"75:1-76:73\">具体的には iOS、Android に加えて MacOS、Linux、Web、Windows の<br>\nアプリケーションや UI 開発できるようになりました。</p>\n<p data-sourcepos=\"78:1-78:102\">...なんというか、UI にさえ気をつければ提供先の充実具合がすごいですね。</p>\n<p data-sourcepos=\"80:1-81:94\"><strong>◾️ 補足</strong><br>\nFlutter 自体は Qiita でも人気のある素材です (4桁検索結果が出てますね)</p>\n<p data-sourcepos=\"83:1-84:120\">趣旨に沿わない場合は是非是非、有識者の方の Advent Calender 等を見に行きましょう！<br>\n末に投稿時に参考にしたリンク群を列記しております。よろしければ、ご参照ください。</p>\n<h2 data-sourcepos=\"87:1-89:0\">\n<span id=\"環境について\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>環境について</h2>\n<p data-sourcepos=\"90:1-90:84\">ざっくりと今後に予定している環境について触れて行きます。</p>\n<ul data-sourcepos=\"92:1-98:55\">\n<li data-sourcepos=\"92:1-96:0\">\n<p data-sourcepos=\"92:3-94:54\">採用バージョン<br>\n前述でも触れましたが ver 3.x がリリースしていますので<br>\n安定版の最新を採用しようと思います。</p>\n</li>\n<li data-sourcepos=\"97:1-98:55\">\n<p data-sourcepos=\"97:3-98:55\">環境や制約紹介<br>\n開発環境としては、以下を採用します。</p>\n</li>\n</ul>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"99:1-102:3\"><div class=\"highlight\"><pre><code>Macbook Pro Early 2011 ( OSX 10.13.6 )\niPhone 6s Plus ( iOS 15.7.1 )\n</code></pre></div></div>\n<p data-sourcepos=\"103:1-104:78\">もっと新しいモデルも出ていますが、<br>\n私的な検証したアウトプットが主目的ですのでご容赦を。</p>\n<h2 data-sourcepos=\"106:1-108:10\">\n<span id=\"注釈\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E9%87%88\"><i class=\"fa fa-link\"></i></a>注釈</h2>\n<ul data-sourcepos=\"108:1-115:0\">\n<li data-sourcepos=\"108:1-110:81\">※1 :<br>\n厳密には違いますが、一家庭で戯れる程度の<br>\nフレームワークへの理解として、ここでは記載しています。</li>\n<li data-sourcepos=\"111:1-115:0\">※2 :<br>\n中でも Power Apps, Power Automate です。<br>\n残り２つとはまだ戯れていません.</li>\n</ul>\n<h2 data-sourcepos=\"116:1-118:0\">\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h2>\n<p data-sourcepos=\"119:1-119:22\"><strong>基本的な情報</strong></p>\n<ol data-sourcepos=\"120:1-124:0\">\n<li data-sourcepos=\"120:1-120:64\">Flutter とは　- <a href=\"https://aws.amazon.com/jp/what-is/flutter/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://aws.amazon.com/jp/what-is/flutter/</a>\n</li>\n<li data-sourcepos=\"121:1-121:103\">Flutterで始めるモバイルアプリ開発 第1回　 - <a href=\"https://codezine.jp/article/detail/12718\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codezine.jp/article/detail/12718</a>\n</li>\n<li data-sourcepos=\"122:1-122:116\">Flutterとは？始める前に押さえておきたい必須知識を解説 - <a href=\"https://www.sejuku.net/blog/124242\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.sejuku.net/blog/124242</a>\n</li>\n<li data-sourcepos=\"123:1-124:0\">Flutter／Dartとは？ 将来性や勉強法、開発事例を分かりやすく解説 - <a href=\"https://type.jp/et/feature/18222/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://type.jp/et/feature/18222/</a>\n</li>\n</ol>\n<p data-sourcepos=\"125:1-125:24\"><strong>Release について</strong></p>\n<ul data-sourcepos=\"126:1-127:0\">\n<li data-sourcepos=\"126:1-127:0\">Flutter 3が、サポートされるすべてのプラットフォームに対して安定版となり、Material Design 3を拡張 - <a href=\"https://www.infoq.com/jp/news/2022/06/google-flutter-3-dart/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.infoq.com/jp/news/2022/06/google-flutter-3-dart/</a>\n</li>\n</ul>\n<p data-sourcepos=\"128:1-128:32\"><strong>有識者の Advent Calender</strong></p>\n<ol data-sourcepos=\"129:1-131:0\">\n<li data-sourcepos=\"129:1-129:80\">Flutter Advent Calendar 2022 - <a href=\"https://qiita.com/advent-calendar/2022/flutter\" class=\"autolink\">https://qiita.com/advent-calendar/2022/flutter</a>\n</li>\n<li data-sourcepos=\"130:1-131:0\">Flutter大学 Advent Calendar 2022 - <a href=\"https://qiita.com/advent-calendar/2022/flutteruniv\" class=\"autolink\">https://qiita.com/advent-calendar/2022/flutteruniv</a>\n</li>\n</ol>\n<p data-sourcepos=\"132:1-132:24\"><em>最新情報の回収</em>*</p>\n<ul data-sourcepos=\"133:1-134:0\">\n<li data-sourcepos=\"133:1-134:0\">2022 年のFlutterニュースまとめ - <a href=\"https://blog.flutteruniv.com/flutter-news-2022-summarize/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://blog.flutteruniv.com/flutter-news-2022-summarize/</a>\n</li>\n</ul>\n<h2 data-sourcepos=\"135:1-137:0\">\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n<p data-sourcepos=\"138:1-139:123\">次回は環境セットアップしてみようと思います。<br>\nテキストオンリーで情報が少ないですが、最後まで見ていただきありがとうございました。</p>\n",
    "body": "本投稿は [テクノロジー検証 Advent Calendar 2022](https://qiita.com/advent-calendar/2022/technology_validation) の 4日目として投稿しています。\n\nはじめに　: \n---\nテクニカルサポート業務に就いている nk-nara と申します。\n1日目も見ていただいていれば、お気づきかもしれませんが、もう一人の中野となります。\n\n本記事から数回は、Flutter って何だろねというところから始め、\n環境作る時点から悩みつつ、簡単なアプリ実装していく記事を書いていければと考えております。\n\n前提\n---\n\n私自身は、MS 系の Power Platform 一部 (※2) や\nJavascript を独学で遊んだ程度の知識レベルとなります。\n\nアプリ開発の経験値がない状態からスタートしています。\n\n未学習や同様のスキルセットの者による\n感想や意見などからしか得られない栄養素が投稿できれば良いな、と考える次第です。\n\n\nFlutter について  : \n---\n\nFlutter は、オープンソースのアプリ開発の環境 (※1) を指します。\n開発およびサポートは Google が行なっており、\n使用する言語はこちらも Google が発表した Dart を利用します。\n\nDart の書式は誕生経緯から Javascript に近いものとなっています。\n\n**◾️初出時期と最新バージョンについて**\n\n参考資料より、下記となります (投稿時点, OSX の場合)\n参考: https://docs.flutter.dev/development/tools/sdk/releases?tab=macos#macos\n\n```\n* Flutter (2018 〜) : 3.3.9\n* Dart (2011 〜) : 2.18.5\n```\n\nFlutter は 4才、Dart は 11才ということですね。\n※ Flutter と比較して有名な開発環境では、React は2013年の 9才です。\n\n\nパッと思い浮かんだ言語とも比較してみました。\n見比べると、フレッシュさがよくわかります ( Wikipedia より雑に参照)\n\n```\nJavascript 先輩 : 1995年の 27才\nHTML さん : 1997年の 29才\nPython さん : 1991年の 31才\nC 師匠 : 1972年の 50才\nFORTRUN 先生 : 1954年の 68才\n```\n\nPython が 前二人よりも年上なことや、\nC と FORTRUN の貫禄に圧倒されますねぇ...\n\n  \n\n**◾️ Flutter > 開発可能な環境について**\niOS と Android のアプリ開発時に、同コードを利用可能です。\n\niOS はふわっと Xcode や OSX の環境がいるような話を聞いていましたが、\nそもそも両 OS の処理都合でコードを書き換える必要があるのが一般的です。\nこの点、マルチ環境を想定するなら強いですね。\n\nその上、Flutter Version 3 はそれまでのバージョン 2.x からの拡張として、\n今年3月の Google I/O conference で発表されています。\n\nVersion 3 による差異について網羅して把握しておりませんが、\n大きな点として、6つの異なるプラットフォームで実行することができるようになりました。\n\n具体的には iOS、Android に加えて MacOS、Linux、Web、Windows の\nアプリケーションや UI 開発できるようになりました。\n\n...なんというか、UI にさえ気をつければ提供先の充実具合がすごいですね。\n\n**◾️ 補足**\nFlutter 自体は Qiita でも人気のある素材です (4桁検索結果が出てますね)\n\n趣旨に沿わない場合は是非是非、有識者の方の Advent Calender 等を見に行きましょう！\n末に投稿時に参考にしたリンク群を列記しております。よろしければ、ご参照ください。\n\n\n環境について\n---\n\nざっくりと今後に予定している環境について触れて行きます。\n\n* 採用バージョン\n前述でも触れましたが ver 3.x がリリースしていますので\n安定版の最新を採用しようと思います。\n\n\n* 環境や制約紹介\n開発環境としては、以下を採用します。 \n```\nMacbook Pro Early 2011 ( OSX 10.13.6 )\niPhone 6s Plus ( iOS 15.7.1 )\n```\nもっと新しいモデルも出ていますが、\n私的な検証したアウトプットが主目的ですのでご容赦を。\n\n注釈\n---\n* ※1 :  \n厳密には違いますが、一家庭で戯れる程度の \nフレームワークへの理解として、ここでは記載しています。\n* ※2 : \n中でも Power Apps, Power Automate です。 \n残り２つとはまだ戯れていません.\n\n\n参考文献\n---\n\n**基本的な情報**\n1. Flutter とは　- https://aws.amazon.com/jp/what-is/flutter/\n1. Flutterで始めるモバイルアプリ開発 第1回　 - https://codezine.jp/article/detail/12718\n1. Flutterとは？始める前に押さえておきたい必須知識を解説 - https://www.sejuku.net/blog/124242\n1. Flutter／Dartとは？ 将来性や勉強法、開発事例を分かりやすく解説 - https://type.jp/et/feature/18222/\n\n**Release について**\n* Flutter 3が、サポートされるすべてのプラットフォームに対して安定版となり、Material Design 3を拡張 - https://www.infoq.com/jp/news/2022/06/google-flutter-3-dart/\n\n**有識者の Advent Calender**\n1. Flutter Advent Calendar 2022 - https://qiita.com/advent-calendar/2022/flutter\n1. Flutter大学 Advent Calendar 2022 - https://qiita.com/advent-calendar/2022/flutteruniv\n\n*最新情報の回収**\n* 2022 年のFlutterニュースまとめ - https://blog.flutteruniv.com/flutter-news-2022-summarize/\n\n終わりに\n---\n\n次回は環境セットアップしてみようと思います。\nテキストオンリーで情報が少ないですが、最後まで見ていただきありがとうございました。\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-04T01:39:04+09:00",
    "group": null,
    "id": "50b5e0740f6826913772",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "MacOSX",
        "versions": []
      },
      {
        "name": "iOS",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "MacOSX の環境にて iOS アプリを Flutter で開発する前段階のお話",
    "updated_at": "2022-12-04T01:45:54+09:00",
    "url": "https://qiita.com/nk-nara/items/50b5e0740f6826913772",
    "user": {
      "description": "Nara > Chiba",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "nk-nara",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 2986951,
      "profile_image_url": "https://secure.gravatar.com/avatar/6b5a14b89a68095ffcc83ac2e8f6a6cd",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-4:105\">Flutter初学者のひかると申します。<br>\n今年の7月から、未経験エンジニアに転職してもうアドベントカレンダー書く季節になりましたね。<br>\n本題に入りまして、下記の私が作成したこちらの記事にて<br>\n「Tabbarの実装、Tabbarが切り替わる際の色の動的な変化」について学びました。</p>\n<p data-sourcepos=\"6:1-6:49\"><qiita-embed-ogp src=\"https://zenn.dev/hikaru24/articles/4dd35c29c40f37\"></qiita-embed-ogp></p>\n<p data-sourcepos=\"9:1-9:81\">今回はTabbarの細かなデザインについて学びたいと思います。</p>\n<h1 data-sourcepos=\"10:1-10:17\">\n<span id=\"全体コード\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>全体コード</h1>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"12:1-97:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">class</span> <span class=\"nc\">TabPage</span> <span class=\"kd\">extends</span> <span class=\"n\">StatefulWidget</span> <span class=\"o\">{</span>\n  <span class=\"n\">TabPage</span><span class=\"o\">({</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">});</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">;</span>\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">_TabPageState</span> <span class=\"n\">createState</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">_TabPageState</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">_TabPageState</span> <span class=\"kd\">extends</span> <span class=\"n\">State</span><span class=\"o\">&lt;</span><span class=\"n\">TabPage</span><span class=\"o\">&gt;</span> <span class=\"k\">with</span> <span class=\"n\">SingleTickerProviderStateMixin</span> <span class=\"o\">{</span>\n  <span class=\"n\">late</span> <span class=\"n\">TabController</span> <span class=\"n\">_tabController</span><span class=\"o\">;</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"kt\">void</span> <span class=\"n\">initState</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">initState</span><span class=\"o\">();</span>\n    <span class=\"n\">_tabController</span> <span class=\"o\">=</span> <span class=\"n\">TabController</span><span class=\"o\">(</span><span class=\"nl\">length:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"nl\">vsync:</span> <span class=\"k\">this</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n      <span class=\"nl\">appBar:</span> <span class=\"n\">AppBar</span><span class=\"o\">(</span>\n        <span class=\"nl\">title:</span> <span class=\"kd\">const</span> <span class=\"n\">Text</span><span class=\"o\">(</span><span class=\"s\">'選択したタブだけ目立たせる'</span><span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n      <span class=\"nl\">body:</span> <span class=\"n\">AttentionTabBar</span><span class=\"o\">(</span>\n        <span class=\"nl\">controller:</span> <span class=\"n\">_tabController</span><span class=\"o\">,</span>\n        <span class=\"nl\">onTap:</span> <span class=\"o\">(</span><span class=\"n\">tab</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"n\">setState</span><span class=\"o\">(()</span> <span class=\"o\">{});</span>\n        <span class=\"o\">},</span>\n        <span class=\"nl\">tabs:</span> <span class=\"o\">&lt;</span><span class=\"n\">Tab</span><span class=\"o\">&gt;[</span>\n          <span class=\"n\">Tab</span><span class=\"o\">(</span>\n            <span class=\"nl\">child:</span> <span class=\"n\">Text</span><span class=\"o\">(</span>\n              <span class=\"s\">'タブ1'</span><span class=\"o\">,</span>\n              <span class=\"nl\">style:</span> <span class=\"n\">TextStyle</span><span class=\"o\">(</span>\n                  <span class=\"nl\">color:</span> <span class=\"n\">_tabController</span><span class=\"o\">?.</span><span class=\"na\">index</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n                      <span class=\"o\">?</span> <span class=\"kd\">const</span> <span class=\"n\">Color</span><span class=\"o\">(</span><span class=\"mh\">0xFF3D4A50</span><span class=\"o\">)</span>\n                      <span class=\"o\">:</span> <span class=\"kd\">const</span> <span class=\"n\">Color</span><span class=\"o\">(</span><span class=\"mh\">0xFFB3B3B3</span><span class=\"o\">),</span>\n                  <span class=\"nl\">fontSize:</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n            <span class=\"o\">),</span>\n          <span class=\"o\">),</span>\n          <span class=\"n\">Tab</span><span class=\"o\">(</span>\n            <span class=\"nl\">child:</span> <span class=\"n\">Text</span><span class=\"o\">(</span>\n              <span class=\"s\">'タブ2'</span><span class=\"o\">,</span>\n              <span class=\"nl\">style:</span> <span class=\"n\">TextStyle</span><span class=\"o\">(</span>\n                  <span class=\"nl\">color:</span> <span class=\"n\">_tabController</span><span class=\"o\">?.</span><span class=\"na\">index</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n                      <span class=\"o\">?</span> <span class=\"kd\">const</span> <span class=\"n\">Color</span><span class=\"o\">(</span><span class=\"mh\">0xFF3D4A50</span><span class=\"o\">)</span>\n                      <span class=\"o\">:</span> <span class=\"kd\">const</span> <span class=\"n\">Color</span><span class=\"o\">(</span><span class=\"mh\">0xFFB3B3B3</span><span class=\"o\">),</span>\n                  <span class=\"nl\">fontSize:</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n            <span class=\"o\">),</span>\n          <span class=\"o\">),</span>\n        <span class=\"o\">],</span>\n        <span class=\"nl\">tabviews:</span> <span class=\"kd\">const</span> <span class=\"o\">[</span>\n          <span class=\"n\">TabPage1</span><span class=\"o\">(),</span>\n          <span class=\"n\">TabPage2</span><span class=\"o\">(),</span>\n        <span class=\"o\">],</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">AttentionTabBar</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">AttentionTabBar</span><span class=\"o\">({</span>\n    <span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">tabs</span><span class=\"o\">,</span>\n    <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">tabviews</span><span class=\"o\">,</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">onTap</span><span class=\"o\">,</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">controller</span><span class=\"o\">,</span>\n  <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Tab</span><span class=\"o\">&gt;</span> <span class=\"n\">tabs</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Widget</span><span class=\"o\">&gt;</span> <span class=\"n\">tabviews</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Function</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)?</span> <span class=\"n\">onTap</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"n\">TabController</span><span class=\"o\">?</span> <span class=\"n\">controller</span><span class=\"o\">;</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">DefaultTabController</span><span class=\"o\">(</span>\n        <span class=\"nl\">length:</span> <span class=\"n\">tabs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span>\n        <span class=\"nl\">child:</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n            <span class=\"nl\">appBar:</span> <span class=\"n\">TabBar</span><span class=\"o\">(</span>\n              <span class=\"nl\">controller:</span> <span class=\"n\">controller</span><span class=\"o\">,</span>\n              <span class=\"nl\">tabs:</span> <span class=\"n\">tabs</span><span class=\"o\">,</span>\n              <span class=\"nl\">onTap:</span> <span class=\"n\">onTap</span><span class=\"o\">,</span>\n            <span class=\"o\">),</span>\n            <span class=\"nl\">body:</span> <span class=\"n\">TabBarView</span><span class=\"o\">(</span><span class=\"nl\">controller:</span> <span class=\"n\">controller</span><span class=\"o\">,</span> <span class=\"nl\">children:</span> <span class=\"n\">tabviews</span><span class=\"o\">)));</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<h1 data-sourcepos=\"98:1-98:43\">\n<span id=\"tabbar-を-カスタマイズする方法\" class=\"fragment\"></span><a href=\"#tabbar-%E3%82%92-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>TabBar を カスタマイズする方法</h1>\n<p data-sourcepos=\"99:1-99:68\">タブの色を変更するには、indicatorColorに色を追加。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"100:1-104:3\"><div class=\"highlight\"><pre><code><span class=\"n\">TabBar</span><span class=\"o\">(</span>\n  <span class=\"nl\">indicatorColor:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">,</span>\n<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"105:1-105:122\"><a href=\"https://camo.qiitausercontent.com/cf5271580a31065de590d4d44fdb1f3e93c49194/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323030363039342f31396336373231392d653863662d656330622d373838312d3831633764383137323265632e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F19c67219-e8cf-ec0b-7881-81c7d81722ec.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=199e1047a84833a8ea401611b4eb4df5\" alt=\"test1.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/19c67219-e8cf-ec0b-7881-81c7d81722ec.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F19c67219-e8cf-ec0b-7881-81c7d81722ec.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f2823282b6e75de707e08574e1c49548 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"107:1-109:33\">タブのサイズを変更する方法は次のとおりです。<br>\nこれにより、インジケーターのサイズがラベルの幅と等しくなります。デフォルトは<br>\nTabBarIndicatorSize.tab です。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"110:1-114:3\"><div class=\"highlight\"><pre><code><span class=\"n\">TabBar</span><span class=\"o\">(</span>\n  <span class=\"nl\">indicatorSize:</span> <span class=\"n\">TabBarIndicatorSize</span><span class=\"o\">.</span><span class=\"na\">label</span><span class=\"o\">,</span>            \n<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"116:1-116:122\"><a href=\"https://camo.qiitausercontent.com/097cce1ce989895b125c98a6753b7a0aaae60836/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323030363039342f38346563633433622d653131322d653532612d316237322d6161323933373739643761652e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F84ecc43b-e112-e52a-1b72-aa293779d7ae.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=11580480c772508111838394d58df816\" alt=\"test2.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/84ecc43b-e112-e52a-1b72-aa293779d7ae.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F84ecc43b-e112-e52a-1b72-aa293779d7ae.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cd7d8df2a4aaf08e0ff55923d05e2cf2 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"118:1-118:69\">タブの高さを変更するには、indicatorWeightを使用する</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"119:1-123:3\"><div class=\"highlight\"><pre><code><span class=\"n\">TabBar</span><span class=\"o\">(</span>\n  <span class=\"nl\">indicatorWeight:</span> <span class=\"mi\">10</span><span class=\"o\">,</span>      \n<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"125:1-125:122\"><a href=\"https://camo.qiitausercontent.com/fd21e47e310536bfdc47eed342ee7305e776f193/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323030363039342f34343766613563662d623030332d363632642d336239632d3265316233303561373535392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F447fa5cf-b003-662d-3b9c-2e1b305a7559.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4501b1f6b4f27e963c544d7832c5f985\" alt=\"test3.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/447fa5cf-b003-662d-3b9c-2e1b305a7559.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F447fa5cf-b003-662d-3b9c-2e1b305a7559.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=14b93f0e9a13e04ff9e6ad2f4e1fae76 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"127:1-128:120\">インジケータを変更する。<br>\nタブの背景色の色を変更するにはcolor:を使用し、その後色を指定する。例(color: Colors.black)</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"129:1-135:3\"><div class=\"highlight\"><pre><code><span class=\"n\">TabBar</span><span class=\"o\">(</span>\n  <span class=\"nl\">indicator:</span> <span class=\"n\">BoxDecoration</span><span class=\"o\">(</span>\n    <span class=\"nl\">borderRadius:</span> <span class=\"n\">BorderRadius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mi\">50</span><span class=\"o\">),</span>\n    <span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">),</span> \n<span class=\"o\">)</span>\n</code></pre></div></div>\n<p data-sourcepos=\"137:1-137:122\"><a href=\"https://camo.qiitausercontent.com/b0c09ffb557fbecb7546199decec0006585fd83b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323030363039342f33633063316632632d643262372d356261322d386534612d6333303462366361623535622e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F3c0c1f2c-d2b7-5ba2-8e4a-c304b6cab55b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=de52123beda0911299044b8d4e16f1a1\" alt=\"test4.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/3c0c1f2c-d2b7-5ba2-8e4a-c304b6cab55b.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2F3c0c1f2c-d2b7-5ba2-8e4a-c304b6cab55b.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1a40a7f4631faedea9a6bd0a2afd2459 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"139:1-139:45\">水平スクロール可能なタブを作成</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"140:1-142:3\"><div class=\"highlight\"><pre><code><span class=\"nl\">isScrollable:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n</code></pre></div></div>\n<p data-sourcepos=\"143:1-143:122\"><a href=\"https://camo.qiitausercontent.com/e86eddce9eab67d7fe06cf0b86f1d29d763073f3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323030363039342f64643931353566352d316537662d346137632d366135382d6464633265356333646435362e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2Fdd9155f5-1e7f-4a7c-6a58-ddc2e5c3dd56.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1c7f4359d6aa6dfa8564e218b794d3a3\" alt=\"test5.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/dd9155f5-1e7f-4a7c-6a58-ddc2e5c3dd56.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2006094%2Fdd9155f5-1e7f-4a7c-6a58-ddc2e5c3dd56.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=777362bfa7c3fe7ccb7cb0fd993268dd 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"145:1-146:99\">Tabbarだけでも色々いじれるもんですね！<br>\n今回は本業でTabbarのデザイン作成に携わったので、記事にしてみました。</p>\n",
    "body": "Flutter初学者のひかると申します。\n今年の7月から、未経験エンジニアに転職してもうアドベントカレンダー書く季節になりましたね。\n本題に入りまして、下記の私が作成したこちらの記事にて \n「Tabbarの実装、Tabbarが切り替わる際の色の動的な変化」について学びました。\n\nhttps://zenn.dev/hikaru24/articles/4dd35c29c40f37\n\n\n今回はTabbarの細かなデザインについて学びたいと思います。\n# 全体コード\n\n```dart\nclass TabPage extends StatefulWidget {\n  TabPage({this.index = 0});\n  final int index;\n  @override\n  _TabPageState createState() => _TabPageState();\n}\n\nclass _TabPageState extends State<TabPage> with SingleTickerProviderStateMixin {\n  late TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: 2, vsync: this);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('選択したタブだけ目立たせる'),\n      ),\n      body: AttentionTabBar(\n        controller: _tabController,\n        onTap: (tab) {\n          setState(() {});\n        },\n        tabs: <Tab>[\n          Tab(\n            child: Text(\n              'タブ1',\n              style: TextStyle(\n                  color: _tabController?.index == 0\n                      ? const Color(0xFF3D4A50)\n                      : const Color(0xFFB3B3B3),\n                  fontSize: 10),\n            ),\n          ),\n          Tab(\n            child: Text(\n              'タブ2',\n              style: TextStyle(\n                  color: _tabController?.index == 1\n                      ? const Color(0xFF3D4A50)\n                      : const Color(0xFFB3B3B3),\n                  fontSize: 10),\n            ),\n          ),\n        ],\n        tabviews: const [\n          TabPage1(),\n          TabPage2(),\n        ],\n      ),\n    );\n  }\n}\n\nclass AttentionTabBar extends StatelessWidget {\n  const AttentionTabBar({\n    Key? key,\n    required this.tabs,\n    required this.tabviews,\n    this.onTap,\n    this.controller,\n  }) : super(key: key);\n  final List<Tab> tabs;\n  final List<Widget> tabviews;\n  final Function(int)? onTap;\n  final TabController? controller;\n\n  @override\n  Widget build(BuildContext context) {\n    return DefaultTabController(\n        length: tabs.length,\n        child: Scaffold(\n            appBar: TabBar(\n              controller: controller,\n              tabs: tabs,\n              onTap: onTap,\n            ),\n            body: TabBarView(controller: controller, children: tabviews)));\n  }\n}\n```\n# TabBar を カスタマイズする方法\nタブの色を変更するには、indicatorColorに色を追加。\n```dart\nTabBar(\n  indicatorColor: Colors.black,\n)\n```\n![test1.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/19c67219-e8cf-ec0b-7881-81c7d81722ec.gif)\n\nタブのサイズを変更する方法は次のとおりです。\nこれにより、インジケーターのサイズがラベルの幅と等しくなります。デフォルトは\nTabBarIndicatorSize.tab です。\n```dart\nTabBar(\n  indicatorSize: TabBarIndicatorSize.label,            \n)\n```\n\n![test2.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/84ecc43b-e112-e52a-1b72-aa293779d7ae.gif)\n\nタブの高さを変更するには、indicatorWeightを使用する\n```dart\nTabBar(\n  indicatorWeight: 10,      \n)\n```\n\n![test3.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/447fa5cf-b003-662d-3b9c-2e1b305a7559.gif)\n\nインジケータを変更する。\nタブの背景色の色を変更するにはcolor:を使用し、その後色を指定する。例(color: Colors.black)\n```dart\nTabBar(\n  indicator: BoxDecoration(\n    borderRadius: BorderRadius.circular(50),\n    color: Colors.black), \n)\n```\n\n![test4.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/3c0c1f2c-d2b7-5ba2-8e4a-c304b6cab55b.gif)\n\n水平スクロール可能なタブを作成\n```dart\nisScrollable: true,\n```\n![test5.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2006094/dd9155f5-1e7f-4a7c-6a58-ddc2e5c3dd56.gif)\n\nTabbarだけでも色々いじれるもんですね！\n今回は本業でTabbarのデザイン作成に携わったので、記事にしてみました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-03T21:51:47+09:00",
    "group": null,
    "id": "33c81c12209bf72982e4",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 1,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "デザイン",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "【Flutter✖️UIデザイン】 Tabbarデザインのあれこれ",
    "updated_at": "2022-12-03T21:57:41+09:00",
    "url": "https://qiita.com/HikaruKusanagi/items/33c81c12209bf72982e4",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 9,
      "followers_count": 5,
      "github_login_name": null,
      "id": "HikaruKusanagi",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 2006094,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2006094/9ef1fe935269608f497bde4ee76ec583e47f2017/x_large.png?1642777622",
      "team_only": false,
      "twitter_screen_name": "hikarugp24",
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:70\">ポケモンしりとりを作りながらFlutterに入門します。</p>\n<h2 data-sourcepos=\"3:1-3:51\">\n<span id=\"この記事を書こうと思ったきっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>この記事を書こうと思ったきっかけ</h2>\n<ul data-sourcepos=\"4:1-6:0\">\n<li data-sourcepos=\"4:1-4:27\">Flutterに入門したい</li>\n<li data-sourcepos=\"5:1-6:0\">ポケモンバイオレットを買ったのでポケモン関連で何か作りたい</li>\n</ul>\n<h2 data-sourcepos=\"7:1-7:21\">\n<span id=\"作りたいもの\" class=\"fragment\"></span><a href=\"#%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE\"><i class=\"fa fa-link\"></i></a>作りたいもの</h2>\n<p data-sourcepos=\"8:1-9:66\">【ポケモンしりとり】<br>\n仕様は下記のような感じをイメージしています。</p>\n<ul data-sourcepos=\"10:1-16:0\">\n<li data-sourcepos=\"10:1-10:35\">ボタンを押してスタート</li>\n<li data-sourcepos=\"11:1-11:65\">最初にランダムにポケモンの名前と画像が出る</li>\n<li data-sourcepos=\"12:1-12:41\">音声入力でしりとりしていく</li>\n<li data-sourcepos=\"13:1-13:32\">制限時間は1匹10秒以内</li>\n<li data-sourcepos=\"14:1-14:41\">正解するとポイントが貯まる</li>\n<li data-sourcepos=\"15:1-16:0\">ポケモンによって獲得できるポイントが変わる</li>\n</ul>\n<p data-sourcepos=\"17:1-17:34\">※1人でやるしりとりです</p>\n<h2 data-sourcepos=\"19:1-19:15\">\n<span id=\"動作環境\" class=\"fragment\"></span><a href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>動作環境</h2>\n<ul data-sourcepos=\"20:1-25:0\">\n<li data-sourcepos=\"20:1-20:25\">Mac OS X: 13.0 Ventura</li>\n<li data-sourcepos=\"21:1-21:16\">Flutter: 3.3.8</li>\n<li data-sourcepos=\"22:1-22:14\">Dart: 2.18.4</li>\n<li data-sourcepos=\"23:1-23:13\">Xcode: 14.1</li>\n<li data-sourcepos=\"24:1-25:0\">Android Studio: 2021.3.1 Patch 1 Dolphin</li>\n</ul>\n<p data-sourcepos=\"26:1-26:214\">※最初に見たチュートリアルがAndroid StudioだったのでAndroid Studioを使っているのですが、だんだんいつも使っていて慣れているVSCodeでやりたくなってきました。</p>\n<h2 data-sourcepos=\"28:1-28:42\">\n<span id=\"できたことできてないこと\" class=\"fragment\"></span><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%81%93%E3%81%A8%E3%81%A7%E3%81%8D%E3%81%A6%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>できたこと・できてないこと</h2>\n<h3 data-sourcepos=\"29:1-29:37\">\n<span id=\"ボタンを押してスタート\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%97%E3%81%A6%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88\"><i class=\"fa fa-link\"></i></a>ボタンを押してスタート</h3>\n<p data-sourcepos=\"30:1-31:172\">とりあえずスタートボタンを押してゲームを始めます。<br>\n<a href=\"https://camo.qiitausercontent.com/646923394f30c41800763b17d0197d183c92faec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938323038372f61663336313032372d623733612d653631372d656665622d3264616438656532373061652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"150\" alt=\"ボタンを押してスタート\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2Faf361027-b73a-e617-efeb-2dad8ee270ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=566a1e33b80a01e0af1bcbec191bec9e\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/af361027-b73a-e617-efeb-2dad8ee270ae.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2Faf361027-b73a-e617-efeb-2dad8ee270ae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=262a708f0d97887aeb2dd388e6fb2a4e 1x\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"33:1-33:67\">\n<span id=\"最初にランダムにポケモンの名前と画像が出る\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%88%9D%E3%81%AB%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AB%E3%83%9D%E3%82%B1%E3%83%A2%E3%83%B3%E3%81%AE%E5%90%8D%E5%89%8D%E3%81%A8%E7%94%BB%E5%83%8F%E3%81%8C%E5%87%BA%E3%82%8B\"><i class=\"fa fa-link\"></i></a>最初にランダムにポケモンの名前と画像が出る</h3>\n<p data-sourcepos=\"34:1-35:193\"><a href=\"https://pokeapi.co/\" rel=\"nofollow noopener\" target=\"_blank\">PokeAPI</a>からランダムにポケモンを取得して表示します。<br>\n<a href=\"https://camo.qiitausercontent.com/fbb1bf13b7a334ecb3543dd34cf5f35620ac73ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938323038372f38653234323631322d363934362d623630642d396534342d3262393463333766616638372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"150\" alt=\"最初にランダムにポケモンの名前が出る\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2F8e242612-6946-b60d-9e44-2b94c37faf87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83d217aaf2ed9ea47c636b432155e7a3\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/8e242612-6946-b60d-9e44-2b94c37faf87.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2F8e242612-6946-b60d-9e44-2b94c37faf87.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e78988fd17314e6a9b60c5c85f2ad064 1x\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"37:1-37:43\">\n<span id=\"音声入力でしりとりしていく\" class=\"fragment\"></span><a href=\"#%E9%9F%B3%E5%A3%B0%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%97%E3%82%8A%E3%81%A8%E3%82%8A%E3%81%97%E3%81%A6%E3%81%84%E3%81%8F\"><i class=\"fa fa-link\"></i></a>音声入力でしりとりしていく</h3>\n<p data-sourcepos=\"38:1-41:93\">まだ途中までしかできていないですが、<br>\nFlutterの音声認識パッケージの<a href=\"https://pub.dev/packages/speech_to_text\" rel=\"nofollow noopener\" target=\"_blank\">speech_to_text</a>を使用して音声入力するようにしました。<br>\nまた、ポケモンの名前はほぼカタカナのみで、音声入力した文字列のうちカタカナのみを取得したかったので、<a href=\"https://pub.dev/packages/kana_kit\" rel=\"nofollow noopener\" target=\"_blank\">kana_kit</a>を使用しました。<br>\n（「フシギソウ」とかは「不思議そう」とかになってしまっていた）</p>\n<p data-sourcepos=\"43:1-43:106\">入力されたポケモンの英語名をPokeAPIに渡してポケモンのデータを取得します。</p>\n<p data-sourcepos=\"45:1-45:117\">しりとりのロジックはまだできてないので、音声入力したポケモンが表示されるだけ。</p>\n<p data-sourcepos=\"47:1-47:245\">※PokeAPIにはポケモンの英語名を渡さないといけないので、ポケモンの日本語名/英語名をキーバリューに持つMapを作成して、音声入力の値に対応する英語名を渡すようにしています。</p>\n<h3 data-sourcepos=\"49:1-49:34\">\n<span id=\"制限時間は1匹10秒以内\" class=\"fragment\"></span><a href=\"#%E5%88%B6%E9%99%90%E6%99%82%E9%96%93%E3%81%AF1%E5%8C%B910%E7%A7%92%E4%BB%A5%E5%86%85\"><i class=\"fa fa-link\"></i></a>制限時間は1匹10秒以内</h3>\n<p data-sourcepos=\"50:1-50:27\">まだできていない。</p>\n<h3 data-sourcepos=\"52:1-52:43\">\n<span id=\"正解するとポイントが貯まる\" class=\"fragment\"></span><a href=\"#%E6%AD%A3%E8%A7%A3%E3%81%99%E3%82%8B%E3%81%A8%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%8C%E8%B2%AF%E3%81%BE%E3%82%8B\"><i class=\"fa fa-link\"></i></a>正解するとポイントが貯まる</h3>\n<p data-sourcepos=\"53:1-55:178\">いまは1回正解すると1ポイントが取得されて、画面右上に表示されるようになっています。<br>\n※まだしりとりになっていないので、ポケモンが存在すれば正解。<br>\n<a href=\"https://camo.qiitausercontent.com/a6fe541b25cee011a19af729efd15416e621d82f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323938323038372f38343837656466312d316261302d333266322d613335632d6634313865636332313766662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"150\" alt=\"正解するとポイントが貯まる\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2F8487edf1-1ba0-32f2-a35c-f418ecc217ff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a00379f46986d161f5d9599cd3b4c239\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/8487edf1-1ba0-32f2-a35c-f418ecc217ff.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2982087%2F8487edf1-1ba0-32f2-a35c-f418ecc217ff.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=be8fec0f0e02d0e3a6bbbd16c2914ce1 1x\" loading=\"lazy\"></a></p>\n<h3 data-sourcepos=\"57:1-57:67\">\n<span id=\"ポケモンによって獲得できるポイントが変わる\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%B1%E3%83%A2%E3%83%B3%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E7%8D%B2%E5%BE%97%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ポケモンによって獲得できるポイントが変わる</h3>\n<p data-sourcepos=\"58:1-58:126\">これもまだなのですが、ポケモンの世代が新しいほど高得点とかにしようかなと考えてます。</p>\n<h2 data-sourcepos=\"61:1-61:18\">\n<span id=\"学んだこと\" class=\"fragment\"></span><a href=\"#%E5%AD%A6%E3%82%93%E3%81%A0%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>学んだこと</h2>\n<p data-sourcepos=\"62:1-62:91\">上記を作る中でFlutterの下記のようなことが少しわかってきました。</p>\n<ul data-sourcepos=\"63:1-66:0\">\n<li data-sourcepos=\"63:1-63:20\">Widgetの使い方</li>\n<li data-sourcepos=\"64:1-64:29\">パッケージの使い方</li>\n<li data-sourcepos=\"65:1-66:0\">APIの呼び方</li>\n</ul>\n<h2 data-sourcepos=\"67:1-67:27\">\n<span id=\"今後やりたいこと\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>今後やりたいこと</h2>\n<p data-sourcepos=\"68:1-68:81\">アプリの機能追加としては下記をやってみたいところです。</p>\n<ul data-sourcepos=\"69:1-73:0\">\n<li data-sourcepos=\"69:1-69:38\">デザインをかっこよくする</li>\n<li data-sourcepos=\"70:1-70:29\">効果音とか出ちゃう</li>\n<li data-sourcepos=\"71:1-71:26\">ログインができる</li>\n<li data-sourcepos=\"72:1-73:0\">ランキングが表示される</li>\n</ul>\n<p data-sourcepos=\"74:1-74:97\">また、Flutter入門的には下記についてもう少し調べてみようと思います。</p>\n<ul data-sourcepos=\"75:1-79:23\">\n<li data-sourcepos=\"75:1-75:14\">状態管理</li>\n<li data-sourcepos=\"76:1-76:17\">ページ遷移</li>\n<li data-sourcepos=\"77:1-77:20\">プッシュ通知</li>\n<li data-sourcepos=\"78:1-78:11\">テスト</li>\n<li data-sourcepos=\"79:1-79:23\">リリースまわり</li>\n</ul>\n",
    "body": "ポケモンしりとりを作りながらFlutterに入門します。\n\n## この記事を書こうと思ったきっかけ\n- Flutterに入門したい\n- ポケモンバイオレットを買ったのでポケモン関連で何か作りたい\n\n## 作りたいもの\n【ポケモンしりとり】\n仕様は下記のような感じをイメージしています。\n- ボタンを押してスタート\n- 最初にランダムにポケモンの名前と画像が出る\n- 音声入力でしりとりしていく\n- 制限時間は1匹10秒以内\n- 正解するとポイントが貯まる\n- ポケモンによって獲得できるポイントが変わる\n\n※1人でやるしりとりです\n\n## 動作環境\n- Mac OS X: 13.0 Ventura \n- Flutter: 3.3.8\n- Dart: 2.18.4\n- Xcode: 14.1\n- Android Studio: 2021.3.1 Patch 1 Dolphin\n\n※最初に見たチュートリアルがAndroid StudioだったのでAndroid Studioを使っているのですが、だんだんいつも使っていて慣れているVSCodeでやりたくなってきました。\n\n## できたこと・できてないこと\n### ボタンを押してスタート\nとりあえずスタートボタンを押してゲームを始めます。\n<img width=\"150\" alt=\"ボタンを押してスタート\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/af361027-b73a-e617-efeb-2dad8ee270ae.png\">\n\n### 最初にランダムにポケモンの名前と画像が出る\n[PokeAPI](https://pokeapi.co/)からランダムにポケモンを取得して表示します。\n<img width=\"150\" alt=\"最初にランダムにポケモンの名前が出る\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/8e242612-6946-b60d-9e44-2b94c37faf87.png\">\n\n### 音声入力でしりとりしていく\nまだ途中までしかできていないですが、\nFlutterの音声認識パッケージの[speech_to_text](https://pub.dev/packages/speech_to_text)を使用して音声入力するようにしました。\nまた、ポケモンの名前はほぼカタカナのみで、音声入力した文字列のうちカタカナのみを取得したかったので、[kana_kit](https://pub.dev/packages/kana_kit)を使用しました。\n（「フシギソウ」とかは「不思議そう」とかになってしまっていた）\n\n入力されたポケモンの英語名をPokeAPIに渡してポケモンのデータを取得します。\n\nしりとりのロジックはまだできてないので、音声入力したポケモンが表示されるだけ。\n\n※PokeAPIにはポケモンの英語名を渡さないといけないので、ポケモンの日本語名/英語名をキーバリューに持つMapを作成して、音声入力の値に対応する英語名を渡すようにしています。\n\n### 制限時間は1匹10秒以内\nまだできていない。\n\n### 正解するとポイントが貯まる\nいまは1回正解すると1ポイントが取得されて、画面右上に表示されるようになっています。\n※まだしりとりになっていないので、ポケモンが存在すれば正解。\n<img width=\"150\" alt=\"正解するとポイントが貯まる\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/8487edf1-1ba0-32f2-a35c-f418ecc217ff.png\">\n\n### ポケモンによって獲得できるポイントが変わる\nこれもまだなのですが、ポケモンの世代が新しいほど高得点とかにしようかなと考えてます。\n\n\n## 学んだこと\n上記を作る中でFlutterの下記のようなことが少しわかってきました。\n- Widgetの使い方\n- パッケージの使い方\n- APIの呼び方\n\n## 今後やりたいこと\nアプリの機能追加としては下記をやってみたいところです。\n- デザインをかっこよくする\n- 効果音とか出ちゃう\n- ログインができる\n- ランキングが表示される\n\nまた、Flutter入門的には下記についてもう少し調べてみようと思います。\n- 状態管理\n- ページ遷移\n- プッシュ通知\n- テスト\n- リリースまわり\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-03T19:48:49+09:00",
    "group": null,
    "id": "280aca4e2fb3c6101535",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      },
      {
        "name": "pokemon",
        "versions": []
      }
    ],
    "title": "ポケモンしりとりを作りながらFlutterに入門する",
    "updated_at": "2022-12-03T19:48:49+09:00",
    "url": "https://qiita.com/ytoy/items/280aca4e2fb3c6101535",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "ytoy",
      "items_count": 1,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 2982087,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2982087/profile-images/1668674490",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:12\">\n<span id=\"getxとは\" class=\"fragment\"></span><a href=\"#getx%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>GetXとは</h1>\n<p data-sourcepos=\"2:1-3:92\">Flutterで使えるめっちゃ便利な拡張機能。<br>\nFlutterの拡張機能でおなじみのpub.devのこのページから導入可能です。</p>\n<p data-sourcepos=\"5:1-5:36\"><qiita-embed-ogp src=\"https://pub.dev/packages/get/install\"></qiita-embed-ogp></p>\n<h1 data-sourcepos=\"7:1-7:21\">\n<span id=\"getxの三大機能\" class=\"fragment\"></span><a href=\"#getx%E3%81%AE%E4%B8%89%E5%A4%A7%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>GetXの三大機能</h1>\n<p data-sourcepos=\"9:1-9:68\">GetXには、おもにこの3つの大きな機能があります。</p>\n<p data-sourcepos=\"11:1-13:91\">■State Management(状態管理)・・・変数やリストの書き込み、保存、読み込みが簡単に出来る。<br>\n■Route Management(ルート管理)・・・アプリでの画面遷移が簡単に出来る。<br>\n■Dependency Management(依存管理)・・・Classの継承などが簡単に出来る。</p>\n<p data-sourcepos=\"15:1-15:63\">それぞれざっくりと特徴を見ていきましょう！</p>\n<h1 data-sourcepos=\"17:1-17:32\">\n<span id=\"state-management状態管理\" class=\"fragment\"></span><a href=\"#state-management%E7%8A%B6%E6%85%8B%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>State Management(状態管理)</h1>\n<h2 data-sourcepos=\"19:1-19:21\">\n<span id=\"宣言初期化\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E8%A8%80%E5%88%9D%E6%9C%9F%E5%8C%96\"><i class=\"fa fa-link\"></i></a>宣言、初期化</h2>\n<p data-sourcepos=\"21:1-21:10\">GetXなし</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"22:1-24:3\"><div class=\"highlight\"><pre><code>var name = \"Ayutaya\";\n</code></pre></div></div>\n<p data-sourcepos=\"25:1-25:10\">GetXあり</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"26:1-28:3\"><div class=\"highlight\"><pre><code>var name = \"Ayutaya\".obs;\n</code></pre></div></div>\n<h2 data-sourcepos=\"30:1-30:9\">\n<span id=\"表示\" class=\"fragment\"></span><a href=\"#%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>表示</h2>\n<p data-sourcepos=\"32:1-32:10\">GetXなし</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"33:1-35:3\"><div class=\"highlight\"><pre><code>Text(\"$(name)\")\n</code></pre></div></div>\n<p data-sourcepos=\"36:1-36:10\">GetXあり</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"37:1-39:3\"><div class=\"highlight\"><pre><code>obx(() =&gt; Text(\"${controller.name}\"));\n</code></pre></div></div>\n<p data-sourcepos=\"40:1-40:107\">※controllerについては<a href=\"#dependency-management%E4%BE%9D%E5%AD%98%E7%AE%A1%E7%90%86\">Dependency Management(依存管理)</a>参照</p>\n<h2 data-sourcepos=\"42:1-42:9\">\n<span id=\"代入\" class=\"fragment\"></span><a href=\"#%E4%BB%A3%E5%85%A5\"><i class=\"fa fa-link\"></i></a>代入</h2>\n<p data-sourcepos=\"43:1-43:10\">GetXなし</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"44:1-46:3\"><div class=\"highlight\"><pre><code>name=\"Ayutaya2\";\n</code></pre></div></div>\n<p data-sourcepos=\"47:1-47:10\">GetXあり</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"48:1-50:3\"><div class=\"highlight\"><pre><code>controller.name=\"Ayutaya2\".obs;\n</code></pre></div></div>\n<p data-sourcepos=\"51:1-51:107\">※controllerについては<a href=\"#dependency-management%E4%BE%9D%E5%AD%98%E7%AE%A1%E7%90%86\">Dependency Management(依存管理)</a>参照</p>\n<h1 data-sourcepos=\"53:1-53:35\">\n<span id=\"route-managementルート管理\" class=\"fragment\"></span><a href=\"#route-management%E3%83%AB%E3%83%BC%E3%83%88%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>Route Management(ルート管理)</h1>\n<p data-sourcepos=\"55:1-55:10\">GetXなし</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"56:1-58:3\"><div class=\"highlight\"><pre><code>Navigator.of(context).pushNamed(\"/subpage\");\n</code></pre></div></div>\n<p data-sourcepos=\"59:1-59:10\">GetXあり</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"60:1-62:3\"><div class=\"highlight\"><pre><code>Get.toNamed('/home');\n</code></pre></div></div>\n<h1 data-sourcepos=\"64:1-64:37\">\n<span id=\"dependency-management依存管理\" class=\"fragment\"></span><a href=\"#dependency-management%E4%BE%9D%E5%AD%98%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>Dependency Management(依存管理)</h1>\n<p data-sourcepos=\"66:1-66:10\">GetXなし</p>\n<p data-sourcepos=\"68:1-68:86\">Stateful Widgetを使って、その親Classを作って、さらに継承させて…</p>\n<p data-sourcepos=\"70:1-70:76\">GetXあり　(次の1行をGetXを使いたいclassの最初に書くだけ)</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"71:1-73:3\"><div class=\"highlight\"><pre><code>final controller = Get.put(CounterController());\n</code></pre></div></div>\n<h1 data-sourcepos=\"75:1-75:21\">\n<span id=\"getxのメリット\" class=\"fragment\"></span><a href=\"#getx%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>GetXのメリット</h1>\n<p data-sourcepos=\"77:1-78:167\">一見、GetXの機能を使った方がコードが長くなっている部分もありますが、Stateful Widgetを使用せずに状態管理が出来るのはすごいメリットです！！<br>\n状態管理と画面表示を完全に別のClassとして用意できるので複数画面をまたぐような状態管理もたやすく出来てしまいます。</p>\n<h1 data-sourcepos=\"81:1-81:14\">\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h1>\n<p data-sourcepos=\"83:1-83:126\">公式サイトは英語ですが、ほぼすべての情報が分かりやすく網羅されているので必見です！！</p>\n<p data-sourcepos=\"85:1-85:28\"><qiita-embed-ogp src=\"https://pub.dev/packages/get\"></qiita-embed-ogp></p>\n",
    "body": "# GetXとは\nFlutterで使えるめっちゃ便利な拡張機能。\nFlutterの拡張機能でおなじみのpub.devのこのページから導入可能です。\n\nhttps://pub.dev/packages/get/install\n\n# GetXの三大機能\n\nGetXには、おもにこの3つの大きな機能があります。\n\n■State Management(状態管理)・・・変数やリストの書き込み、保存、読み込みが簡単に出来る。\n■Route Management(ルート管理)・・・アプリでの画面遷移が簡単に出来る。\n■Dependency Management(依存管理)・・・Classの継承などが簡単に出来る。\n\nそれぞれざっくりと特徴を見ていきましょう！\n\n# State Management(状態管理)\n\n## 宣言、初期化\n\nGetXなし\n```\nvar name = \"Ayutaya\";\n```\nGetXあり\n```\nvar name = \"Ayutaya\".obs;\n```\n\n## 表示\n\nGetXなし\n```\nText(\"$(name)\")\n```\nGetXあり\n```\nobx(() => Text(\"${controller.name}\"));\n```\n※controllerについては[Dependency Management(依存管理)](#dependency-management依存管理)参照\n\n## 代入\nGetXなし\n```\nname=\"Ayutaya2\";\n```\nGetXあり\n```\ncontroller.name=\"Ayutaya2\".obs;\n```\n※controllerについては[Dependency Management(依存管理)](#dependency-management依存管理)参照\n\n# Route Management(ルート管理)\n\nGetXなし\n```\nNavigator.of(context).pushNamed(\"/subpage\");\n```\nGetXあり\n```\nGet.toNamed('/home');\n```\n\n# Dependency Management(依存管理)\n\nGetXなし\n\nStateful Widgetを使って、その親Classを作って、さらに継承させて…\n\nGetXあり　(次の1行をGetXを使いたいclassの最初に書くだけ)\n```\nfinal controller = Get.put(CounterController());\n```\n\n# GetXのメリット\n\n一見、GetXの機能を使った方がコードが長くなっている部分もありますが、Stateful Widgetを使用せずに状態管理が出来るのはすごいメリットです！！\n状態管理と画面表示を完全に別のClassとして用意できるので複数画面をまたぐような状態管理もたやすく出来てしまいます。\n\n\n# 参考文献\n\n公式サイトは英語ですが、ほぼすべての情報が分かりやすく網羅されているので必見です！！\n\nhttps://pub.dev/packages/get\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-03T19:04:39+09:00",
    "group": null,
    "id": "ffcb9df81332dd55da7e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      },
      {
        "name": "GetX",
        "versions": []
      }
    ],
    "title": "【Flutter】GetX超簡略紹介",
    "updated_at": "2022-12-03T19:04:39+09:00",
    "url": "https://qiita.com/Ayuchan/items/ffcb9df81332dd55da7e",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "Ayuchan",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "あゆちゃん",
      "organization": "",
      "permanent_id": 668183,
      "profile_image_url": "https://lh3.googleusercontent.com/a-/AOh14GhRxtOiObQPZJ7jpulQPM_ojF1Ew_n_yPdw4-AVdQ=s50",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:53\">\n<span id=\"もちろんもっとよい方法があるはず\" class=\"fragment\"></span><a href=\"#%E3%82%82%E3%81%A1%E3%82%8D%E3%82%93%E3%82%82%E3%81%A3%E3%81%A8%E3%82%88%E3%81%84%E6%96%B9%E6%B3%95%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AF%E3%81%9A\"><i class=\"fa fa-link\"></i></a>もちろんもっとよい方法があるはず　</h1>\n<p data-sourcepos=\"3:1-4:349\">　ランダムにページの表示内容を変えたい。ゴールとしては、データベースから一組の検索結果を得て、それをページ内に埋め込んでいく、みたいなことを考えているのだけれど、ちょっと停滞。　<br>\n　でも、クリスマスに向けて、とりあえず「なんとか動く」に持ち込みたい。ということで、データベースも検索もなしに、見た目「似た挙動」にする、というのが、今回のお題だ。ゴミ箱行きになる可能性大なプランBだけれど、セーフティーネットとして。</p>\n<h2 data-sourcepos=\"6:1-6:42\">\n<span id=\"ランダムな画像を表示する\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ランダムな画像を表示する。</h2>\n<p data-sourcepos=\"7:1-7:292\">　一番簡単なのは、「こんなふうにデータを埋め込んだページ」というできあがりを何種類も作って、スクショして、画像として用意する。そしてそれをランダム表示する。codeは同じ女子部メンバーのこちらを拝借。</p>\n<p data-sourcepos=\"9:1-9:45\"><qiita-embed-ogp src=\"https://zenn.dev/minn/articles/6f568e76e8b150\"></qiita-embed-ogp></p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"10:1-17:3\"><div class=\"highlight\"><pre><code>    String _imgURL;\n    List&lt;String&gt; imgURLs = [\n      //表示したい画像のURL\n    ];\n    final ram = Random(DateTime.now().millisecondsSinceEpoch);//乱数の種を時間ごとに変更するためのDataTime\n    _imgURL = imgURLs[ram.nextInt(imgURLs.length)];\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"18:1-22:3\"><div class=\"highlight\"><pre><code>      body: Center(\n        child: Image.asset(_imgURL),\n            ),\n</code></pre></div></div>\n<p data-sourcepos=\"24:1-25:294\">　よしよし、ちゃんと動く。<br>\n　でも問題は、まずPageを作って、全体をビルドして、そのPageに到達したところでスクショを取る、それを何回も繰り返して必要なだけ画像を用意するという、超アナログな作業。いくらプランBでも、ちょっと悲しい。</p>\n<h2 data-sourcepos=\"27:1-27:42\">\n<span id=\"ランダムにページ遷移する\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AB%E3%83%9A%E3%83%BC%E3%82%B8%E9%81%B7%E7%A7%BB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ランダムにページ遷移する。</h2>\n<p data-sourcepos=\"29:1-31:241\">　Pageのフォーマットはできている。引数をデータベースから引っぱってこれればそれでいい。でも、まだ引っぱってこれない。スクショを取るために何度も引数を手入力していて、思った。スクショを取るんじゃなく、作ったページに飛べれば、一手間減るじゃないか。<br>\n　一番安易な発想は、StringをFunctionに変えてページ遷移をListに並べるという方法だったのだが、これはここに入れられないとか、引数がなんとかかんとかとか、私はに対処できそうにないエラー相手に右往左往。そもそもListの中になにを設定していいのかもよくわかってない初心者の手を出すことじゃないのかもしれない。　<br>\n　そうこうするうちに、エラーメッセージに、widgetという言葉が何度も出ているのに気づいた。もしかして、Listの中にWidget入れるというのはアリなのか。だったらこれでどう？　</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"33:1-51:3\"><div class=\"highlight\"><pre><code>  @override\n  Widget build(BuildContext context) {\n\n    Widget _nextURL;\n    List&lt;Widget&gt; nextURLs = [\n      //ここに表示したいPageを指定\n      Center(child: PageA()),\n      Center(child: PageB()),\n      Center(child: PageC()),\n    ];\n    final ram = Random(DateTime.now().millisecondsSinceEpoch);\n    _nextURL = nextURLs[ram.nextInt(nextURLs.length)];\n\n    return Scaffold(\n      body: _nextURL,\n    );\n  }\n</code></pre></div></div>\n<p data-sourcepos=\"53:1-53:160\">　できた〜。ListにCenterが並んでるのがもっさりした雰囲気だけど、ともかく望んでいることはできたわ、ほっほっほ。</p>\n<h2 data-sourcepos=\"55:1-55:46\">\n<span id=\"listの入れ子ができたら\" class=\"fragment\"></span><a href=\"#list%E3%81%AE%E5%85%A5%E3%82%8C%E5%AD%90%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%89\"><i class=\"fa fa-link\"></i></a>Listの入れ子ができたら・・・　</h2>\n<p data-sourcepos=\"56:1-56:313\">　いっそ、引数一覧というListをListの中に並べられたら、何Pageも用意して遷移するのじゃなく、そのPageの変更一つで済む、というわけだけど、今回はそこまで狙わない。いや、できるかな、やってみようかな・・・どうしよう・・・</p>\n<h2 data-sourcepos=\"58:1-58:118\">\n<span id=\"いずれにせよこれはあくまでプランbゴミ箱行きになったらそれはそれでよし\" class=\"fragment\"></span><a href=\"#%E3%81%84%E3%81%9A%E3%82%8C%E3%81%AB%E3%81%9B%E3%82%88%E3%81%93%E3%82%8C%E3%81%AF%E3%81%82%E3%81%8F%E3%81%BE%E3%81%A7%E3%83%97%E3%83%A9%E3%83%B3b%E3%82%B4%E3%83%9F%E7%AE%B1%E8%A1%8C%E3%81%8D%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%82%89%E3%81%9D%E3%82%8C%E3%81%AF%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%88%E3%81%97\"><i class=\"fa fa-link\"></i></a>いずれにせよ、これはあくまでプランB、ゴミ箱行きになったら、それはそれでよし。</h2>\n<p data-sourcepos=\"60:1-60:150\">　でも、どなたか、関数のListやListの入れ子についてご教示くださったら、泣いて喜びます(ﾟﾟ)(｡｡)ﾍﾟｺｯ</p>\n",
    "body": "# もちろんもっとよい方法があるはず　\n\n　ランダムにページの表示内容を変えたい。ゴールとしては、データベースから一組の検索結果を得て、それをページ内に埋め込んでいく、みたいなことを考えているのだけれど、ちょっと停滞。　\n　でも、クリスマスに向けて、とりあえず「なんとか動く」に持ち込みたい。ということで、データベースも検索もなしに、見た目「似た挙動」にする、というのが、今回のお題だ。ゴミ箱行きになる可能性大なプランBだけれど、セーフティーネットとして。\n\n## ランダムな画像を表示する。\n　一番簡単なのは、「こんなふうにデータを埋め込んだページ」というできあがりを何種類も作って、スクショして、画像として用意する。そしてそれをランダム表示する。codeは同じ女子部メンバーのこちらを拝借。\n\nhttps://zenn.dev/minn/articles/6f568e76e8b150\n```\n    String _imgURL;\n    List<String> imgURLs = [\n      //表示したい画像のURL\n    ];\n    final ram = Random(DateTime.now().millisecondsSinceEpoch);//乱数の種を時間ごとに変更するためのDataTime\n    _imgURL = imgURLs[ram.nextInt(imgURLs.length)];\n```\n```\n      body: Center(\n        child: Image.asset(_imgURL),\n            ),\n```\n\n　よしよし、ちゃんと動く。\n　でも問題は、まずPageを作って、全体をビルドして、そのPageに到達したところでスクショを取る、それを何回も繰り返して必要なだけ画像を用意するという、超アナログな作業。いくらプランBでも、ちょっと悲しい。\n\n## ランダムにページ遷移する。\n\n　Pageのフォーマットはできている。引数をデータベースから引っぱってこれればそれでいい。でも、まだ引っぱってこれない。スクショを取るために何度も引数を手入力していて、思った。スクショを取るんじゃなく、作ったページに飛べれば、一手間減るじゃないか。\n　一番安易な発想は、StringをFunctionに変えてページ遷移をListに並べるという方法だったのだが、これはここに入れられないとか、引数がなんとかかんとかとか、私はに対処できそうにないエラー相手に右往左往。そもそもListの中になにを設定していいのかもよくわかってない初心者の手を出すことじゃないのかもしれない。　\n　そうこうするうちに、エラーメッセージに、widgetという言葉が何度も出ているのに気づいた。もしかして、Listの中にWidget入れるというのはアリなのか。だったらこれでどう？　\n\n```\n  @override\n  Widget build(BuildContext context) {\n\n    Widget _nextURL;\n    List<Widget> nextURLs = [\n      //ここに表示したいPageを指定\n      Center(child: PageA()),\n      Center(child: PageB()),\n      Center(child: PageC()),\n    ];\n    final ram = Random(DateTime.now().millisecondsSinceEpoch);\n    _nextURL = nextURLs[ram.nextInt(nextURLs.length)];\n\n    return Scaffold(\n      body: _nextURL,\n    );\n  }\n```\n\n　できた〜。ListにCenterが並んでるのがもっさりした雰囲気だけど、ともかく望んでいることはできたわ、ほっほっほ。\n\n## Listの入れ子ができたら・・・　\n　いっそ、引数一覧というListをListの中に並べられたら、何Pageも用意して遷移するのじゃなく、そのPageの変更一つで済む、というわけだけど、今回はそこまで狙わない。いや、できるかな、やってみようかな・・・どうしよう・・・\n\n## いずれにせよ、これはあくまでプランB、ゴミ箱行きになったら、それはそれでよし。\n\n　でも、どなたか、関数のListやListの入れ子についてご教示くださったら、泣いて喜びます(ﾟﾟ)(｡｡)ﾍﾟｺｯ\n\n\n\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-03T15:36:00+09:00",
    "group": null,
    "id": "63d8a6dcfd8bb0232d3f",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "ランダムにページ遷移する",
    "updated_at": "2022-12-03T16:05:10+09:00",
    "url": "https://qiita.com/dongri727/items/63d8a6dcfd8bb0232d3f",
    "user": {
      "description": "老後の楽しみに壮大な計画を立て、邁進しています。",
      "facebook_id": "",
      "followees_count": 5,
      "followers_count": 10,
      "github_login_name": null,
      "id": "dongri727",
      "items_count": 66,
      "linkedin_id": "",
      "location": "",
      "name": "どんぐり",
      "organization": "",
      "permanent_id": 1646810,
      "profile_image_url": "https://lh3.googleusercontent.com/a-/AOh14GgjCdMtqc0__YQTvBgttuGzeJuU5n5es2O34D53=s50",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:36\">意外と知られていない！？</p>\n<h1 data-sourcepos=\"3:1-3:8\">\n<span id=\"挙動\" class=\"fragment\"></span><a href=\"#%E6%8C%99%E5%8B%95\"><i class=\"fa fa-link\"></i></a>挙動</h1>\n<ul data-sourcepos=\"5:1-8:0\">\n<li data-sourcepos=\"5:1-5:42\">タイミング： ファイル保存時</li>\n<li data-sourcepos=\"6:1-8:0\">VSCodeでdartファイルにセミコロンを挿入</li>\n</ul>\n<table data-sourcepos=\"9:1-10:5\">\n<thead>\n<tr data-sourcepos=\"9:1-9:149\">\n<th style=\"text-align: center\" data-sourcepos=\"9:1-9:148\"><a href=\"https://camo.qiitausercontent.com/eeb1a7e2fcfe21c3002e82192206746edb7072a8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3138333035392f61393966376566662d623336362d346363352d613633332d3161663934326530653461332e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F183059%2Fa99f7eff-b366-4cc5-a633-1af942e0e4a3.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6323e3d6c9d5392dda75d73fe2c23984\" alt=\"画面収録 2022-12-03 13.18.38.gif\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/183059/a99f7eff-b366-4cc5-a633-1af942e0e4a3.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F183059%2Fa99f7eff-b366-4cc5-a633-1af942e0e4a3.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d9f0ac99f4f779cb8bb84b0c720f7f00 1x\" loading=\"lazy\"></a></th>\n</tr>\n</thead>\n</table>\n<h2 data-sourcepos=\"13:1-13:16\">\n<span id=\"settingsjson\" class=\"fragment\"></span><a href=\"#settingsjson\"><i class=\"fa fa-link\"></i></a>settings.json</h2>\n<p data-sourcepos=\"15:1-15:69\"><code>settings.json</code>の<code>quickfix</code>の設定で<code>insertSemicolon</code>を<code>true</code>に</p>\n<div class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"17:1-26:3\">\n<div class=\"code-lang\"><span class=\"bold\">settings.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"[dart]\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"editor.formatOnSave\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"editor.codeActionsOnSave\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"quickfix.insertSemicolon\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>\n</div>\n<p data-sourcepos=\"29:1-29:101\">quickfixの全設定は参考にリンクを載せましたので参考にしてみてください。</p>\n<p data-sourcepos=\"31:1-32:199\">意外と知られていない？ので、記事にしてみました。<br>\n<code>Typescript</code>、<code>Javascript</code>とかだと<code>Prettier</code>を使わないといけないですが、<code>Dart</code>は公式VSCodeの拡張だけ追加するだけでいいのでサポート手厚い言語ですねー</p>\n<h1 data-sourcepos=\"34:1-34:8\">\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n<ul data-sourcepos=\"35:1-37:55\">\n<li data-sourcepos=\"35:1-35:82\"><a href=\"https://dartcode.org/docs/recommended-settings/\" rel=\"nofollow noopener\" target=\"_blank\">Dart公式 VSCode推奨設定</a></li>\n<li data-sourcepos=\"36:1-36:79\"><a href=\"https://dartcode.org/docs/refactorings-and-code-fixes/\" rel=\"nofollow noopener\" target=\"_blank\">Dart QuickFix設定</a></li>\n<li data-sourcepos=\"37:1-37:55\"><a href=\"https://dartcode.org/docs/settings/\" rel=\"nofollow noopener\" target=\"_blank\">Dart 全設定</a></li>\n</ul>\n",
    "body": "意外と知られていない！？\n\n# 挙動\n\n- タイミング： ファイル保存時\n- VSCodeでdartファイルにセミコロンを挿入\n\n\n![画面収録 2022-12-03 13.18.38.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/183059/a99f7eff-b366-4cc5-a633-1af942e0e4a3.gif)|\n|:-:|\n\n\n## settings.json\n\n`settings.json`の`quickfix`の設定で`insertSemicolon`を`true`に\n\n```settings.json\n{\n  \"[dart]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n      \"quickfix.insertSemicolon\": true,\n    }\n  }\n}\n```\n\n\nquickfixの全設定は参考にリンクを載せましたので参考にしてみてください。\n\n意外と知られていない？ので、記事にしてみました。\n`Typescript`、`Javascript`とかだと`Prettier`を使わないといけないですが、`Dart`は公式VSCodeの拡張だけ追加するだけでいいのでサポート手厚い言語ですねー\n\n# 参考\n- [Dart公式 VSCode推奨設定](https://dartcode.org/docs/recommended-settings/)\n- [Dart QuickFix設定](https://dartcode.org/docs/refactorings-and-code-fixes/)\n- [Dart 全設定](https://dartcode.org/docs/settings/)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-03T13:37:37+09:00",
    "group": null,
    "id": "1cc422232afe81cd65ab",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Dart",
        "versions": []
      },
      {
        "name": "VSCode",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "VSCodeでFlutter(dart)のコードに自動でセミコロンを挿入する設定",
    "updated_at": "2022-12-03T13:39:01+09:00",
    "url": "https://qiita.com/k_bobchin/items/1cc422232afe81cd65ab",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 4,
      "followers_count": 19,
      "github_login_name": null,
      "id": "k_bobchin",
      "items_count": 28,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 183059,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/183059/profile-images/1529095019",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"2:1-2:121\">今回は、mapbox_searchを使って店舗の情報をPinに表示させるについて紹介しようと思います。</p>\n<h1 data-sourcepos=\"4:1-4:11\">\n<span id=\"初めに\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>初めに</h1>\n<p data-sourcepos=\"6:1-6:111\">MapBoxにおいて基礎についてです。これらを参考にしてもらえるといいと思います。</p>\n<p data-sourcepos=\"8:1-8:22\"><qiita-embed-ogp src=\"https://www.mapbox.jp/\"></qiita-embed-ogp></p>\n<p data-sourcepos=\"10:1-10:53\"><qiita-embed-ogp src=\"https://qiita.com/hmatsu47/items/b98ef4c1a87cc0ec415d\"></qiita-embed-ogp></p>\n<h1 data-sourcepos=\"13:1-13:27\">\n<span id=\"mapbox_searchについて\" class=\"fragment\"></span><a href=\"#mapbox_search%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>mapbox_searchについて</h1>\n<p data-sourcepos=\"14:1-15:38\">ここのpackageを使用します。<br>\n<a href=\"https://pub.dev/packages/mapbox_search\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/mapbox_search</a></p>\n<h1 data-sourcepos=\"18:1-18:17\">\n<span id=\"解説コード\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>解説コード</h1>\n<p data-sourcepos=\"20:1-20:79\">コードを書くにおいて、必要なpackageを記載しておきます。</p>\n<p data-sourcepos=\"22:1-25:34\"><a href=\"https://pub.dev/packages/geocoding\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/geocoding</a><br>\n<a href=\"https://pub.dev/packages/geolocator\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/geolocator</a><br>\n<a href=\"https://pub.dev/packages/location\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/location</a><br>\n<a href=\"https://pub.dev/packages/mapbox_gl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://pub.dev/packages/mapbox_gl</a></p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"28:1-152:3\"><div class=\"highlight\"><pre><code><span class=\"c1\">// Dart imports:</span>\n<span class=\"kn\">import</span> <span class=\"s\">'dart:async'</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// Flutter imports:</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:flutter/material.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:flutter/services.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:geocoding/geocoding.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:geolocator/geolocator.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:location/location.dart'</span> <span class=\"k\">as</span> <span class=\"n\">location</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:mapbox_search/mapbox_search.dart'</span> <span class=\"k\">as</span> <span class=\"n\">map_box_search</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// Package imports:</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:mapbox_gl/mapbox_gl.dart'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:mapbox_search/mapbox_search.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">MapScreen</span> <span class=\"kd\">extends</span> <span class=\"n\">StatefulWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">const</span> <span class=\"n\">MapScreen</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">_MapScreenState</span> <span class=\"n\">createState</span><span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">_MapScreenState</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">_MapScreenState</span> <span class=\"kd\">extends</span> <span class=\"n\">State</span><span class=\"o\">&lt;</span><span class=\"n\">MapScreen</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">restaurantList</span> <span class=\"o\">=</span> <span class=\"o\">[];</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Completer</span><span class=\"o\">&lt;</span><span class=\"n\">MapboxMapController</span><span class=\"o\">&gt;</span> <span class=\"n\">controller</span> <span class=\"o\">=</span> <span class=\"n\">Completer</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">initialLat</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">initialLong</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n  <span class=\"n\">location</span><span class=\"o\">.</span><span class=\"na\">LocationData</span><span class=\"o\">?</span> <span class=\"n\">yourLocation</span><span class=\"o\">;</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">initState</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">initState</span><span class=\"o\">();</span>\n    <span class=\"n\">getLocation</span><span class=\"o\">();</span>\n\n    <span class=\"n\">restaurantList</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n    <span class=\"kd\">final</span> <span class=\"n\">placesService</span> <span class=\"o\">=</span> <span class=\"n\">PlacesSearch</span><span class=\"o\">(</span>\n      <span class=\"nl\">apiKey:</span> <span class=\"s\">'mapBoxで取得したAPIKEYをここに入力する'</span><span class=\"o\">,</span>\n      <span class=\"nl\">country:</span> <span class=\"s\">'JP'</span><span class=\"o\">,</span>\n      <span class=\"nl\">limit:</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n      <span class=\"nl\">types:</span> <span class=\"n\">PlaceType</span><span class=\"o\">.</span><span class=\"na\">poi</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n    <span class=\"kd\">final</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">Geolocator</span><span class=\"o\">.</span><span class=\"na\">getCurrentPosition</span><span class=\"o\">();</span>\n    <span class=\"kd\">final</span> <span class=\"n\">restaurants</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">placesService</span><span class=\"o\">.</span><span class=\"na\">getPlaces</span><span class=\"o\">(</span>\n      <span class=\"s\">'restaurant'</span><span class=\"o\">,</span>\n      <span class=\"nl\">location:</span> <span class=\"n\">map_box_search</span><span class=\"o\">.</span><span class=\"na\">Location</span><span class=\"o\">(</span>\n        <span class=\"nl\">lat:</span> <span class=\"n\">position</span><span class=\"o\">.</span><span class=\"na\">latitude</span><span class=\"o\">,</span>\n        <span class=\"nl\">lng:</span> <span class=\"n\">position</span><span class=\"o\">.</span><span class=\"na\">longitude</span><span class=\"o\">,</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">var</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"n\">restaurantList</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">restaurants</span><span class=\"o\">![</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n      <span class=\"kd\">final</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">restaurants</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">properties</span><span class=\"o\">!.</span><span class=\"na\">address</span><span class=\"o\">;</span>\n      <span class=\"kd\">final</span> <span class=\"n\">restaurant</span> <span class=\"o\">=</span> <span class=\"n\">restaurantList</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n      <span class=\"kd\">final</span> <span class=\"n\">locations</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">locationFromAddress</span><span class=\"o\">(</span><span class=\"n\">address</span><span class=\"o\">!);</span>\n      <span class=\"n\">await</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"na\">future</span><span class=\"o\">.</span><span class=\"na\">then</span><span class=\"o\">(</span>\n        <span class=\"o\">(</span><span class=\"n\">mapBoxMap</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"n\">mapBoxMap</span><span class=\"o\">.</span><span class=\"na\">addSymbol</span><span class=\"o\">(</span>\n            <span class=\"n\">SymbolOptions</span><span class=\"o\">(</span>\n              <span class=\"nl\">geometry:</span> <span class=\"n\">LatLng</span><span class=\"o\">(</span>\n                <span class=\"n\">locations</span><span class=\"o\">.</span><span class=\"na\">first</span><span class=\"o\">.</span><span class=\"na\">latitude</span><span class=\"o\">,</span>\n                <span class=\"n\">locations</span><span class=\"o\">.</span><span class=\"na\">first</span><span class=\"o\">.</span><span class=\"na\">longitude</span><span class=\"o\">,</span>\n              <span class=\"o\">),</span>\n              <span class=\"nl\">textField:</span> <span class=\"n\">restaurant</span><span class=\"o\">,</span>\n              <span class=\"nl\">textAnchor:</span> <span class=\"s\">'top'</span><span class=\"o\">,</span>\n              <span class=\"nl\">textHaloWidth:</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n              <span class=\"nl\">textSize:</span> <span class=\"mi\">12</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconImage:</span> <span class=\"s\">'pin'</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconSize:</span> <span class=\"mf\">0.8</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconAnchor:</span> <span class=\"s\">'top'</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconHaloBlur:</span> <span class=\"mi\">100</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconHaloColor:</span> <span class=\"s\">'#FFF'</span><span class=\"o\">,</span>\n              <span class=\"nl\">iconOffset:</span> <span class=\"kd\">const</span> <span class=\"n\">Offset</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"o\">),</span>\n            <span class=\"o\">),</span>\n          <span class=\"o\">);</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"n\">getLocation</span><span class=\"o\">()</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n    <span class=\"n\">yourLocation</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">locationService</span><span class=\"o\">.</span><span class=\"na\">getLocation</span><span class=\"o\">();</span>\n    <span class=\"n\">locationChangedListen</span> <span class=\"o\">=</span> <span class=\"n\">locationService</span><span class=\"o\">.</span><span class=\"na\">onLocationChanged</span><span class=\"o\">.</span><span class=\"na\">listen</span><span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"na\">LocationData</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n        <span class=\"n\">yourLocation</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"n\">gpsTracking</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n    <span class=\"n\">notifyListeners</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">AnnotatedRegion</span><span class=\"o\">&lt;</span><span class=\"n\">SystemUiOverlayStyle</span><span class=\"o\">&gt;(</span>\n      <span class=\"nl\">value:</span> <span class=\"n\">SystemUiOverlayStyle</span><span class=\"o\">.</span><span class=\"na\">dark</span><span class=\"o\">,</span>\n      <span class=\"nl\">child:</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n        <span class=\"nl\">backgroundColor:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">white</span><span class=\"o\">,</span>\n        <span class=\"nl\">body:</span> <span class=\"n\">ClipRRect</span><span class=\"o\">(</span>\n          <span class=\"nl\">borderRadius:</span> <span class=\"kd\">const</span> <span class=\"n\">BorderRadius</span><span class=\"o\">.</span><span class=\"na\">only</span><span class=\"o\">(</span>\n            <span class=\"nl\">bottomLeft:</span> <span class=\"n\">Radius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">),</span>\n            <span class=\"nl\">bottomRight:</span> <span class=\"n\">Radius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">),</span>\n          <span class=\"o\">),</span>\n          <span class=\"nl\">child:</span> <span class=\"o\">(</span><span class=\"n\">yourLocation</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n              <span class=\"o\">?</span> <span class=\"kd\">const</span> <span class=\"n\">Center</span><span class=\"o\">(</span>\n                  <span class=\"nl\">child:</span> <span class=\"n\">CircularProgressIndicator</span><span class=\"o\">(),</span>\n                <span class=\"o\">)</span>\n              <span class=\"o\">:</span> <span class=\"n\">MapboxMap</span><span class=\"o\">(</span>\n                  <span class=\"nl\">styleString:</span> <span class=\"s\">'MapBox内のStyleを入れてあげる'</span><span class=\"o\">,</span>\n                  <span class=\"nl\">initialCameraPosition:</span> <span class=\"n\">CameraPosition</span><span class=\"o\">(</span>\n                    <span class=\"nl\">target:</span> <span class=\"n\">LatLng</span><span class=\"o\">(</span>\n                      <span class=\"n\">yourLocation</span><span class=\"o\">!.</span><span class=\"na\">latitude</span> <span class=\"o\">??</span> <span class=\"n\">initialLat</span><span class=\"o\">,</span>\n                      <span class=\"n\">yourLocation</span><span class=\"o\">!.</span><span class=\"na\">longitude</span> <span class=\"o\">??</span> <span class=\"n\">initialLong</span><span class=\"o\">,</span>\n                    <span class=\"o\">),</span>\n                    <span class=\"nl\">zoom:</span> <span class=\"mf\">13.5</span><span class=\"o\">,</span>\n                  <span class=\"o\">),</span>\n                  <span class=\"nl\">onMapCreated:</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"na\">complete</span><span class=\"o\">,</span>\n                  <span class=\"nl\">myLocationEnabled:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n                <span class=\"o\">),</span>\n        <span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"155:1-155:11\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n<p data-sourcepos=\"156:1-157:759\"><a href=\"https://camo.qiitausercontent.com/808f15b260616ac6c3e3e493f9d8882685fea3d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3637323630392f38376632613438382d633563642d353439642d663037662d3031623434613133313762382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=057400e6a3ed40534f9d462520abc906\" alt=\"Frame 9 (1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3e50085d1b7cfb81c2e16da92f8518f 1x\" loading=\"lazy\"></a><br>\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。</p>\n<h5 data-sourcepos=\"159:1-159:34\">\n<span id=\"homepage-httpsverooxyz\" class=\"fragment\"></span><a href=\"#homepage-httpsverooxyz\"><i class=\"fa fa-link\"></i></a>Homepage: <a href=\"https://veroo.xyz/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://veroo.xyz/</a>\n</h5>\n<h5 data-sourcepos=\"160:1-160:43\">\n<span id=\"discord-urlhttpstcovot0gpsfla\" class=\"fragment\"></span><a href=\"#discord-urlhttpstcovot0gpsfla\"><i class=\"fa fa-link\"></i></a>Discord URL：<a href=\"https://t.co/VoT0gpsflA\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/VoT0gpsflA</a>\n</h5>\n",
    "body": "\n今回は、mapbox_searchを使って店舗の情報をPinに表示させるについて紹介しようと思います。\n\n# 初めに\n\nMapBoxにおいて基礎についてです。これらを参考にしてもらえるといいと思います。\n\nhttps://www.mapbox.jp/\n\nhttps://qiita.com/hmatsu47/items/b98ef4c1a87cc0ec415d\n\n\n# mapbox_searchについて\nここのpackageを使用します。\nhttps://pub.dev/packages/mapbox_search\n\n\n# 解説コード\n\nコードを書くにおいて、必要なpackageを記載しておきます。\n\nhttps://pub.dev/packages/geocoding\nhttps://pub.dev/packages/geolocator\nhttps://pub.dev/packages/location\nhttps://pub.dev/packages/mapbox_gl\n\n\n```dart\n// Dart imports:\nimport 'dart:async';\n\n// Flutter imports:\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:geocoding/geocoding.dart';\nimport 'package:geolocator/geolocator.dart';\nimport 'package:location/location.dart' as location;\nimport 'package:mapbox_search/mapbox_search.dart' as map_box_search;\n\n// Package imports:\nimport 'package:mapbox_gl/mapbox_gl.dart';\nimport 'package:mapbox_search/mapbox_search.dart';\n\nclass MapScreen extends StatefulWidget {\n  const MapScreen({Key? key}) : super(key: key);\n\n  @override\n  _MapScreenState createState() => _MapScreenState();\n}\n\nclass _MapScreenState extends State<MapScreen> {\n  final List<String> restaurantList = [];\n  final Completer<MapboxMapController> controller = Completer();\n  final double initialLat = 0;\n  final double initialLong = 0;\n  location.LocationData? yourLocation;\n\n  @override\n  Future<void> initState() async {\n    super.initState();\n    getLocation();\n\n    restaurantList.clear();\n    final placesService = PlacesSearch(\n      apiKey: 'mapBoxで取得したAPIKEYをここに入力する',\n      country: 'JP',\n      limit: 10,\n      types: PlaceType.poi,\n    );\n    final position = await Geolocator.getCurrentPosition();\n    final restaurants = await placesService.getPlaces(\n      'restaurant',\n      location: map_box_search.Location(\n        lat: position.latitude,\n        lng: position.longitude,\n      ),\n    );\n    for (var i = 0; i < 10; i++) {\n      restaurantList.add(restaurants![i].toString());\n      final address = restaurants[i].properties!.address;\n      final restaurant = restaurantList[i];\n      final locations = await locationFromAddress(address!);\n      await controller.future.then(\n        (mapBoxMap) {\n          mapBoxMap.addSymbol(\n            SymbolOptions(\n              geometry: LatLng(\n                locations.first.latitude,\n                locations.first.longitude,\n              ),\n              textField: restaurant,\n              textAnchor: 'top',\n              textHaloWidth: 3,\n              textSize: 12,\n              iconImage: 'pin',\n              iconSize: 0.8,\n              iconAnchor: 'top',\n              iconHaloBlur: 100,\n              iconHaloColor: '#FFF',\n              iconOffset: const Offset(0, -55),\n            ),\n          );\n        },\n      );\n    }\n  }\n  \n  Future<void> getLocation() async {\n    yourLocation = await locationService.getLocation();\n    locationChangedListen = locationService.onLocationChanged.listen(\n      (location.LocationData result) async {\n        yourLocation = result;\n        gpsTracking = true;\n      },\n    );\n    notifyListeners();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnnotatedRegion<SystemUiOverlayStyle>(\n      value: SystemUiOverlayStyle.dark,\n      child: Scaffold(\n        backgroundColor: Colors.white,\n        body: ClipRRect(\n          borderRadius: const BorderRadius.only(\n            bottomLeft: Radius.circular(20),\n            bottomRight: Radius.circular(20),\n          ),\n          child: (yourLocation == null)\n              ? const Center(\n                  child: CircularProgressIndicator(),\n                )\n              : MapboxMap(\n                  styleString: 'MapBox内のStyleを入れてあげる',\n                  initialCameraPosition: CameraPosition(\n                    target: LatLng(\n                      yourLocation!.latitude ?? initialLat,\n                      yourLocation!.longitude ?? initialLong,\n                    ),\n                    zoom: 13.5,\n                  ),\n                  onMapCreated: controller.complete,\n                  myLocationEnabled: true,\n                ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n\n# 最後に\n![Frame 9 (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png)\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。\n\n##### Homepage: https://veroo.xyz/\n##### Discord URL：https://t.co/VoT0gpsflA \n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-11-28T20:25:50+09:00",
    "group": null,
    "id": "318ef3c2a2317a25f3cf",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "mapbox",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "[Flutter]mapbox_searchを使って店舗の情報をPinに表示させる",
    "updated_at": "2022-12-03T12:34:13+09:00",
    "url": "https://qiita.com/iseruuuuu/items/318ef3c2a2317a25f3cf",
    "user": {
      "description": "Flutterを使用した iOS/Android 開発をすることが大好きな文系大学生です✌️\r\n",
      "facebook_id": "",
      "followees_count": 3,
      "followers_count": 7,
      "github_login_name": "iseruuuuu",
      "id": "iseruuuuu",
      "items_count": 42,
      "linkedin_id": "竜太郎-井関-b350ab223/",
      "location": "日本　神奈川県",
      "name": "Ryutaro Iseki",
      "organization": "立正大学",
      "permanent_id": 672609,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/67954894?v=4",
      "team_only": false,
      "twitter_screen_name": "isekiryu",
      "website_url": "https://youtrust.jp/users/iseki"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p data-sourcepos=\"3:1-3:243\"><a href=\"https://pub.dev/packages/go_router\" rel=\"nofollow noopener\" target=\"_blank\">go_router</a>を5.2.0に上げたときに、<code>refreshListenable</code>で<code>GoRouterRefreshStream(stream)</code>という書き方が出来なくなっており、解決策を調べたので共有したいと思います。</p>\n<p data-sourcepos=\"5:1-6:232\">コピペで使いたい人向けにコードを置いておきます。<br>\n<a href=\"https://stackoverflow.com/questions/69930605/how-to-convert-a-stream-to-a-listenable-in-flutter\" rel=\"nofollow noopener\" target=\"_blank\">StackOverflow</a>で回答されていたコードが個人的に良さそうと思ったので、それをそのまま使ってます。</p>\n<div class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"7:1-43:3\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"s\">'dart:async'</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"s\">'package:flutter/foundation.dart'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">GoRouterRefreshStream</span> <span class=\"kd\">extends</span> <span class=\"n\">ChangeNotifier</span> <span class=\"o\">{</span>\n  <span class=\"n\">GoRouterRefreshStream</span><span class=\"o\">(</span><span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"kd\">dynamic</span><span class=\"o\">&gt;</span> <span class=\"n\">stream</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">notifyListeners</span><span class=\"o\">();</span>\n    <span class=\"n\">_subscription</span> <span class=\"o\">=</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"na\">asBroadcastStream</span><span class=\"o\">().</span><span class=\"na\">listen</span><span class=\"o\">(</span>\n          <span class=\"o\">(</span><span class=\"kd\">dynamic</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">notifyListeners</span><span class=\"o\">(),</span>\n        <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">late</span> <span class=\"kd\">final</span> <span class=\"n\">StreamSubscription</span><span class=\"o\">&lt;</span><span class=\"kd\">dynamic</span><span class=\"o\">&gt;</span> <span class=\"n\">_subscription</span><span class=\"o\">;</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"kt\">void</span> <span class=\"n\">dispose</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">_subscription</span><span class=\"o\">.</span><span class=\"na\">cancel</span><span class=\"o\">();</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"na\">dispose</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"err\">・・・</span>\n\n<span class=\"c1\">// 使用例</span>\n<span class=\"n\">GoRouter</span><span class=\"o\">(</span>\n    <span class=\"nl\">initialLocation:</span> <span class=\"s\">\"/\"</span><span class=\"o\">,</span>\n    <span class=\"nl\">debugLogDiagnostics:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n    <span class=\"nl\">redirect:</span> <span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// リダイレクト処理</span>\n    <span class=\"o\">},</span>\n    <span class=\"c1\">// 上記クラスを使用</span>\n    <span class=\"nl\">refreshListenable:</span> <span class=\"n\">GoRouterRefreshStream</span><span class=\"o\">(</span><span class=\"n\">authRepository</span><span class=\"o\">.</span><span class=\"na\">authStateChanges</span><span class=\"o\">()),</span>\n    <span class=\"nl\">routes:</span> <span class=\"o\">&lt;</span><span class=\"n\">RouteBase</span><span class=\"o\">&gt;[</span>\n    <span class=\"o\">],</span>\n  <span class=\"o\">);</span>\n\n</code></pre></div></div>\n<h1 data-sourcepos=\"45:1-45:8\">\n<span id=\"目次\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%AC%A1\"><i class=\"fa fa-link\"></i></a>目次</h1>\n\n<ol data-sourcepos=\"47:1-50:0\">\n<li data-sourcepos=\"47:1-47:62\"><a href=\"#%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E5%8E%9F%E5%9B%A0\">使えなくなった原因</a></li>\n<li data-sourcepos=\"48:1-48:72\"><a href=\"#refreshListenable%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B%EF%BC%9F\">refreshListenableとは何か？</a></li>\n<li data-sourcepos=\"49:1-50:0\"><a href=\"#reference\">参考文献</a></li>\n</ol>\n\n<p data-sourcepos=\"52:1-52:41\"><a id=\"#使えなくなった原因\"></a></p>\n<h1 data-sourcepos=\"53:1-53:29\">\n<span id=\"使えなくなった原因\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>使えなくなった原因</h1>\n<p data-sourcepos=\"54:1-55:93\">使えなくなった原因は、<code>go_router</code>の5.0.0以降で<code>GoRouterRefreshStream</code>クラスが削除されたからです。<br>\n削除した理由はルーティングとは関係ないクラスだからのようです。</p>\n<p data-sourcepos=\"57:1-57:46\"><a id=\"#refreshListenableとは何か？\"></a></p>\n<h1 data-sourcepos=\"58:1-58:34\">\n<span id=\"refreshlistenableとは何か\" class=\"fragment\"></span><a href=\"#refreshlistenable%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\"><i class=\"fa fa-link\"></i></a>refreshListenableとは何か？</h1>\n<p data-sourcepos=\"59:1-59:121\">使えなくなったときに、<code>refreshListenable</code>って何？と疑問に思い、少しだけ調べてみました。</p>\n<ul data-sourcepos=\"60:1-63:0\">\n<li data-sourcepos=\"60:1-60:40\">\n<code>refreshListenable</code>は<code>Listenable?</code>型</li>\n<li data-sourcepos=\"61:1-63:0\">\n<code>Listenable</code>型を継承したクラスには、<code>ChangeNotifier</code>がある<br>\n（<code>ChangeNotifier</code>のほかに、<code>ValueListenable</code>というクラスも使えそうでしたが使い方は調べてません。知っている方いればコメントいただけると嬉しいです）</li>\n</ul>\n<p data-sourcepos=\"64:1-64:141\">上記の理由から、サンプルコードの<code>GoRouterRefreshStream</code>は<code>ChangeNotifier</code>を継承させたクラスになっています。</p>\n<p data-sourcepos=\"66:1-66:23\"><a id=\"#reference\"></a></p>\n<h1 data-sourcepos=\"67:1-67:14\">\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h1>\n<ul data-sourcepos=\"68:1-68:97\">\n<li data-sourcepos=\"68:1-68:97\"><a href=\"https://stackoverflow.com/questions/69930605/how-to-convert-a-stream-to-a-listenable-in-flutter\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://stackoverflow.com/questions/69930605/how-to-convert-a-stream-to-a-listenable-in-flutter</a></li>\n</ul>\n",
    "body": "# はじめに\n<!-- 発端や概要を記載 -->\n[go_router](https://pub.dev/packages/go_router)を5.2.0に上げたときに、`refreshListenable`で`GoRouterRefreshStream(stream)`という書き方が出来なくなっており、解決策を調べたので共有したいと思います。\n\nコピペで使いたい人向けにコードを置いておきます。\n[StackOverflow](https://stackoverflow.com/questions/69930605/how-to-convert-a-stream-to-a-listenable-in-flutter)で回答されていたコードが個人的に良さそうと思ったので、それをそのまま使ってます。\n```dart\nimport 'dart:async';\nimport 'package:flutter/foundation.dart';\n\nclass GoRouterRefreshStream extends ChangeNotifier {\n  GoRouterRefreshStream(Stream<dynamic> stream) {\n    notifyListeners();\n    _subscription = stream.asBroadcastStream().listen(\n          (dynamic _) => notifyListeners(),\n        );\n  }\n\n  late final StreamSubscription<dynamic> _subscription;\n\n  @override\n  void dispose() {\n    _subscription.cancel();\n    super.dispose();\n  }\n}\n\n・・・\n\n// 使用例\nGoRouter(\n    initialLocation: \"/\",\n    debugLogDiagnostics: false,\n    redirect: (context, state) {\n        // リダイレクト処理\n    },\n    // 上記クラスを使用\n    refreshListenable: GoRouterRefreshStream(authRepository.authStateChanges()),\n    routes: <RouteBase>[\n    ],\n  );\n\n```\n\n# 目次\n<!-- タイトルとアンカー名を編集 -->\n1. [使えなくなった原因](#使えなくなった原因)\n1. [refreshListenableとは何か？](#refreshListenableとは何か？)\n1. [参考文献](#reference)\n\n<!-- 各チャプター -->\n<a id=\"#使えなくなった原因\"></a>\n# 使えなくなった原因\n使えなくなった原因は、`go_router`の5.0.0以降で`GoRouterRefreshStream`クラスが削除されたからです。\n削除した理由はルーティングとは関係ないクラスだからのようです。\n\n<a id=\"#refreshListenableとは何か？\"></a>\n# refreshListenableとは何か？\n使えなくなったときに、`refreshListenable`って何？と疑問に思い、少しだけ調べてみました。\n* `refreshListenable`は`Listenable?`型\n* `Listenable`型を継承したクラスには、`ChangeNotifier`がある\n（`ChangeNotifier`のほかに、`ValueListenable`というクラスも使えそうでしたが使い方は調べてません。知っている方いればコメントいただけると嬉しいです）\n\n上記の理由から、サンプルコードの`GoRouterRefreshStream`は`ChangeNotifier`を継承させたクラスになっています。\n\n<a id=\"#reference\"></a>\n# 参考文献\n- https://stackoverflow.com/questions/69930605/how-to-convert-a-stream-to-a-listenable-in-flutter\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-02T10:12:19+09:00",
    "group": null,
    "id": "5176f80c835595fb1227",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": " go_router 5.0以降でrefreshListenableにStreamを使う方法",
    "updated_at": "2022-12-02T10:12:19+09:00",
    "url": "https://qiita.com/MLLB/items/5176f80c835595fb1227",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 4,
      "followers_count": 2,
      "github_login_name": null,
      "id": "MLLB",
      "items_count": 21,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 2475427,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2475427/3e388687b821b6877203c2a902bee295c762b2f0/large.png?1659679977",
      "team_only": false,
      "twitter_screen_name": "MLLB60944015",
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p data-sourcepos=\"1:1-1:105\">私が関わっているプロジェクトでは、Mapを使用したアプリを作成しています。</p>\n<p data-sourcepos=\"3:1-3:75\">その際に、どのMapを使うかで色々と議論がありました。</p>\n<p data-sourcepos=\"5:1-7:27\">・UI・UXはどっちの方が望ましいのか<br>\n・必要な機能の実装は満たしているのか<br>\n・参考文献の多彩さ</p>\n<p data-sourcepos=\"9:1-9:87\">これらを踏まえて、MapBoxを採用し、開発することに決めました。</p>\n<p data-sourcepos=\"12:1-12:125\">先に、それぞれの利点を自分なりにまとめてみました。 <strong>注意：開発前時点での利点です。</strong></p>\n<table data-sourcepos=\"14:1-18:22\">\n<thead>\n<tr data-sourcepos=\"14:1-14:20\">\n<th style=\"text-align: left\" data-sourcepos=\"14:2-14:1\"></th>\n<th style=\"text-align: center\" data-sourcepos=\"14:3-14:12\">Google Map</th>\n<th style=\"text-align: center\" data-sourcepos=\"14:14-14:19\">MapBox</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"16:1-16:15\">\n<td style=\"text-align: left\" data-sourcepos=\"16:2-16:6\">UI/UX</td>\n<td style=\"text-align: center\" data-sourcepos=\"16:8-16:10\">△</td>\n<td style=\"text-align: center\" data-sourcepos=\"16:12-16:14\">◯</td>\n</tr>\n<tr data-sourcepos=\"17:1-17:19\">\n<td style=\"text-align: left\" data-sourcepos=\"17:2-17:10\">機能面</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:12-17:14\">◯</td>\n<td style=\"text-align: center\" data-sourcepos=\"17:16-17:18\">◯</td>\n</tr>\n<tr data-sourcepos=\"18:1-18:22\">\n<td style=\"text-align: left\" data-sourcepos=\"18:2-18:13\">参考文献</td>\n<td style=\"text-align: center\" data-sourcepos=\"18:15-18:17\">◯</td>\n<td style=\"text-align: center\" data-sourcepos=\"18:19-18:21\">△</td>\n</tr>\n</tbody>\n</table>\n<p data-sourcepos=\"21:1-21:99\">最終決定としては、<strong>UI/UXを考慮してMapBox</strong>を採用することになりました。</p>\n<h2 data-sourcepos=\"24:1-24:36\">\n<span id=\"やってみてわかったこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やってみてわかったこと</h2>\n<p data-sourcepos=\"26:1-26:51\">やってみて様々な点がわかりました。</p>\n<h3 data-sourcepos=\"28:1-28:19\">\n<span id=\"いいところ\" class=\"fragment\"></span><a href=\"#%E3%81%84%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D\"><i class=\"fa fa-link\"></i></a>いいところ</h3>\n<p data-sourcepos=\"29:1-30:14\">・使いたい機能の記事がドンピシャで見つけることができた。<br>\n・UIが好き</p>\n<h3 data-sourcepos=\"32:1-32:25\">\n<span id=\"詰まったところ\" class=\"fragment\"></span><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D\"><i class=\"fa fa-link\"></i></a>詰まったところ</h3>\n<p data-sourcepos=\"33:1-35:51\">・Androidだと、うまくMapが表示されない<br>\n・MapBoxのSymbolが表示されたり、表示されなかったりとする<br>\n・本当に必要な記事がとても少ない。</p>\n<p data-sourcepos=\"38:1-39:195\">そこでまた再び議論を行いました。その結果、Google Mapに切り替えて開発をすることになりました。<br>\nしっかりと検証して、試みて、わかったことを踏まえて会議を行うことはとても大切ですね。切り替えまでに時間が結構かかってしまいました。</p>\n<h1 data-sourcepos=\"44:1-44:11\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n<p data-sourcepos=\"45:1-46:759\"><a href=\"https://camo.qiitausercontent.com/808f15b260616ac6c3e3e493f9d8882685fea3d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3637323630392f38376632613438382d633563642d353439642d663037662d3031623434613133313762382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=057400e6a3ed40534f9d462520abc906\" alt=\"Frame 9 (1).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F672609%2F87f2a488-c5cd-549d-f07f-01b44a1317b8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f3e50085d1b7cfb81c2e16da92f8518f 1x\" loading=\"lazy\"></a><br>\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。</p>\n<h5 data-sourcepos=\"48:1-48:34\">\n<span id=\"homepage-httpsverooxyz\" class=\"fragment\"></span><a href=\"#homepage-httpsverooxyz\"><i class=\"fa fa-link\"></i></a>Homepage: <a href=\"https://veroo.xyz/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://veroo.xyz/</a>\n</h5>\n<h5 data-sourcepos=\"49:1-49:43\">\n<span id=\"discord-urlhttpstcovot0gpsfla\" class=\"fragment\"></span><a href=\"#discord-urlhttpstcovot0gpsfla\"><i class=\"fa fa-link\"></i></a>Discord URL：<a href=\"https://t.co/VoT0gpsflA\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/VoT0gpsflA</a>\n</h5>\n",
    "body": "私が関わっているプロジェクトでは、Mapを使用したアプリを作成しています。\n\nその際に、どのMapを使うかで色々と議論がありました。\n\n・UI・UXはどっちの方が望ましいのか\n・必要な機能の実装は満たしているのか\n・参考文献の多彩さ\n\nこれらを踏まえて、MapBoxを採用し、開発することに決めました。\n\n\n先に、それぞれの利点を自分なりにまとめてみました。 **注意：開発前時点での利点です。**\n\n||Google Map|MapBox|\n|:--|:--:|:--:|\n|UI/UX|△|◯|\n|機能面|◯|◯|\n|参考文献|◯|△|\n\n\n最終決定としては、**UI/UXを考慮してMapBox**を採用することになりました。\n\n\n## やってみてわかったこと\n\nやってみて様々な点がわかりました。\n\n### いいところ\n・使いたい機能の記事がドンピシャで見つけることができた。\n・UIが好き\n\n### 詰まったところ\n・Androidだと、うまくMapが表示されない\n・MapBoxのSymbolが表示されたり、表示されなかったりとする\n・本当に必要な記事がとても少ない。\n\n\nそこでまた再び議論を行いました。その結果、Google Mapに切り替えて開発をすることになりました。\nしっかりと検証して、試みて、わかったことを踏まえて会議を行うことはとても大切ですね。切り替えまでに時間が結構かかってしまいました。\n\n\n\n\n# 最後に\n![Frame 9 (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/672609/87f2a488-c5cd-549d-f07f-01b44a1317b8.png)\n<b>Veroo</b>は、Blockchain技術を活用した「想いの巡るグルメSNSアプリ」です。食に対する熱量、例えばラーメンがめちゃくちゃ好きで年間400杯食べているとか、変態的に具材にこだわった中華料理を作っているなどのような、今まで直接お金にはならなかった食に対する情熱や熱量、その裏側にある想いがトークンを使うことで巡る世界。自分のラーメンに費やす熱量がコミュニティに承認される。自分がほんとにいいと思って作った食べ物がコミュニティで広まる。Verooは単なるSNSアプリではなく、クリエイターたちの想いが紡がれるソーシャルグルメアプリです。\n\n##### Homepage: https://veroo.xyz/\n##### Discord URL：https://t.co/VoT0gpsflA \n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-11-28T08:46:00+09:00",
    "group": null,
    "id": "50dc0c5cf0aa66d9360e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "mapbox",
        "versions": []
      },
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "[Flutter]MapBoxからGoogle Mapに切り替えた理由",
    "updated_at": "2022-12-03T12:33:32+09:00",
    "url": "https://qiita.com/iseruuuuu/items/50dc0c5cf0aa66d9360e",
    "user": {
      "description": "Flutterを使用した iOS/Android 開発をすることが大好きな文系大学生です✌️\r\n",
      "facebook_id": "",
      "followees_count": 3,
      "followers_count": 7,
      "github_login_name": "iseruuuuu",
      "id": "iseruuuuu",
      "items_count": 42,
      "linkedin_id": "竜太郎-井関-b350ab223/",
      "location": "日本　神奈川県",
      "name": "Ryutaro Iseki",
      "organization": "立正大学",
      "permanent_id": 672609,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/67954894?v=4",
      "team_only": false,
      "twitter_screen_name": "isekiryu",
      "website_url": "https://youtrust.jp/users/iseki"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"目標\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%A8%99\"><i class=\"fa fa-link\"></i></a>目標</h2>\n<ul data-sourcepos=\"2:1-12:0\">\n<li data-sourcepos=\"2:1-2:50\">Flutter 開発環境をWSL2上に作成する．</li>\n<li data-sourcepos=\"3:1-3:34\">Android Studioは入れない．</li>\n<li data-sourcepos=\"4:1-10:28\">エミュレートは\n<ul data-sourcepos=\"5:5-10:28\">\n<li data-sourcepos=\"5:5-5:20\">Linuxで行う</li>\n<li data-sourcepos=\"6:5-10:28\">(Androidエミュレータはそのうちドキュメント化)<br>\n⁻ adbなどは記載済み\n<ul data-sourcepos=\"8:9-10:28\">\n<li data-sourcepos=\"8:9-8:43\">WSAはエラー率が高かった</li>\n<li data-sourcepos=\"9:9-9:34\">Chromeはうまくいく</li>\n<li data-sourcepos=\"10:9-10:28\">実機は未実施</li>\n</ul>\n</li>\n</ul>\n</li>\n<li data-sourcepos=\"11:1-12:0\">エディタはVSCodeを使用する．</li>\n</ul>\n<h2 data-sourcepos=\"13:1-13:9\">\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h2>\n<ul data-sourcepos=\"14:1-17:0\">\n<li data-sourcepos=\"14:1-14:18\">Windows11 (22H2)</li>\n<li data-sourcepos=\"15:1-15:6\">WSL2</li>\n<li data-sourcepos=\"16:1-17:0\">Ubuntu 22.04.1</li>\n</ul>\n<h2 data-sourcepos=\"18:1-18:60\">\n<span id=\"手順コマンドは一つずつに分けて記載\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AF%E4%B8%80%E3%81%A4%E3%81%9A%E3%81%A4%E3%81%AB%E5%88%86%E3%81%91%E3%81%A6%E8%A8%98%E8%BC%89\"><i class=\"fa fa-link\"></i></a>手順（コマンドは一つずつに分けて記載）</h2>\n<h3 data-sourcepos=\"20:1-20:11\">\n<span id=\"flutter\" class=\"fragment\"></span><a href=\"#flutter\"><i class=\"fa fa-link\"></i></a>Flutter</h3>\n<ol data-sourcepos=\"21:1-53:0\">\n<li data-sourcepos=\"21:1-27:7\">インストール済みパッケージのアップデート\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"22:5-24:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sudo apt update\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"25:5-27:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sudo apt update\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"28:1-31:7\">公式からダウンロードリンクを取得し，ダウンロード (リンクは取得したものに変更する)\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"29:5-31:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.3.9-stable.tar.xz\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"32:1-35:7\">解凍\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"33:5-35:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code> tar xf flutter_linux_3.3.9-stable.tar.xz\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"36:1-40:7\">\n<code>~/.bashrc</code>に以下を追記\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"37:5-40:7\">\n<div class=\"code-lang\"><span class=\"bold\">~/.bashrc</span></div>\n<div class=\"highlight\"><pre><code>export FLUTTER_ROOT=$HOME/flutter\nexport PATH=$PATH:$FLUTTER_ROOT/bin\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"41:1-44:7\">\n<code>.bashrc</code>を反映\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"42:5-44:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>source .bashrc\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"45:1-48:7\">確認\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"46:5-48:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter --version\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"49:1-53:0\">解凍前のtar.xzファイルを削除 (ファイル名は適宜変更する)\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"50:5-52:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>rm -rf flutter_linux_3.3.9-stable.tar.xz\n</code></pre></div>\n</div>\n</li>\n</ol>\n<h3 data-sourcepos=\"54:1-54:12\">\n<span id=\"java-sdk\" class=\"fragment\"></span><a href=\"#java-sdk\"><i class=\"fa fa-link\"></i></a>Java SDK</h3>\n<ol data-sourcepos=\"55:1-68:0\">\n<li data-sourcepos=\"55:1-58:7\">インストール\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"56:5-58:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sudo apt install default-jdk -y\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"59:1-63:7\">\n<code>~/.bashrc</code>に以下を追記\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"60:5-63:7\">\n<div class=\"code-lang\"><span class=\"bold\">~/.bashrc</span></div>\n<div class=\"highlight\"><pre><code>export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64  \nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"64:1-68:0\">\n<code>.bashrc</code>を反映\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"65:5-67:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>source .bashrc\n</code></pre></div>\n</div>\n</li>\n</ol>\n<h3 data-sourcepos=\"69:1-69:19\">\n<span id=\"linux-toolchain\" class=\"fragment\"></span><a href=\"#linux-toolchain\"><i class=\"fa fa-link\"></i></a>Linux toolchain</h3>\n<ol data-sourcepos=\"70:1-90:39\">\n<li data-sourcepos=\"70:1-73:7\">必要なものを確認\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"71:5-73:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter doctor    \n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"74:1-77:7\">上記コマンドの結果，Linux toolchainで必要と表示されたものをインストール\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"75:5-77:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sudo apt install clang cmake ninja-build pkg-config\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"78:1-81:7\">もう一度確認\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"79:5-81:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter doctor    \n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"82:1-85:7\">上記コマンドの結果，Linux toolchainで必要と表示されたものをインストール\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"83:5-85:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sudo apt install clang cmake ninja-build pkg-config\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"86:1-90:39\">もう一度確認\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"87:5-89:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter doctor    \n</code></pre></div>\n</div>\nLinux toolchainが✓になればOK</li>\n</ol>\n<h3 data-sourcepos=\"91:1-91:15\">\n<span id=\"android-sdk\" class=\"fragment\"></span><a href=\"#android-sdk\"><i class=\"fa fa-link\"></i></a>Android SDK</h3>\n<ol data-sourcepos=\"92:1-147:0\">\n<li data-sourcepos=\"92:1-93:168\">\n<p data-sourcepos=\"92:4-93:168\">下記サイトから利用規約に同意したうえでダウンロードリンクを取得<br>\n<a href=\"https://developer.android.com/studio#downloads:~:text=d0192807f7e1cd4a001d13bb1e5904fc287b691211648877258aa44d1fa88275-,Linux,-commandlinetools%2Dlinux%2D9123335_latest\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://developer.android.com/studio#downloads:~:text=d0192807f7e1cd4a001d13bb1e5904fc287b691211648877258aa44d1fa88275-,Linux,-commandlinetools%2Dlinux%2D9123335_latest</a></p>\n</li>\n<li data-sourcepos=\"94:1-97:7\">\n<p data-sourcepos=\"94:4-94:81\">ダウンロード（リンクは上で使用したものに置き換える）</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"95:5-97:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>wget https://dl.google.com/android/repository/commandlinetools-linux-9123335_latest.zip -O latest.zip\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"98:1-102:122\">\n<p data-sourcepos=\"98:4-98:9\">解凍</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"99:5-101:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>unzip latest.zip\n</code></pre></div>\n</div>\n<p data-sourcepos=\"102:4-102:122\"><code>unzip not found</code>と出たら，<code>sudo apt install unzip</code>実行後にもう一度上記のコマンドで解凍する．</p>\n</li>\n<li data-sourcepos=\"103:1-109:7\">\n<p data-sourcepos=\"103:4-103:9\">移動</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"104:5-106:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>mkdir -p ~/Android/SDK/cmdline-tools\n</code></pre></div>\n</div>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"107:5-109:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>mv cmdline-tools ~/Android/SDK/cmdline-tools/latest\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"110:1-113:7\">\n<p data-sourcepos=\"110:4-110:24\">zipファイル削除</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"111:5-113:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>rm -rf latest.zip\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"114:1-118:7\">\n<p data-sourcepos=\"114:4-114:32\"><code>~/.bashrc</code>に以下を追記</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"115:5-118:7\">\n<div class=\"code-lang\"><span class=\"bold\">~/.bashrc</span></div>\n<div class=\"highlight\"><pre><code>export ANDROID_HOME=$HOME/Android/SDK\nexport PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"119:1-122:7\">\n<p data-sourcepos=\"119:4-119:21\"><code>.bashrc</code>を反映</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"120:5-122:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>source .bashrc\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"123:1-129:0\">\n<p data-sourcepos=\"123:4-123:9\">確認</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"124:5-126:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sdkmanager --version\n</code></pre></div>\n</div>\n<p data-sourcepos=\"127:5-128:7\">参考結果：<br>\n8.0</p>\n</li>\n<li data-sourcepos=\"130:1-133:7\">\n<p data-sourcepos=\"130:4-130:51\">インストールできるイメージの確認</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"131:5-133:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sdkmanager --list\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"134:1-137:7\">\n<p data-sourcepos=\"134:4-134:18\">adbの有効化</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"135:5-137:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sdkmanager --install \"platform-tools\"\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"138:1-142:34\">\n<p data-sourcepos=\"138:4-138:36\">イメージのインストール</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"139:5-141:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sdkmanager --install \"system-images;android-33;google_apis;x86_64\" \"platforms;android-33\" \"build-tools;33.0.1\"\n</code></pre></div>\n</div>\n<p data-sourcepos=\"142:5-142:34\">当時の最新を選んだ．</p>\n</li>\n<li data-sourcepos=\"143:1-147:0\">\n<p data-sourcepos=\"143:4-143:27\">ライセンスに同意</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"144:5-146:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>sdkmanager --licenses\n</code></pre></div>\n</div>\n</li>\n</ol>\n<h3 data-sourcepos=\"148:1-148:23\">\n<span id=\"flutter環境確認\" class=\"fragment\"></span><a href=\"#flutter%E7%92%B0%E5%A2%83%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>flutter環境確認</h3>\n<ol data-sourcepos=\"149:1-168:0\">\n<li data-sourcepos=\"149:1-168:0\">以下コマンドを実行\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"150:5-152:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter doctor\n</code></pre></div>\n</div>\n参考結果：\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"154:5-167:7\"><div class=\"highlight\"><pre><code>Doctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, 3.3.9, on Ubuntu 22.04.1 LTS\n    5.15.74.2-microsoft-standard-WSL2, locale en_US.UTF-8)\n[✓] Android toolchain - develop for Android devices (Android SDK version 33.0.1)\n[✗] Chrome - develop for the web (Cannot find Chrome executable at google-chrome)\n    ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.\n[✓] Linux toolchain - develop for Linux desktop\n[!] Android Studio (not installed)\n[✓] Connected device (1 available)\n[✓] HTTP Host Availability\n\n! Doctor found issues in 2 categories.\n</code></pre></div></div>\n</li>\n</ol>\n<h3 data-sourcepos=\"169:1-169:10\">\n<span id=\"vscode\" class=\"fragment\"></span><a href=\"#vscode\"><i class=\"fa fa-link\"></i></a>VSCode</h3>\n<ol data-sourcepos=\"170:1-171:0\">\n<li data-sourcepos=\"170:1-171:0\">拡張機能「Flutter」を入れる</li>\n</ol>\n<h2 data-sourcepos=\"172:1-172:12\">\n<span id=\"テスト\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>テスト</h2>\n<ol data-sourcepos=\"173:1-187:0\">\n<li data-sourcepos=\"173:1-173:48\">Ubuntuで好きなディレクトリに移動</li>\n<li data-sourcepos=\"174:1-177:7\">テストアプリの作成\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"175:5-177:7\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>flutter create hello_world\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"178:1-181:8\">アプリのディレクトリに移動\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"179:5-181:8\">\n<div class=\"code-lang\"><span class=\"bold\">Ubuntu</span></div>\n<div class=\"highlight\"><pre><code>cd hello_world\n</code></pre></div>\n</div>\n</li>\n<li data-sourcepos=\"182:1-182:45\">\n<code>lib/main.dart</code>をアクティブにする</li>\n<li data-sourcepos=\"183:1-183:53\">\n<code>Ctrl Shift P</code>でコマンドパレットを開く</li>\n<li data-sourcepos=\"184:1-184:44\">\n<code>Flutter: Select Device</code>でLinuxを選択</li>\n<li data-sourcepos=\"185:1-185:53\">\n<code>Ctrl Shift P</code>でコマンドパレットを開く</li>\n<li data-sourcepos=\"186:1-187:0\">\n<code>Debug: Start Debugging</code>を実行</li>\n</ol>\n<h3 data-sourcepos=\"188:1-188:37\">\n<span id=\"コードの更新を反映する\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E6%9B%B4%E6%96%B0%E3%82%92%E5%8F%8D%E6%98%A0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コードの更新を反映する</h3>\n<ul data-sourcepos=\"189:1-190:49\">\n<li data-sourcepos=\"189:1-189:101\">コードを書き換え，VSCode上部に出ているボタンの，⚡アイコンをクリック</li>\n<li data-sourcepos=\"190:1-190:49\">もしくはコードを書き換えて<code>Ctrl S</code>\n</li>\n</ul>\n",
    "body": "## 目標\n- Flutter 開発環境をWSL2上に作成する．\n- Android Studioは入れない．\n- エミュレートは\n    - Linuxで行う\n    - (Androidエミュレータはそのうちドキュメント化)\n        ⁻ adbなどは記載済み\n        - WSAはエラー率が高かった\n        - Chromeはうまくいく\n        - 実機は未実施\n- エディタはVSCodeを使用する．\n\n## 前提\n- Windows11 (22H2)\n- WSL2\n- Ubuntu 22.04.1\n\n## 手順（コマンドは一つずつに分けて記載）\n\n### Flutter\n1. インストール済みパッケージのアップデート\n    ```:Ubuntu\n    sudo apt update\n    ```\n    ```:Ubuntu\n    sudo apt update\n    ```\n1. 公式からダウンロードリンクを取得し，ダウンロード (リンクは取得したものに変更する)\n    ```:Ubuntu\n    wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.3.9-stable.tar.xz\n    ```\n1.  解凍\n    ```:Ubuntu\n     tar xf flutter_linux_3.3.9-stable.tar.xz\n    ```\n1. `~/.bashrc`に以下を追記\n    ```:~/.bashrc\n    export FLUTTER_ROOT=$HOME/flutter\n    export PATH=$PATH:$FLUTTER_ROOT/bin\n    ```\n1. `.bashrc`を反映\n    ```:Ubuntu\n    source .bashrc\n    ```\n1.  確認\n    ```:Ubuntu\n    flutter --version\n    ```\n1. 解凍前のtar.xzファイルを削除 (ファイル名は適宜変更する)\n    ```:Ubuntu\n    rm -rf flutter_linux_3.3.9-stable.tar.xz\n    ```\n\n### Java SDK\n1. インストール\n    ```:Ubuntu\n    sudo apt install default-jdk -y\n    ```\n1. `~/.bashrc`に以下を追記\n    ```:~/.bashrc\n    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64  \n    export PATH=$PATH:$JAVA_HOME/bin\n    ```\n1. `.bashrc`を反映\n    ```:Ubuntu\n    source .bashrc\n    ```\n\n### Linux toolchain\n1. 必要なものを確認\n    ```:Ubuntu\n    flutter doctor    \n    ```\n1. 上記コマンドの結果，Linux toolchainで必要と表示されたものをインストール\n    ```:Ubuntu\n    sudo apt install clang cmake ninja-build pkg-config\n    ```\n1. もう一度確認\n    ```:Ubuntu\n    flutter doctor    \n    ```\n1. 上記コマンドの結果，Linux toolchainで必要と表示されたものをインストール\n    ```:Ubuntu\n    sudo apt install clang cmake ninja-build pkg-config\n    ```\n1. もう一度確認\n    ```:Ubuntu\n    flutter doctor    \n    ```\n    Linux toolchainが✓になればOK\n### Android SDK\n1. 下記サイトから利用規約に同意したうえでダウンロードリンクを取得\nhttps://developer.android.com/studio#downloads:~:text=d0192807f7e1cd4a001d13bb1e5904fc287b691211648877258aa44d1fa88275-,Linux,-commandlinetools%2Dlinux%2D9123335_latest\n1. ダウンロード（リンクは上で使用したものに置き換える）\n    ```:Ubuntu\n    wget https://dl.google.com/android/repository/commandlinetools-linux-9123335_latest.zip -O latest.zip\n    ```\n1. 解凍\n    ```:Ubuntu\n    unzip latest.zip\n    ```\n   `unzip not found`と出たら，`sudo apt install unzip`実行後にもう一度上記のコマンドで解凍する．\n1. 移動\n    ```:Ubuntu\n    mkdir -p ~/Android/SDK/cmdline-tools\n    ```\n    ```:Ubuntu\n    mv cmdline-tools ~/Android/SDK/cmdline-tools/latest\n    ```\n1. zipファイル削除\n    ```:Ubuntu\n    rm -rf latest.zip\n    ```\n1. `~/.bashrc`に以下を追記\n    ```:~/.bashrc\n    export ANDROID_HOME=$HOME/Android/SDK\n    export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin\n    ```\n1. `.bashrc`を反映\n    ```:Ubuntu\n    source .bashrc\n    ```\n1. 確認\n    ```:Ubuntu\n    sdkmanager --version\n    ```\n    参考結果：\n    8.0\n\n1. インストールできるイメージの確認\n    ```:Ubuntu\n    sdkmanager --list\n    ```\n1. adbの有効化\n    ```:Ubuntu\n    sdkmanager --install \"platform-tools\"\n    ```\n1. イメージのインストール\n    ```:Ubuntu\n    sdkmanager --install \"system-images;android-33;google_apis;x86_64\" \"platforms;android-33\" \"build-tools;33.0.1\"\n    ```\n    当時の最新を選んだ．\n1. ライセンスに同意\n    ```:Ubuntu\n    sdkmanager --licenses\n    ```\n\n### flutter環境確認\n1. 以下コマンドを実行\n    ```:Ubuntu\n    flutter doctor\n    ```\n    参考結果：\n    ```\n    Doctor summary (to see all details, run flutter doctor -v):\n    [✓] Flutter (Channel stable, 3.3.9, on Ubuntu 22.04.1 LTS\n        5.15.74.2-microsoft-standard-WSL2, locale en_US.UTF-8)\n    [✓] Android toolchain - develop for Android devices (Android SDK version 33.0.1)\n    [✗] Chrome - develop for the web (Cannot find Chrome executable at google-chrome)\n        ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.\n    [✓] Linux toolchain - develop for Linux desktop\n    [!] Android Studio (not installed)\n    [✓] Connected device (1 available)\n    [✓] HTTP Host Availability\n\n    ! Doctor found issues in 2 categories.\n    ```\n\n### VSCode\n1. 拡張機能「Flutter」を入れる \n\n## テスト\n1. Ubuntuで好きなディレクトリに移動\n1. テストアプリの作成\n    ```:Ubuntu\n    flutter create hello_world\n    ```\n1. アプリのディレクトリに移動\n    ```:Ubuntu\n    cd hello_world\n    ``` \n1. `lib/main.dart`をアクティブにする\n1. `Ctrl Shift P`でコマンドパレットを開く\n1. `Flutter: Select Device`でLinuxを選択\n1. `Ctrl Shift P`でコマンドパレットを開く\n1. `Debug: Start Debugging`を実行\n\n### コードの更新を反映する\n- コードを書き換え，VSCode上部に出ているボタンの，⚡アイコンをクリック\n- もしくはコードを書き換えて`Ctrl S`\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-02T06:05:40+09:00",
    "group": null,
    "id": "6135892d0db96934861d",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      },
      {
        "name": "WSL2",
        "versions": []
      },
      {
        "name": "Ubuntu22.04",
        "versions": []
      }
    ],
    "title": "Flutter on WSL2",
    "updated_at": "2022-12-02T07:24:03+09:00",
    "url": "https://qiita.com/gokamoda/items/6135892d0db96934861d",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 1,
      "github_login_name": null,
      "id": "gokamoda",
      "items_count": 2,
      "linkedin_id": "",
      "location": "",
      "name": "Kamoda Go",
      "organization": "",
      "permanent_id": 2280154,
      "profile_image_url": "https://secure.gravatar.com/avatar/be12e8d4ce940375b1bb4663eec8477b",
      "team_only": false,
      "twitter_screen_name": "GoKamoda",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<h1 data-sourcepos=\"1:1-1:28\">\n<span id=\"image多過ぎでしょ\" class=\"fragment\"></span><a href=\"#image%E5%A4%9A%E9%81%8E%E3%81%8E%E3%81%A7%E3%81%97%E3%82%87\"><i class=\"fa fa-link\"></i></a>image多過ぎでしょ　</h1>\n<p data-sourcepos=\"3:1-4:30\">　assets/images のフォルダにpngを大量に入れていました。　<br>\n　で、pubspec.yamlでは　</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"6:5-7:0\"><div class=\"highlight\"><pre><code>   -asstte/images/\n</code></pre></div></div>\n<p data-sourcepos=\"8:2-8:49\">と一括指定にしていたんですよ。　</p>\n<p data-sourcepos=\"10:1-11:96\">　でもあんまり画像が多いので、入れ子でフォルダを作ったんですね。そうしたら、表示できなくなった。imagesの中身全部って指定だと思ったのだけれど、そうではないんですね。　<br>\n　以下のように入れ子の各フォルダを指定しないとダメなのでした。　</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"14:5-16:0\"><div class=\"highlight\"><pre><code>    -assets/images/animation/\n    -assets/images/results/\n</code></pre></div></div>\n<p data-sourcepos=\"17:1-17:69\">　簡単なことでしたね。でもちょっと焦りました。</p>\n",
    "body": "# image多過ぎでしょ　\n\n　assets/images のフォルダにpngを大量に入れていました。　\n　で、pubspec.yamlでは　\n\n       -asstte/images/\n\n と一括指定にしていたんですよ。　\n\n　でもあんまり画像が多いので、入れ子でフォルダを作ったんですね。そうしたら、表示できなくなった。imagesの中身全部って指定だと思ったのだけれど、そうではないんですね。　\n　以下のように入れ子の各フォルダを指定しないとダメなのでした。　\n\n\n        -assets/images/animation/\n        -assets/images/results/\n\n　簡単なことでしたね。でもちょっと焦りました。\n\n\n\n\n\n        \n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2022-12-01T22:01:13+09:00",
    "group": null,
    "id": "ef0e928062cae942c9ef",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "stocks_count": 0,
    "tags": [
      {
        "name": "Flutter",
        "versions": []
      }
    ],
    "title": "画像表示でほんのちょっと躓いたこと",
    "updated_at": "2022-12-01T22:01:13+09:00",
    "url": "https://qiita.com/dongri727/items/ef0e928062cae942c9ef",
    "user": {
      "description": "老後の楽しみに壮大な計画を立て、邁進しています。",
      "facebook_id": "",
      "followees_count": 5,
      "followers_count": 10,
      "github_login_name": null,
      "id": "dongri727",
      "items_count": 66,
      "linkedin_id": "",
      "location": "",
      "name": "どんぐり",
      "organization": "",
      "permanent_id": 1646810,
      "profile_image_url": "https://lh3.googleusercontent.com/a-/AOh14GgjCdMtqc0__YQTvBgttuGzeJuU5n5es2O34D53=s50",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  }
]
